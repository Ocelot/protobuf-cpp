// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CMsgProtoBufHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgProtoBufHeader> {
} _CMsgProtoBufHeader_default_instance_;
class CMsgWebAPIKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgWebAPIKey> {
} _CMsgWebAPIKey_default_instance_;
class CMsgHttpRequest_RequestHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgHttpRequest_RequestHeader> {
} _CMsgHttpRequest_RequestHeader_default_instance_;
class CMsgHttpRequest_QueryParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgHttpRequest_QueryParam> {
} _CMsgHttpRequest_QueryParam_default_instance_;
class CMsgHttpRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgHttpRequest> {
} _CMsgHttpRequest_default_instance_;
class CMsgWebAPIRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgWebAPIRequest> {
} _CMsgWebAPIRequest_default_instance_;
class CMsgHttpResponse_ResponseHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgHttpResponse_ResponseHeader> {
} _CMsgHttpResponse_ResponseHeader_default_instance_;
class CMsgHttpResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgHttpResponse> {
} _CMsgHttpResponse_default_instance_;
class CMsgAMFindAccountsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMFindAccounts> {
} _CMsgAMFindAccounts_default_instance_;
class CMsgAMFindAccountsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMFindAccountsResponse> {
} _CMsgAMFindAccountsResponse_default_instance_;
class CMsgNotifyWatchdogDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgNotifyWatchdog> {
} _CMsgNotifyWatchdog_default_instance_;
class CMsgAMGetLicensesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMGetLicenses> {
} _CMsgAMGetLicenses_default_instance_;
class CMsgPackageLicenseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPackageLicense> {
} _CMsgPackageLicense_default_instance_;
class CMsgAMGetLicensesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMGetLicensesResponse> {
} _CMsgAMGetLicensesResponse_default_instance_;
class CMsgAMGetUserGameStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMGetUserGameStats> {
} _CMsgAMGetUserGameStats_default_instance_;
class CMsgAMGetUserGameStatsResponse_StatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMGetUserGameStatsResponse_Stats> {
} _CMsgAMGetUserGameStatsResponse_Stats_default_instance_;
class CMsgAMGetUserGameStatsResponse_Achievement_BlocksDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMGetUserGameStatsResponse_Achievement_Blocks> {
} _CMsgAMGetUserGameStatsResponse_Achievement_Blocks_default_instance_;
class CMsgAMGetUserGameStatsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMGetUserGameStatsResponse> {
} _CMsgAMGetUserGameStatsResponse_default_instance_;
class CMsgGCGetCommandListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetCommandList> {
} _CMsgGCGetCommandList_default_instance_;
class CMsgGCGetCommandListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetCommandListResponse> {
} _CMsgGCGetCommandListResponse_default_instance_;
class CGCMsgMemCachedGetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgMemCachedGet> {
} _CGCMsgMemCachedGet_default_instance_;
class CGCMsgMemCachedGetResponse_ValueTagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgMemCachedGetResponse_ValueTag> {
} _CGCMsgMemCachedGetResponse_ValueTag_default_instance_;
class CGCMsgMemCachedGetResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgMemCachedGetResponse> {
} _CGCMsgMemCachedGetResponse_default_instance_;
class CGCMsgMemCachedSet_KeyPairDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgMemCachedSet_KeyPair> {
} _CGCMsgMemCachedSet_KeyPair_default_instance_;
class CGCMsgMemCachedSetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgMemCachedSet> {
} _CGCMsgMemCachedSet_default_instance_;
class CGCMsgMemCachedDeleteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgMemCachedDelete> {
} _CGCMsgMemCachedDelete_default_instance_;
class CGCMsgMemCachedStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgMemCachedStats> {
} _CGCMsgMemCachedStats_default_instance_;
class CGCMsgMemCachedStatsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgMemCachedStatsResponse> {
} _CGCMsgMemCachedStatsResponse_default_instance_;
class CGCMsgSQLStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgSQLStats> {
} _CGCMsgSQLStats_default_instance_;
class CGCMsgSQLStatsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgSQLStatsResponse> {
} _CGCMsgSQLStatsResponse_default_instance_;
class CMsgAMAddFreeLicenseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMAddFreeLicense> {
} _CMsgAMAddFreeLicense_default_instance_;
class CMsgAMAddFreeLicenseResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMAddFreeLicenseResponse> {
} _CMsgAMAddFreeLicenseResponse_default_instance_;
class CGCMsgGetIPLocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgGetIPLocation> {
} _CGCMsgGetIPLocation_default_instance_;
class CIPLocationInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CIPLocationInfo> {
} _CIPLocationInfo_default_instance_;
class CGCMsgGetIPLocationResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgGetIPLocationResponse> {
} _CGCMsgGetIPLocationResponse_default_instance_;
class CGCMsgGetIPASNDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgGetIPASN> {
} _CGCMsgGetIPASN_default_instance_;
class CIPASNInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CIPASNInfo> {
} _CIPASNInfo_default_instance_;
class CGCMsgGetIPASNResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgGetIPASNResponse> {
} _CGCMsgGetIPASNResponse_default_instance_;
class CGCMsgSystemStatsSchemaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgSystemStatsSchema> {
} _CGCMsgSystemStatsSchema_default_instance_;
class CGCMsgGetSystemStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgGetSystemStats> {
} _CGCMsgGetSystemStats_default_instance_;
class CGCMsgGetSystemStatsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCMsgGetSystemStatsResponse> {
} _CGCMsgGetSystemStatsResponse_default_instance_;
class CMsgAMSendEmail_ReplacementTokenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMSendEmail_ReplacementToken> {
} _CMsgAMSendEmail_ReplacementToken_default_instance_;
class CMsgAMSendEmail_PersonaNameReplacementTokenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMSendEmail_PersonaNameReplacementToken> {
} _CMsgAMSendEmail_PersonaNameReplacementToken_default_instance_;
class CMsgAMSendEmailDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMSendEmail> {
} _CMsgAMSendEmail_default_instance_;
class CMsgAMSendEmailResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMSendEmailResponse> {
} _CMsgAMSendEmailResponse_default_instance_;
class CMsgGCGetEmailTemplateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetEmailTemplate> {
} _CMsgGCGetEmailTemplate_default_instance_;
class CMsgGCGetEmailTemplateResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetEmailTemplateResponse> {
} _CMsgGCGetEmailTemplateResponse_default_instance_;
class CMsgAMGrantGuestPasses2DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMGrantGuestPasses2> {
} _CMsgAMGrantGuestPasses2_default_instance_;
class CMsgAMGrantGuestPasses2ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAMGrantGuestPasses2Response> {
} _CMsgAMGrantGuestPasses2Response_default_instance_;
class CGCSystemMsg_GetAccountDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCSystemMsg_GetAccountDetails> {
} _CGCSystemMsg_GetAccountDetails_default_instance_;
class CGCSystemMsg_GetAccountDetails_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCSystemMsg_GetAccountDetails_Response> {
} _CGCSystemMsg_GetAccountDetails_Response_default_instance_;
class CMsgGCGetPersonaNamesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetPersonaNames> {
} _CMsgGCGetPersonaNames_default_instance_;
class CMsgGCGetPersonaNames_Response_PersonaNameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetPersonaNames_Response_PersonaName> {
} _CMsgGCGetPersonaNames_Response_PersonaName_default_instance_;
class CMsgGCGetPersonaNames_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetPersonaNames_Response> {
} _CMsgGCGetPersonaNames_Response_default_instance_;
class CMsgGCCheckFriendshipDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCheckFriendship> {
} _CMsgGCCheckFriendship_default_instance_;
class CMsgGCCheckFriendship_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCheckFriendship_Response> {
} _CMsgGCCheckFriendship_Response_default_instance_;
class CMsgGCGetAppFriendsListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetAppFriendsList> {
} _CMsgGCGetAppFriendsList_default_instance_;
class CMsgGCGetAppFriendsList_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetAppFriendsList_Response> {
} _CMsgGCGetAppFriendsList_Response_default_instance_;
class CMsgGCMsgMasterSetDirectory_SubGCDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgMasterSetDirectory_SubGC> {
} _CMsgGCMsgMasterSetDirectory_SubGC_default_instance_;
class CMsgGCMsgMasterSetDirectoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgMasterSetDirectory> {
} _CMsgGCMsgMasterSetDirectory_default_instance_;
class CMsgGCMsgMasterSetDirectory_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgMasterSetDirectory_Response> {
} _CMsgGCMsgMasterSetDirectory_Response_default_instance_;
class CMsgGCMsgWebAPIJobRequestForwardResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgWebAPIJobRequestForwardResponse> {
} _CMsgGCMsgWebAPIJobRequestForwardResponse_default_instance_;
class CGCSystemMsg_GetPurchaseTrust_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCSystemMsg_GetPurchaseTrust_Request> {
} _CGCSystemMsg_GetPurchaseTrust_Request_default_instance_;
class CGCSystemMsg_GetPurchaseTrust_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGCSystemMsg_GetPurchaseTrust_Response> {
} _CGCSystemMsg_GetPurchaseTrust_Response_default_instance_;
class CMsgGCHAccountVacStatusChangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCHAccountVacStatusChange> {
} _CMsgGCHAccountVacStatusChange_default_instance_;
class CMsgGCGetPartnerAccountLinkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetPartnerAccountLink> {
} _CMsgGCGetPartnerAccountLink_default_instance_;
class CMsgGCGetPartnerAccountLink_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetPartnerAccountLink_Response> {
} _CMsgGCGetPartnerAccountLink_Response_default_instance_;
class CMsgGCRoutingInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCRoutingInfo> {
} _CMsgGCRoutingInfo_default_instance_;
class CMsgGCMsgMasterSetWebAPIRouting_EntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgMasterSetWebAPIRouting_Entry> {
} _CMsgGCMsgMasterSetWebAPIRouting_Entry_default_instance_;
class CMsgGCMsgMasterSetWebAPIRoutingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgMasterSetWebAPIRouting> {
} _CMsgGCMsgMasterSetWebAPIRouting_default_instance_;
class CMsgGCMsgMasterSetClientMsgRouting_EntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgMasterSetClientMsgRouting_Entry> {
} _CMsgGCMsgMasterSetClientMsgRouting_Entry_default_instance_;
class CMsgGCMsgMasterSetClientMsgRoutingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgMasterSetClientMsgRouting> {
} _CMsgGCMsgMasterSetClientMsgRouting_default_instance_;
class CMsgGCMsgMasterSetWebAPIRouting_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgMasterSetWebAPIRouting_Response> {
} _CMsgGCMsgMasterSetWebAPIRouting_Response_default_instance_;
class CMsgGCMsgMasterSetClientMsgRouting_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgMasterSetClientMsgRouting_Response> {
} _CMsgGCMsgMasterSetClientMsgRouting_Response_default_instance_;
class CMsgGCMsgSetOptions_MessageRangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgSetOptions_MessageRange> {
} _CMsgGCMsgSetOptions_MessageRange_default_instance_;
class CMsgGCMsgSetOptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCMsgSetOptions> {
} _CMsgGCMsgSetOptions_default_instance_;
class CMsgGCHUpdateSession_ExtraFieldDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCHUpdateSession_ExtraField> {
} _CMsgGCHUpdateSession_ExtraField_default_instance_;
class CMsgGCHUpdateSessionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCHUpdateSession> {
} _CMsgGCHUpdateSession_default_instance_;
class CMsgNotificationOfSuspiciousActivity_MultipleGameInstancesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgNotificationOfSuspiciousActivity_MultipleGameInstances> {
} _CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_default_instance_;
class CMsgNotificationOfSuspiciousActivityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgNotificationOfSuspiciousActivity> {
} _CMsgNotificationOfSuspiciousActivity_default_instance_;
class CMsgDPPartnerMicroTxns_PartnerMicroTxnDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDPPartnerMicroTxns_PartnerMicroTxn> {
} _CMsgDPPartnerMicroTxns_PartnerMicroTxn_default_instance_;
class CMsgDPPartnerMicroTxns_PartnerInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDPPartnerMicroTxns_PartnerInfo> {
} _CMsgDPPartnerMicroTxns_PartnerInfo_default_instance_;
class CMsgDPPartnerMicroTxnsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDPPartnerMicroTxns> {
} _CMsgDPPartnerMicroTxns_default_instance_;
class CMsgDPPartnerMicroTxnsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDPPartnerMicroTxnsResponse> {
} _CMsgDPPartnerMicroTxnsResponse_default_instance_;
class CMsgGCHVacVerificationChangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCHVacVerificationChange> {
} _CMsgGCHVacVerificationChange_default_instance_;

namespace protobuf_steammessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[85];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, client_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, client_session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, source_app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, job_id_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, job_id_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, target_job_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, error_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, gc_msg_src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, gc_dir_index_source_),
  2,
  3,
  4,
  8,
  9,
  0,
  7,
  1,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIKey, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIKey, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIKey, publisher_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIKey, key_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIKey, domain_),
  4,
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest_RequestHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest_RequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest_RequestHeader, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest_RequestHeader, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest_QueryParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest_QueryParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest_QueryParam, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest_QueryParam, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest, request_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest, hostname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest, headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest, get_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest, post_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpRequest, absolute_timeout_),
  3,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIRequest, unused_job_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIRequest, interface_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIRequest, method_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIRequest, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIRequest, api_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIRequest, request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWebAPIRequest, routing_app_id_),
  0,
  1,
  2,
  5,
  3,
  4,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpResponse_ResponseHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpResponse_ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpResponse_ResponseHeader, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpResponse_ResponseHeader, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpResponse, status_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpResponse, headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHttpResponse, body_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMFindAccounts, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMFindAccounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMFindAccounts, search_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMFindAccounts, search_string_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMFindAccountsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMFindAccountsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMFindAccountsResponse, steam_id_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotifyWatchdog, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotifyWatchdog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotifyWatchdog, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotifyWatchdog, alert_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotifyWatchdog, critical_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotifyWatchdog, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotifyWatchdog, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotifyWatchdog, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotifyWatchdog, recipient_),
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetLicenses, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetLicenses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetLicenses, steamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPackageLicense, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPackageLicense, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPackageLicense, package_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPackageLicense, time_created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPackageLicense, owner_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetLicensesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetLicensesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetLicensesResponse, license_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetLicensesResponse, result_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStats, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStats, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStats, stats_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Stats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Stats, stat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Stats, stat_value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Achievement_Blocks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Achievement_Blocks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Achievement_Blocks, achievement_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Achievement_Blocks, achievement_bit_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Achievement_Blocks, unlock_time_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse, achievement_blocks_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetCommandList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetCommandList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetCommandList, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetCommandList, command_prefix_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetCommandListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetCommandListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetCommandListResponse, command_name_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGet, keys_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGetResponse_ValueTag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGetResponse_ValueTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGetResponse_ValueTag, found_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGetResponse_ValueTag, value_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGetResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedGetResponse, values_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedSet_KeyPair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedSet_KeyPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedSet_KeyPair, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedSet_KeyPair, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedSet, keys_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedDelete, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedDelete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedDelete, keys_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, curr_connections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, cmd_get_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, cmd_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, cmd_flush_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, get_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, get_misses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, delete_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, delete_misses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, bytes_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, bytes_written_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, limit_maxbytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, curr_items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, evictions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, bytes_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSQLStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSQLStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSQLStats, schema_catalog_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSQLStatsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSQLStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSQLStatsResponse, threads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSQLStatsResponse, threads_connected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSQLStatsResponse, threads_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSQLStatsResponse, operations_submitted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSQLStatsResponse, prepared_statements_executed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSQLStatsResponse, non_prepared_statements_executed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSQLStatsResponse, deadlock_retries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSQLStatsResponse, operations_timed_out_in_queue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSQLStatsResponse, errors_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicense, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicense, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicense, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicense, ip_public_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicense, packageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicense, store_country_code_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicenseResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicenseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicenseResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicenseResponse, purchase_result_detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMAddFreeLicenseResponse, transid_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetIPLocation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetIPLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetIPLocation, ips_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPLocationInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPLocationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPLocationInfo, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPLocationInfo, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPLocationInfo, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPLocationInfo, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPLocationInfo, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPLocationInfo, city_),
  3,
  4,
  5,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetIPLocationResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetIPLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetIPLocationResponse, infos_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetIPASN, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetIPASN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetIPASN, ips_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPASNInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPASNInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPASNInfo, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPASNInfo, asn_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetIPASNResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetIPASNResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetIPASNResponse, infos_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSystemStatsSchema, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSystemStatsSchema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSystemStatsSchema, gc_app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgSystemStatsSchema, schema_kv_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, gc_app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, stats_kv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, active_jobs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, yielding_jobs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, user_sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, game_server_sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, socaches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, socaches_to_unload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, socaches_loading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, writeback_queue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, steamid_locks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, logon_queue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, logon_jobs_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail_ReplacementToken, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail_ReplacementToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail_ReplacementToken, token_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail_ReplacementToken, token_value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail_PersonaNameReplacementToken, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail_PersonaNameReplacementToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail_PersonaNameReplacementToken, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail_PersonaNameReplacementToken, token_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail, email_msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail, email_format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail, persona_name_tokens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail, source_gc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmail, tokens_),
  0,
  1,
  2,
  ~0u,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmailResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMSendEmailResponse, eresult_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplate, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplate, email_msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplate, email_lang_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplate, email_format_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplateResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplateResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplateResponse, template_exists_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetEmailTemplateResponse, template__),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2, package_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2, passes_to_grant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2, days_to_expiration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2, action_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2Response, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAMGrantGuestPasses2Response, passes_granted_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, appid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, eresult_deprecated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, account_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, persona_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_profile_created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_profile_public_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_inventory_public_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_vac_banned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_cyber_cafe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_school_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_limited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_subscribed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, package_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_free_trial_account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, free_trial_expiration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_low_violence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_account_locked_down_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_community_banned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_trade_banned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, trade_ban_expiration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, suspension_end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, currency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, steam_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, friend_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, account_creation_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_steamguard_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_phone_verified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_two_factor_auth_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, two_factor_enabled_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, phone_verification_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, phone_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_phone_identifying_),
  31,
  0,
  1,
  7,
  8,
  9,
  10,
  3,
  4,
  5,
  6,
  11,
  13,
  12,
  14,
  15,
  16,
  23,
  17,
  18,
  19,
  2,
  20,
  21,
  22,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames, steamids_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames_Response_PersonaName, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames_Response_PersonaName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames_Response_PersonaName, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames_Response_PersonaName, persona_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames_Response, succeeded_lookups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPersonaNames_Response, failed_lookup_steamids_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCheckFriendship, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCheckFriendship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCheckFriendship, steamid_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCheckFriendship, steamid_right_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCheckFriendship_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCheckFriendship_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCheckFriendship_Response, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCCheckFriendship_Response, found_friendship_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetAppFriendsList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetAppFriendsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetAppFriendsList, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetAppFriendsList, include_friendship_timestamps_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetAppFriendsList_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetAppFriendsList_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetAppFriendsList_Response, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetAppFriendsList_Response, steamids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetAppFriendsList_Response, friendship_timestamps_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetDirectory_SubGC, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetDirectory_SubGC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetDirectory_SubGC, dir_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetDirectory_SubGC, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetDirectory_SubGC, box_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetDirectory_SubGC, command_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetDirectory_SubGC, gc_binary_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetDirectory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetDirectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetDirectory, master_dir_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetDirectory, dir_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetDirectory_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetDirectory_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetDirectory_Response, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetDirectory_Response, message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgWebAPIJobRequestForwardResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgWebAPIJobRequestForwardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgWebAPIJobRequestForwardResponse, dir_index_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Request, steamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Response, has_prior_purchase_history_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Response, has_no_recent_password_resets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Response, is_wallet_cash_trusted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Response, time_all_trusted_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountVacStatusChange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountVacStatusChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountVacStatusChange, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountVacStatusChange, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountVacStatusChange, rtime_vacban_starts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountVacStatusChange, is_banned_now_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountVacStatusChange, is_banned_future_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPartnerAccountLink, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPartnerAccountLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPartnerAccountLink, steamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPartnerAccountLink_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPartnerAccountLink_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPartnerAccountLink_Response, pwid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPartnerAccountLink_Response, nexonid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRoutingInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRoutingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRoutingInfo, dir_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRoutingInfo, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRoutingInfo, fallback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRoutingInfo, protobuf_field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRoutingInfo, webapi_param_),
  ~0u,
  1,
  3,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetWebAPIRouting_Entry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetWebAPIRouting_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetWebAPIRouting_Entry, interface_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetWebAPIRouting_Entry, method_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetWebAPIRouting_Entry, routing_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetWebAPIRouting, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetWebAPIRouting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetWebAPIRouting, entries_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetClientMsgRouting_Entry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetClientMsgRouting_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetClientMsgRouting_Entry, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetClientMsgRouting_Entry, routing_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetClientMsgRouting, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetClientMsgRouting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetClientMsgRouting, entries_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetWebAPIRouting_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetWebAPIRouting_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetWebAPIRouting_Response, eresult_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetClientMsgRouting_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetClientMsgRouting_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgMasterSetClientMsgRouting_Response, eresult_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgSetOptions_MessageRange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgSetOptions_MessageRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgSetOptions_MessageRange, low_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgSetOptions_MessageRange, high_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgSetOptions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgSetOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgSetOptions, options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgSetOptions, client_msg_ranges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCMsgSetOptions, gcsql_version_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHUpdateSession_ExtraField, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHUpdateSession_ExtraField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHUpdateSession_ExtraField, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHUpdateSession_ExtraField, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHUpdateSession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHUpdateSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHUpdateSession, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHUpdateSession, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHUpdateSession, online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHUpdateSession, server_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHUpdateSession, server_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHUpdateSession, server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHUpdateSession, os_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHUpdateSession, client_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHUpdateSession, extra_fields_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotificationOfSuspiciousActivity_MultipleGameInstances, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotificationOfSuspiciousActivity_MultipleGameInstances, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotificationOfSuspiciousActivity_MultipleGameInstances, app_instance_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotificationOfSuspiciousActivity_MultipleGameInstances, other_steamids_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotificationOfSuspiciousActivity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotificationOfSuspiciousActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotificationOfSuspiciousActivity, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotificationOfSuspiciousActivity, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgNotificationOfSuspiciousActivity, multiple_instances_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, init_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, last_update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, txn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, line_item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, def_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, tax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, price_usd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, tax_usd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, purchase_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, steam_txn_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, country_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, region_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, ref_trans_id_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  0,
  1,
  15,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerInfo, partner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerInfo, partner_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerInfo, currency_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerInfo, currency_name_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns, gc_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns, partner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxns, transactions_),
  2,
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxnsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxnsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxnsResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDPPartnerMicroTxnsResponse, eerrorcode_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, is_verified_),
  0,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 15, sizeof(CMsgProtoBufHeader)},
  { 25, 35, sizeof(CMsgWebAPIKey)},
  { 40, 47, sizeof(CMsgHttpRequest_RequestHeader)},
  { 49, 56, sizeof(CMsgHttpRequest_QueryParam)},
  { 58, 71, sizeof(CMsgHttpRequest)},
  { 79, 91, sizeof(CMsgWebAPIRequest)},
  { 98, 105, sizeof(CMsgHttpResponse_ResponseHeader)},
  { 107, 115, sizeof(CMsgHttpResponse)},
  { 118, 125, sizeof(CMsgAMFindAccounts)},
  { 127, 133, sizeof(CMsgAMFindAccountsResponse)},
  { 134, 146, sizeof(CMsgNotifyWatchdog)},
  { 153, 159, sizeof(CMsgAMGetLicenses)},
  { 160, 168, sizeof(CMsgPackageLicense)},
  { 171, 178, sizeof(CMsgAMGetLicensesResponse)},
  { 180, 188, sizeof(CMsgAMGetUserGameStats)},
  { 191, 198, sizeof(CMsgAMGetUserGameStatsResponse_Stats)},
  { 200, 208, sizeof(CMsgAMGetUserGameStatsResponse_Achievement_Blocks)},
  { 211, 221, sizeof(CMsgAMGetUserGameStatsResponse)},
  { 226, 233, sizeof(CMsgGCGetCommandList)},
  { 235, 241, sizeof(CMsgGCGetCommandListResponse)},
  { 242, 248, sizeof(CGCMsgMemCachedGet)},
  { 249, 256, sizeof(CGCMsgMemCachedGetResponse_ValueTag)},
  { 258, 264, sizeof(CGCMsgMemCachedGetResponse)},
  { 265, 272, sizeof(CGCMsgMemCachedSet_KeyPair)},
  { 274, 280, sizeof(CGCMsgMemCachedSet)},
  { 281, 287, sizeof(CGCMsgMemCachedDelete)},
  { 288, 293, sizeof(CGCMsgMemCachedStats)},
  { 293, 312, sizeof(CGCMsgMemCachedStatsResponse)},
  { 326, 332, sizeof(CGCMsgSQLStats)},
  { 333, 347, sizeof(CGCMsgSQLStatsResponse)},
  { 356, 365, sizeof(CMsgAMAddFreeLicense)},
  { 369, 377, sizeof(CMsgAMAddFreeLicenseResponse)},
  { 380, 386, sizeof(CGCMsgGetIPLocation)},
  { 387, 398, sizeof(CIPLocationInfo)},
  { 404, 410, sizeof(CGCMsgGetIPLocationResponse)},
  { 411, 417, sizeof(CGCMsgGetIPASN)},
  { 418, 425, sizeof(CIPASNInfo)},
  { 427, 433, sizeof(CGCMsgGetIPASNResponse)},
  { 434, 441, sizeof(CGCMsgSystemStatsSchema)},
  { 443, 448, sizeof(CGCMsgGetSystemStats)},
  { 448, 466, sizeof(CGCMsgGetSystemStatsResponse)},
  { 479, 486, sizeof(CMsgAMSendEmail_ReplacementToken)},
  { 488, 495, sizeof(CMsgAMSendEmail_PersonaNameReplacementToken)},
  { 497, 508, sizeof(CMsgAMSendEmail)},
  { 514, 520, sizeof(CMsgAMSendEmailResponse)},
  { 521, 530, sizeof(CMsgGCGetEmailTemplate)},
  { 534, 542, sizeof(CMsgGCGetEmailTemplateResponse)},
  { 545, 555, sizeof(CMsgAMGrantGuestPasses2)},
  { 560, 567, sizeof(CMsgAMGrantGuestPasses2Response)},
  { 569, 576, sizeof(CGCSystemMsg_GetAccountDetails)},
  { 578, 615, sizeof(CGCSystemMsg_GetAccountDetails_Response)},
  { 647, 653, sizeof(CMsgGCGetPersonaNames)},
  { 654, 661, sizeof(CMsgGCGetPersonaNames_Response_PersonaName)},
  { 663, 670, sizeof(CMsgGCGetPersonaNames_Response)},
  { 672, 679, sizeof(CMsgGCCheckFriendship)},
  { 681, 688, sizeof(CMsgGCCheckFriendship_Response)},
  { 690, 697, sizeof(CMsgGCGetAppFriendsList)},
  { 699, 707, sizeof(CMsgGCGetAppFriendsList_Response)},
  { 710, 720, sizeof(CMsgGCMsgMasterSetDirectory_SubGC)},
  { 725, 732, sizeof(CMsgGCMsgMasterSetDirectory)},
  { 734, 741, sizeof(CMsgGCMsgMasterSetDirectory_Response)},
  { 743, 749, sizeof(CMsgGCMsgWebAPIJobRequestForwardResponse)},
  { 750, 756, sizeof(CGCSystemMsg_GetPurchaseTrust_Request)},
  { 757, 766, sizeof(CGCSystemMsg_GetPurchaseTrust_Response)},
  { 770, 780, sizeof(CMsgGCHAccountVacStatusChange)},
  { 785, 791, sizeof(CMsgGCGetPartnerAccountLink)},
  { 792, 799, sizeof(CMsgGCGetPartnerAccountLink_Response)},
  { 801, 811, sizeof(CMsgGCRoutingInfo)},
  { 816, 824, sizeof(CMsgGCMsgMasterSetWebAPIRouting_Entry)},
  { 827, 833, sizeof(CMsgGCMsgMasterSetWebAPIRouting)},
  { 834, 841, sizeof(CMsgGCMsgMasterSetClientMsgRouting_Entry)},
  { 843, 849, sizeof(CMsgGCMsgMasterSetClientMsgRouting)},
  { 850, 856, sizeof(CMsgGCMsgMasterSetWebAPIRouting_Response)},
  { 857, 863, sizeof(CMsgGCMsgMasterSetClientMsgRouting_Response)},
  { 864, 871, sizeof(CMsgGCMsgSetOptions_MessageRange)},
  { 873, 881, sizeof(CMsgGCMsgSetOptions)},
  { 884, 891, sizeof(CMsgGCHUpdateSession_ExtraField)},
  { 893, 907, sizeof(CMsgGCHUpdateSession)},
  { 916, 923, sizeof(CMsgNotificationOfSuspiciousActivity_MultipleGameInstances)},
  { 925, 933, sizeof(CMsgNotificationOfSuspiciousActivity)},
  { 936, 958, sizeof(CMsgDPPartnerMicroTxns_PartnerMicroTxn)},
  { 975, 984, sizeof(CMsgDPPartnerMicroTxns_PartnerInfo)},
  { 988, 997, sizeof(CMsgDPPartnerMicroTxns)},
  { 1001, 1008, sizeof(CMsgDPPartnerMicroTxnsResponse)},
  { 1010, 1018, sizeof(CMsgGCHVacVerificationChange)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgProtoBufHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgWebAPIKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgHttpRequest_RequestHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgHttpRequest_QueryParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgHttpRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgWebAPIRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgHttpResponse_ResponseHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgHttpResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAMFindAccounts_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAMFindAccountsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgNotifyWatchdog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAMGetLicenses_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPackageLicense_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAMGetLicensesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAMGetUserGameStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAMGetUserGameStatsResponse_Stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAMGetUserGameStatsResponse_Achievement_Blocks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAMGetUserGameStatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCGetCommandList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCGetCommandListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCMsgMemCachedGet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCMsgMemCachedGetResponse_ValueTag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCMsgMemCachedGetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCMsgMemCachedSet_KeyPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCMsgMemCachedSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCMsgMemCachedDelete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCMsgMemCachedStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCMsgMemCachedStatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCMsgSQLStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCMsgSQLStatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAMAddFreeLicense_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAMAddFreeLicenseResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCMsgGetIPLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CIPLocationInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCMsgGetIPLocationResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCMsgGetIPASN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CIPASNInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCMsgGetIPASNResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCMsgSystemStatsSchema_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCMsgGetSystemStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCMsgGetSystemStatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAMSendEmail_ReplacementToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAMSendEmail_PersonaNameReplacementToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAMSendEmail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAMSendEmailResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCGetEmailTemplate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCGetEmailTemplateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAMGrantGuestPasses2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAMGrantGuestPasses2Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCSystemMsg_GetAccountDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCSystemMsg_GetAccountDetails_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCGetPersonaNames_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCGetPersonaNames_Response_PersonaName_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCGetPersonaNames_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCCheckFriendship_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCCheckFriendship_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCGetAppFriendsList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCGetAppFriendsList_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCMsgMasterSetDirectory_SubGC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCMsgMasterSetDirectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCMsgMasterSetDirectory_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCMsgWebAPIJobRequestForwardResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCSystemMsg_GetPurchaseTrust_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGCSystemMsg_GetPurchaseTrust_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCHAccountVacStatusChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCGetPartnerAccountLink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCGetPartnerAccountLink_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCRoutingInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCMsgMasterSetWebAPIRouting_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCMsgMasterSetWebAPIRouting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCMsgMasterSetClientMsgRouting_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCMsgMasterSetClientMsgRouting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCMsgMasterSetWebAPIRouting_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCMsgMasterSetClientMsgRouting_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCMsgSetOptions_MessageRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCMsgSetOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCHUpdateSession_ExtraField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCHUpdateSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgNotificationOfSuspiciousActivity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDPPartnerMicroTxns_PartnerMicroTxn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDPPartnerMicroTxns_PartnerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDPPartnerMicroTxns_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDPPartnerMicroTxnsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCHVacVerificationChange_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 85);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgProtoBufHeader_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgWebAPIKey_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgHttpRequest_RequestHeader_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgHttpRequest_QueryParam_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgHttpRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgWebAPIRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgHttpResponse_ResponseHeader_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgHttpResponse_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgAMFindAccounts_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgAMFindAccountsResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMsgNotifyWatchdog_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMsgAMGetLicenses_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMsgPackageLicense_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CMsgAMGetLicensesResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CMsgAMGetUserGameStats_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CMsgAMGetUserGameStatsResponse_Stats_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CMsgAMGetUserGameStatsResponse_Achievement_Blocks_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CMsgAMGetUserGameStatsResponse_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CMsgGCGetCommandList_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CMsgGCGetCommandListResponse_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CGCMsgMemCachedGet_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CGCMsgMemCachedGetResponse_ValueTag_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CGCMsgMemCachedGetResponse_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CGCMsgMemCachedSet_KeyPair_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CGCMsgMemCachedSet_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CGCMsgMemCachedDelete_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CGCMsgMemCachedStats_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CGCMsgMemCachedStatsResponse_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CGCMsgSQLStats_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CGCMsgSQLStatsResponse_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CMsgAMAddFreeLicense_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _CMsgAMAddFreeLicenseResponse_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CGCMsgGetIPLocation_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _CIPLocationInfo_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CGCMsgGetIPLocationResponse_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _CGCMsgGetIPASN_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _CIPASNInfo_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _CGCMsgGetIPASNResponse_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _CGCMsgSystemStatsSchema_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _CGCMsgGetSystemStats_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _CGCMsgGetSystemStatsResponse_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _CMsgAMSendEmail_ReplacementToken_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _CMsgAMSendEmail_PersonaNameReplacementToken_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _CMsgAMSendEmail_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _CMsgAMSendEmailResponse_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _CMsgGCGetEmailTemplate_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _CMsgGCGetEmailTemplateResponse_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _CMsgAMGrantGuestPasses2_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _CMsgAMGrantGuestPasses2Response_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _CGCSystemMsg_GetAccountDetails_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _CGCSystemMsg_GetAccountDetails_Response_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _CMsgGCGetPersonaNames_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _CMsgGCGetPersonaNames_Response_PersonaName_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _CMsgGCGetPersonaNames_Response_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _CMsgGCCheckFriendship_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _CMsgGCCheckFriendship_Response_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _CMsgGCGetAppFriendsList_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _CMsgGCGetAppFriendsList_Response_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _CMsgGCMsgMasterSetDirectory_SubGC_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _CMsgGCMsgMasterSetDirectory_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _CMsgGCMsgMasterSetDirectory_Response_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _CMsgGCMsgWebAPIJobRequestForwardResponse_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
  _CGCSystemMsg_GetPurchaseTrust_Request_default_instance_.Shutdown();
  delete file_level_metadata[62].reflection;
  _CGCSystemMsg_GetPurchaseTrust_Response_default_instance_.Shutdown();
  delete file_level_metadata[63].reflection;
  _CMsgGCHAccountVacStatusChange_default_instance_.Shutdown();
  delete file_level_metadata[64].reflection;
  _CMsgGCGetPartnerAccountLink_default_instance_.Shutdown();
  delete file_level_metadata[65].reflection;
  _CMsgGCGetPartnerAccountLink_Response_default_instance_.Shutdown();
  delete file_level_metadata[66].reflection;
  _CMsgGCRoutingInfo_default_instance_.Shutdown();
  delete file_level_metadata[67].reflection;
  _CMsgGCMsgMasterSetWebAPIRouting_Entry_default_instance_.Shutdown();
  delete file_level_metadata[68].reflection;
  _CMsgGCMsgMasterSetWebAPIRouting_default_instance_.Shutdown();
  delete file_level_metadata[69].reflection;
  _CMsgGCMsgMasterSetClientMsgRouting_Entry_default_instance_.Shutdown();
  delete file_level_metadata[70].reflection;
  _CMsgGCMsgMasterSetClientMsgRouting_default_instance_.Shutdown();
  delete file_level_metadata[71].reflection;
  _CMsgGCMsgMasterSetWebAPIRouting_Response_default_instance_.Shutdown();
  delete file_level_metadata[72].reflection;
  _CMsgGCMsgMasterSetClientMsgRouting_Response_default_instance_.Shutdown();
  delete file_level_metadata[73].reflection;
  _CMsgGCMsgSetOptions_MessageRange_default_instance_.Shutdown();
  delete file_level_metadata[74].reflection;
  _CMsgGCMsgSetOptions_default_instance_.Shutdown();
  delete file_level_metadata[75].reflection;
  _CMsgGCHUpdateSession_ExtraField_default_instance_.Shutdown();
  delete file_level_metadata[76].reflection;
  _CMsgGCHUpdateSession_default_instance_.Shutdown();
  delete file_level_metadata[77].reflection;
  _CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_default_instance_.Shutdown();
  delete file_level_metadata[78].reflection;
  _CMsgNotificationOfSuspiciousActivity_default_instance_.Shutdown();
  delete file_level_metadata[79].reflection;
  _CMsgDPPartnerMicroTxns_PartnerMicroTxn_default_instance_.Shutdown();
  delete file_level_metadata[80].reflection;
  _CMsgDPPartnerMicroTxns_PartnerInfo_default_instance_.Shutdown();
  delete file_level_metadata[81].reflection;
  _CMsgDPPartnerMicroTxns_default_instance_.Shutdown();
  delete file_level_metadata[82].reflection;
  _CMsgDPPartnerMicroTxnsResponse_default_instance_.Shutdown();
  delete file_level_metadata[83].reflection;
  _CMsgGCHVacVerificationChange_default_instance_.Shutdown();
  delete file_level_metadata[84].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fdescriptor_2eproto::InitDefaults();
  _CMsgProtoBufHeader_default_instance_.DefaultConstruct();
  _CMsgWebAPIKey_default_instance_.DefaultConstruct();
  _CMsgHttpRequest_RequestHeader_default_instance_.DefaultConstruct();
  _CMsgHttpRequest_QueryParam_default_instance_.DefaultConstruct();
  _CMsgHttpRequest_default_instance_.DefaultConstruct();
  _CMsgWebAPIRequest_default_instance_.DefaultConstruct();
  _CMsgHttpResponse_ResponseHeader_default_instance_.DefaultConstruct();
  _CMsgHttpResponse_default_instance_.DefaultConstruct();
  _CMsgAMFindAccounts_default_instance_.DefaultConstruct();
  _CMsgAMFindAccountsResponse_default_instance_.DefaultConstruct();
  _CMsgNotifyWatchdog_default_instance_.DefaultConstruct();
  _CMsgAMGetLicenses_default_instance_.DefaultConstruct();
  _CMsgPackageLicense_default_instance_.DefaultConstruct();
  _CMsgAMGetLicensesResponse_default_instance_.DefaultConstruct();
  _CMsgAMGetUserGameStats_default_instance_.DefaultConstruct();
  _CMsgAMGetUserGameStatsResponse_Stats_default_instance_.DefaultConstruct();
  _CMsgAMGetUserGameStatsResponse_Achievement_Blocks_default_instance_.DefaultConstruct();
  _CMsgAMGetUserGameStatsResponse_default_instance_.DefaultConstruct();
  _CMsgGCGetCommandList_default_instance_.DefaultConstruct();
  _CMsgGCGetCommandListResponse_default_instance_.DefaultConstruct();
  _CGCMsgMemCachedGet_default_instance_.DefaultConstruct();
  _CGCMsgMemCachedGetResponse_ValueTag_default_instance_.DefaultConstruct();
  _CGCMsgMemCachedGetResponse_default_instance_.DefaultConstruct();
  _CGCMsgMemCachedSet_KeyPair_default_instance_.DefaultConstruct();
  _CGCMsgMemCachedSet_default_instance_.DefaultConstruct();
  _CGCMsgMemCachedDelete_default_instance_.DefaultConstruct();
  _CGCMsgMemCachedStats_default_instance_.DefaultConstruct();
  _CGCMsgMemCachedStatsResponse_default_instance_.DefaultConstruct();
  _CGCMsgSQLStats_default_instance_.DefaultConstruct();
  _CGCMsgSQLStatsResponse_default_instance_.DefaultConstruct();
  _CMsgAMAddFreeLicense_default_instance_.DefaultConstruct();
  _CMsgAMAddFreeLicenseResponse_default_instance_.DefaultConstruct();
  _CGCMsgGetIPLocation_default_instance_.DefaultConstruct();
  _CIPLocationInfo_default_instance_.DefaultConstruct();
  _CGCMsgGetIPLocationResponse_default_instance_.DefaultConstruct();
  _CGCMsgGetIPASN_default_instance_.DefaultConstruct();
  _CIPASNInfo_default_instance_.DefaultConstruct();
  _CGCMsgGetIPASNResponse_default_instance_.DefaultConstruct();
  _CGCMsgSystemStatsSchema_default_instance_.DefaultConstruct();
  _CGCMsgGetSystemStats_default_instance_.DefaultConstruct();
  _CGCMsgGetSystemStatsResponse_default_instance_.DefaultConstruct();
  _CMsgAMSendEmail_ReplacementToken_default_instance_.DefaultConstruct();
  _CMsgAMSendEmail_PersonaNameReplacementToken_default_instance_.DefaultConstruct();
  _CMsgAMSendEmail_default_instance_.DefaultConstruct();
  _CMsgAMSendEmailResponse_default_instance_.DefaultConstruct();
  _CMsgGCGetEmailTemplate_default_instance_.DefaultConstruct();
  _CMsgGCGetEmailTemplateResponse_default_instance_.DefaultConstruct();
  _CMsgAMGrantGuestPasses2_default_instance_.DefaultConstruct();
  _CMsgAMGrantGuestPasses2Response_default_instance_.DefaultConstruct();
  _CGCSystemMsg_GetAccountDetails_default_instance_.DefaultConstruct();
  _CGCSystemMsg_GetAccountDetails_Response_default_instance_.DefaultConstruct();
  _CMsgGCGetPersonaNames_default_instance_.DefaultConstruct();
  _CMsgGCGetPersonaNames_Response_PersonaName_default_instance_.DefaultConstruct();
  _CMsgGCGetPersonaNames_Response_default_instance_.DefaultConstruct();
  _CMsgGCCheckFriendship_default_instance_.DefaultConstruct();
  _CMsgGCCheckFriendship_Response_default_instance_.DefaultConstruct();
  _CMsgGCGetAppFriendsList_default_instance_.DefaultConstruct();
  _CMsgGCGetAppFriendsList_Response_default_instance_.DefaultConstruct();
  _CMsgGCMsgMasterSetDirectory_SubGC_default_instance_.DefaultConstruct();
  _CMsgGCMsgMasterSetDirectory_default_instance_.DefaultConstruct();
  _CMsgGCMsgMasterSetDirectory_Response_default_instance_.DefaultConstruct();
  _CMsgGCMsgWebAPIJobRequestForwardResponse_default_instance_.DefaultConstruct();
  _CGCSystemMsg_GetPurchaseTrust_Request_default_instance_.DefaultConstruct();
  _CGCSystemMsg_GetPurchaseTrust_Response_default_instance_.DefaultConstruct();
  _CMsgGCHAccountVacStatusChange_default_instance_.DefaultConstruct();
  _CMsgGCGetPartnerAccountLink_default_instance_.DefaultConstruct();
  _CMsgGCGetPartnerAccountLink_Response_default_instance_.DefaultConstruct();
  _CMsgGCRoutingInfo_default_instance_.DefaultConstruct();
  _CMsgGCMsgMasterSetWebAPIRouting_Entry_default_instance_.DefaultConstruct();
  _CMsgGCMsgMasterSetWebAPIRouting_default_instance_.DefaultConstruct();
  _CMsgGCMsgMasterSetClientMsgRouting_Entry_default_instance_.DefaultConstruct();
  _CMsgGCMsgMasterSetClientMsgRouting_default_instance_.DefaultConstruct();
  _CMsgGCMsgMasterSetWebAPIRouting_Response_default_instance_.DefaultConstruct();
  _CMsgGCMsgMasterSetClientMsgRouting_Response_default_instance_.DefaultConstruct();
  _CMsgGCMsgSetOptions_MessageRange_default_instance_.DefaultConstruct();
  _CMsgGCMsgSetOptions_default_instance_.DefaultConstruct();
  _CMsgGCHUpdateSession_ExtraField_default_instance_.DefaultConstruct();
  _CMsgGCHUpdateSession_default_instance_.DefaultConstruct();
  _CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_default_instance_.DefaultConstruct();
  _CMsgNotificationOfSuspiciousActivity_default_instance_.DefaultConstruct();
  _CMsgDPPartnerMicroTxns_PartnerMicroTxn_default_instance_.DefaultConstruct();
  _CMsgDPPartnerMicroTxns_PartnerInfo_default_instance_.DefaultConstruct();
  _CMsgDPPartnerMicroTxns_default_instance_.DefaultConstruct();
  _CMsgDPPartnerMicroTxnsResponse_default_instance_.DefaultConstruct();
  _CMsgGCHVacVerificationChange_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::google::protobuf::FieldOptions::internal_default_instance(),
    60000, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::google::protobuf::MessageOptions::internal_default_instance(),
    60000, 5, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::google::protobuf::MessageOptions::internal_default_instance(),
    60001, 5, false, false);
  _CMsgWebAPIRequest_default_instance_.get_mutable()->api_key_ = const_cast< ::proto::dota::CMsgWebAPIKey*>(
      ::proto::dota::CMsgWebAPIKey::internal_default_instance());
  _CMsgWebAPIRequest_default_instance_.get_mutable()->request_ = const_cast< ::proto::dota::CMsgHttpRequest*>(
      ::proto::dota::CMsgHttpRequest::internal_default_instance());
  _CMsgGCMsgMasterSetWebAPIRouting_Entry_default_instance_.get_mutable()->routing_ = const_cast< ::proto::dota::CMsgGCRoutingInfo*>(
      ::proto::dota::CMsgGCRoutingInfo::internal_default_instance());
  _CMsgGCMsgMasterSetClientMsgRouting_Entry_default_instance_.get_mutable()->routing_ = const_cast< ::proto::dota::CMsgGCRoutingInfo*>(
      ::proto::dota::CMsgGCRoutingInfo::internal_default_instance());
  _CMsgNotificationOfSuspiciousActivity_default_instance_.get_mutable()->multiple_instances_ = const_cast< ::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances*>(
      ::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::internal_default_instance());
  _CMsgDPPartnerMicroTxns_default_instance_.get_mutable()->partner_ = const_cast< ::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo*>(
      ::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023steammessages.proto\022\nproto.dota\032 googl"
      "e/protobuf/descriptor.proto\"\370\002\n\022CMsgProt"
      "oBufHeader\022\027\n\017client_steam_id\030\001 \001(\006\022\031\n\021c"
      "lient_session_id\030\002 \001(\005\022\025\n\rsource_app_id\030"
      "\003 \001(\r\022+\n\rjob_id_source\030\n \001(\006:\0241844674407"
      "3709551615\022+\n\rjob_id_target\030\013 \001(\006:\02418446"
      "744073709551615\022\027\n\017target_job_name\030\014 \001(\t"
      "\022\022\n\007eresult\030\r \001(\005:\0012\022\025\n\rerror_message\030\016 "
      "\001(\t\022O\n\ngc_msg_src\030\310\001 \001(\0162\034.proto.dota.GC"
      "ProtoBufMsgSrc:\034GCProtoBufMsgSrc_Unspeci"
      "fied\022\034\n\023gc_dir_index_source\030\311\001 \001(\r:\n\200\246\035\200"
      "\002\210\246\035\200\010\"z\n\rCMsgWebAPIKey\022\023\n\006status\030\001 \001(\r:"
      "\003255\022\025\n\naccount_id\030\002 \001(\r:\0010\022\035\n\022publisher"
      "_group_id\030\003 \001(\r:\0010\022\016\n\006key_id\030\004 \001(\r\022\016\n\006do"
      "main\030\005 \001(\t\"\376\002\n\017CMsgHttpRequest\022\026\n\016reques"
      "t_method\030\001 \001(\r\022\020\n\010hostname\030\002 \001(\t\022\013\n\003url\030"
      "\003 \001(\t\022:\n\007headers\030\004 \003(\0132).proto.dota.CMsg"
      "HttpRequest.RequestHeader\022:\n\nget_params\030"
      "\005 \003(\0132&.proto.dota.CMsgHttpRequest.Query"
      "Param\022;\n\013post_params\030\006 \003(\0132&.proto.dota."
      "CMsgHttpRequest.QueryParam\022\014\n\004body\030\007 \001(\014"
      "\022\030\n\020absolute_timeout\030\010 \001(\r\032,\n\rRequestHea"
      "der\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\032)\n\nQuer"
      "yParam\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\014\"\334\001\n\021"
      "CMsgWebAPIRequest\022\027\n\017UNUSED_job_name\030\001 \001"
      "(\t\022\026\n\016interface_name\030\002 \001(\t\022\023\n\013method_nam"
      "e\030\003 \001(\t\022\017\n\007version\030\004 \001(\r\022*\n\007api_key\030\005 \001("
      "\0132\031.proto.dota.CMsgWebAPIKey\022,\n\007request\030"
      "\006 \001(\0132\033.proto.dota.CMsgHttpRequest\022\026\n\016ro"
      "uting_app_id\030\007 \001(\r\"\242\001\n\020CMsgHttpResponse\022"
      "\023\n\013status_code\030\001 \001(\r\022<\n\007headers\030\002 \003(\0132+."
      "proto.dota.CMsgHttpResponse.ResponseHead"
      "er\022\014\n\004body\030\003 \001(\014\032-\n\016ResponseHeader\022\014\n\004na"
      "me\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"@\n\022CMsgAMFindAcc"
      "ounts\022\023\n\013search_type\030\001 \001(\r\022\025\n\rsearch_str"
      "ing\030\002 \001(\t\".\n\032CMsgAMFindAccountsResponse\022"
      "\020\n\010steam_id\030\001 \003(\006\"\210\001\n\022CMsgNotifyWatchdog"
      "\022\016\n\006source\030\001 \001(\r\022\022\n\nalert_type\030\002 \001(\r\022\020\n\010"
      "critical\030\004 \001(\010\022\014\n\004time\030\005 \001(\r\022\r\n\005appid\030\006 "
      "\001(\r\022\014\n\004text\030\007 \001(\t\022\021\n\trecipient\030\014 \001(\t\"$\n\021"
      "CMsgAMGetLicenses\022\017\n\007steamid\030\001 \001(\006\"P\n\022CM"
      "sgPackageLicense\022\022\n\npackage_id\030\001 \001(\r\022\024\n\014"
      "time_created\030\002 \001(\r\022\020\n\010owner_id\030\003 \001(\r\"\\\n\031"
      "CMsgAMGetLicensesResponse\022/\n\007license\030\001 \003"
      "(\0132\036.proto.dota.CMsgPackageLicense\022\016\n\006re"
      "sult\030\002 \001(\r\"J\n\026CMsgAMGetUserGameStats\022\020\n\010"
      "steam_id\030\001 \001(\006\022\017\n\007game_id\030\002 \001(\006\022\r\n\005stats"
      "\030\003 \003(\r\"\200\003\n\036CMsgAMGetUserGameStatsRespons"
      "e\022\020\n\010steam_id\030\001 \001(\006\022\017\n\007game_id\030\002 \001(\006\022\022\n\007"
      "eresult\030\003 \001(\005:\0012\022\?\n\005stats\030\004 \003(\01320.proto."
      "dota.CMsgAMGetUserGameStatsResponse.Stat"
      "s\022Y\n\022achievement_blocks\030\005 \003(\0132=.proto.do"
      "ta.CMsgAMGetUserGameStatsResponse.Achiev"
      "ement_Blocks\032,\n\005Stats\022\017\n\007stat_id\030\001 \001(\r\022\022"
      "\n\nstat_value\030\002 \001(\r\032]\n\022Achievement_Blocks"
      "\022\026\n\016achievement_id\030\001 \001(\r\022\032\n\022achievement_"
      "bit_id\030\002 \001(\r\022\023\n\013unlock_time\030\003 \001(\007\">\n\024CMs"
      "gGCGetCommandList\022\016\n\006app_id\030\001 \001(\r\022\026\n\016com"
      "mand_prefix\030\002 \001(\t\"4\n\034CMsgGCGetCommandLis"
      "tResponse\022\024\n\014command_name\030\001 \003(\t\"\"\n\022CGCMs"
      "gMemCachedGet\022\014\n\004keys\030\001 \003(\t\"\207\001\n\032CGCMsgMe"
      "mCachedGetResponse\022\?\n\006values\030\001 \003(\0132/.pro"
      "to.dota.CGCMsgMemCachedGetResponse.Value"
      "Tag\032(\n\010ValueTag\022\r\n\005found\030\001 \001(\010\022\r\n\005value\030"
      "\002 \001(\014\"r\n\022CGCMsgMemCachedSet\0224\n\004keys\030\001 \003("
      "\0132&.proto.dota.CGCMsgMemCachedSet.KeyPai"
      "r\032&\n\007KeyPair\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001("
      "\014\"%\n\025CGCMsgMemCachedDelete\022\014\n\004keys\030\001 \003(\t"
      "\"\026\n\024CGCMsgMemCachedStats\"\270\002\n\034CGCMsgMemCa"
      "chedStatsResponse\022\030\n\020curr_connections\030\001 "
      "\001(\004\022\017\n\007cmd_get\030\002 \001(\004\022\017\n\007cmd_set\030\003 \001(\004\022\021\n"
      "\tcmd_flush\030\004 \001(\004\022\020\n\010get_hits\030\005 \001(\004\022\022\n\nge"
      "t_misses\030\006 \001(\004\022\023\n\013delete_hits\030\007 \001(\004\022\025\n\rd"
      "elete_misses\030\010 \001(\004\022\022\n\nbytes_read\030\t \001(\004\022\025"
      "\n\rbytes_written\030\n \001(\004\022\026\n\016limit_maxbytes\030"
      "\013 \001(\004\022\022\n\ncurr_items\030\014 \001(\004\022\021\n\tevictions\030\r"
      " \001(\004\022\r\n\005bytes\030\016 \001(\004\"(\n\016CGCMsgSQLStats\022\026\n"
      "\016schema_catalog\030\001 \001(\r\"\233\002\n\026CGCMsgSQLStats"
      "Response\022\017\n\007threads\030\001 \001(\r\022\031\n\021threads_con"
      "nected\030\002 \001(\r\022\026\n\016threads_active\030\003 \001(\r\022\034\n\024"
      "operations_submitted\030\004 \001(\r\022$\n\034prepared_s"
      "tatements_executed\030\005 \001(\r\022(\n non_prepared"
      "_statements_executed\030\006 \001(\r\022\030\n\020deadlock_r"
      "etries\030\007 \001(\r\022%\n\035operations_timed_out_in_"
      "queue\030\010 \001(\r\022\016\n\006errors\030\t \001(\r\"i\n\024CMsgAMAdd"
      "FreeLicense\022\017\n\007steamid\030\001 \001(\006\022\021\n\tip_publi"
      "c\030\002 \001(\r\022\021\n\tpackageid\030\003 \001(\r\022\032\n\022store_coun"
      "try_code\030\004 \001(\t\"c\n\034CMsgAMAddFreeLicenseRe"
      "sponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\036\n\026purchase_r"
      "esult_detail\030\002 \001(\005\022\017\n\007transid\030\003 \001(\006\"\"\n\023C"
      "GCMsgGetIPLocation\022\013\n\003ips\030\001 \003(\007\"p\n\017CIPLo"
      "cationInfo\022\n\n\002ip\030\001 \001(\r\022\020\n\010latitude\030\002 \001(\002"
      "\022\021\n\tlongitude\030\003 \001(\002\022\017\n\007country\030\004 \001(\t\022\r\n\005"
      "state\030\005 \001(\t\022\014\n\004city\030\006 \001(\t\"I\n\033CGCMsgGetIP"
      "LocationResponse\022*\n\005infos\030\001 \003(\0132\033.proto."
      "dota.CIPLocationInfo\"\035\n\016CGCMsgGetIPASN\022\013"
      "\n\003ips\030\001 \003(\007\"%\n\nCIPASNInfo\022\n\n\002ip\030\001 \001(\007\022\013\n"
      "\003asn\030\002 \001(\r\"\?\n\026CGCMsgGetIPASNResponse\022%\n\005"
      "infos\030\001 \003(\0132\026.proto.dota.CIPASNInfo\"\?\n\027C"
      "GCMsgSystemStatsSchema\022\021\n\tgc_app_id\030\001 \001("
      "\r\022\021\n\tschema_kv\030\002 \001(\014\"\026\n\024CGCMsgGetSystemS"
      "tats\"\305\002\n\034CGCMsgGetSystemStatsResponse\022\021\n"
      "\tgc_app_id\030\001 \001(\r\022\020\n\010stats_kv\030\002 \001(\014\022\023\n\013ac"
      "tive_jobs\030\003 \001(\r\022\025\n\ryielding_jobs\030\004 \001(\r\022\025"
      "\n\ruser_sessions\030\005 \001(\r\022\034\n\024game_server_ses"
      "sions\030\006 \001(\r\022\020\n\010socaches\030\007 \001(\r\022\032\n\022socache"
      "s_to_unload\030\010 \001(\r\022\030\n\020socaches_loading\030\t "
      "\001(\r\022\027\n\017writeback_queue\030\n \001(\r\022\025\n\rsteamid_"
      "locks\030\013 \001(\r\022\023\n\013logon_queue\030\014 \001(\r\022\022\n\nlogo"
      "n_jobs\030\r \001(\r\"\370\002\n\017CMsgAMSendEmail\022\017\n\007stea"
      "mid\030\001 \001(\006\022\026\n\016email_msg_type\030\002 \001(\r\022\024\n\014ema"
      "il_format\030\003 \001(\r\022T\n\023persona_name_tokens\030\005"
      " \003(\01327.proto.dota.CMsgAMSendEmail.Person"
      "aNameReplacementToken\022\021\n\tsource_gc\030\006 \001(\r"
      "\022<\n\006tokens\030\007 \003(\0132,.proto.dota.CMsgAMSend"
      "Email.ReplacementToken\032;\n\020ReplacementTok"
      "en\022\022\n\ntoken_name\030\001 \001(\t\022\023\n\013token_value\030\002 "
      "\001(\t\032B\n\033PersonaNameReplacementToken\022\017\n\007st"
      "eamid\030\001 \001(\006\022\022\n\ntoken_name\030\002 \001(\t\"-\n\027CMsgA"
      "MSendEmailResponse\022\022\n\007eresult\030\001 \001(\r:\0012\"j"
      "\n\026CMsgGCGetEmailTemplate\022\016\n\006app_id\030\001 \001(\r"
      "\022\026\n\016email_msg_type\030\002 \001(\r\022\022\n\nemail_lang\030\003"
      " \001(\005\022\024\n\014email_format\030\004 \001(\005\"_\n\036CMsgGCGetE"
      "mailTemplateResponse\022\022\n\007eresult\030\001 \001(\r:\0012"
      "\022\027\n\017template_exists\030\002 \001(\010\022\020\n\010template\030\003 "
      "\001(\t\"\204\001\n\027CMsgAMGrantGuestPasses2\022\020\n\010steam"
      "_id\030\001 \001(\006\022\022\n\npackage_id\030\002 \001(\r\022\027\n\017passes_"
      "to_grant\030\003 \001(\005\022\032\n\022days_to_expiration\030\004 \001"
      "(\005\022\016\n\006action\030\005 \001(\005\"P\n\037CMsgAMGrantGuestPa"
      "sses2Response\022\022\n\007eresult\030\001 \001(\005:\0012\022\031\n\016pas"
      "ses_granted\030\002 \001(\005:\0010\"L\n\036CGCSystemMsg_Get"
      "AccountDetails\022\017\n\007steamid\030\001 \001(\006\022\r\n\005appid"
      "\030\002 \001(\r:\n\200\246\035\200\001\210\246\035\200\004\"\200\007\n\'CGCSystemMsg_GetA"
      "ccountDetails_Response\022\035\n\022eresult_deprec"
      "ated\030\001 \001(\r:\0012\022\024\n\014account_name\030\002 \001(\t\022\024\n\014p"
      "ersona_name\030\003 \001(\t\022\032\n\022is_profile_created\030"
      "\032 \001(\010\022\031\n\021is_profile_public\030\004 \001(\010\022\033\n\023is_i"
      "nventory_public\030\005 \001(\010\022\025\n\ris_vac_banned\030\007"
      " \001(\010\022\025\n\ris_cyber_cafe\030\010 \001(\010\022\031\n\021is_school"
      "_account\030\t \001(\010\022\022\n\nis_limited\030\n \001(\010\022\025\n\ris"
      "_subscribed\030\013 \001(\010\022\017\n\007package\030\014 \001(\r\022\035\n\025is"
      "_free_trial_account\030\r \001(\010\022\035\n\025free_trial_"
      "expiration\030\016 \001(\r\022\027\n\017is_low_violence\030\017 \001("
      "\010\022\036\n\026is_account_locked_down\030\020 \001(\010\022\033\n\023is_"
      "community_banned\030\021 \001(\010\022\027\n\017is_trade_banne"
      "d\030\022 \001(\010\022\034\n\024trade_ban_expiration\030\023 \001(\r\022\021\n"
      "\taccountid\030\024 \001(\r\022\033\n\023suspension_end_time\030"
      "\025 \001(\r\022\020\n\010currency\030\026 \001(\t\022\023\n\013steam_level\030\027"
      " \001(\r\022\024\n\014friend_count\030\030 \001(\r\022\035\n\025account_cr"
      "eation_time\030\031 \001(\r\022\035\n\025is_steamguard_enabl"
      "ed\030\033 \001(\010\022\031\n\021is_phone_verified\030\034 \001(\010\022\"\n\032i"
      "s_two_factor_auth_enabled\030\035 \001(\010\022\037\n\027two_f"
      "actor_enabled_time\030\036 \001(\r\022\037\n\027phone_verifi"
      "cation_time\030\037 \001(\r\022\020\n\010phone_id\030! \001(\004\022\034\n\024i"
      "s_phone_identifying\030\" \001(\010:\n\200\246\035\200\001\210\246\035\200\004\")\n"
      "\025CMsgGCGetPersonaNames\022\020\n\010steamids\030\001 \003(\006"
      "\"\311\001\n\036CMsgGCGetPersonaNames_Response\022Q\n\021s"
      "ucceeded_lookups\030\001 \003(\01326.proto.dota.CMsg"
      "GCGetPersonaNames_Response.PersonaName\022\036"
      "\n\026failed_lookup_steamids\030\002 \003(\006\0324\n\013Person"
      "aName\022\017\n\007steamid\030\001 \001(\006\022\024\n\014persona_name\030\002"
      " \001(\t\"D\n\025CMsgGCCheckFriendship\022\024\n\014steamid"
      "_left\030\001 \001(\006\022\025\n\rsteamid_right\030\002 \001(\006\"K\n\036CM"
      "sgGCCheckFriendship_Response\022\017\n\007success\030"
      "\001 \001(\010\022\030\n\020found_friendship\030\002 \001(\010\"Q\n\027CMsgG"
      "CGetAppFriendsList\022\017\n\007steamid\030\001 \001(\006\022%\n\035i"
      "nclude_friendship_timestamps\030\002 \001(\010\"d\n CM"
      "sgGCGetAppFriendsList_Response\022\017\n\007succes"
      "s\030\001 \001(\010\022\020\n\010steamids\030\002 \003(\006\022\035\n\025friendship_"
      "timestamps\030\003 \003(\007\"\323\001\n\033CMsgGCMsgMasterSetD"
      "irectory\022\030\n\020master_dir_index\030\001 \001(\r\022:\n\003di"
      "r\030\002 \003(\0132-.proto.dota.CMsgGCMsgMasterSetD"
      "irectory.SubGC\032^\n\005SubGC\022\021\n\tdir_index\030\001 \001"
      "(\r\022\014\n\004name\030\002 \001(\t\022\013\n\003box\030\003 \001(\t\022\024\n\014command"
      "_line\030\004 \001(\t\022\021\n\tgc_binary\030\005 \001(\t\"K\n$CMsgGC"
      "MsgMasterSetDirectory_Response\022\022\n\007eresul"
      "t\030\001 \001(\005:\0012\022\017\n\007message\030\002 \001(\t\"=\n(CMsgGCMsg"
      "WebAPIJobRequestForwardResponse\022\021\n\tdir_i"
      "ndex\030\001 \001(\r\"8\n%CGCSystemMsg_GetPurchaseTr"
      "ust_Request\022\017\n\007steamid\030\001 \001(\006\"\255\001\n&CGCSyst"
      "emMsg_GetPurchaseTrust_Response\022\"\n\032has_p"
      "rior_purchase_history\030\001 \001(\010\022%\n\035has_no_re"
      "cent_password_resets\030\002 \001(\010\022\036\n\026is_wallet_"
      "cash_trusted\030\003 \001(\010\022\030\n\020time_all_trusted\030\004"
      " \001(\r\"\217\001\n\035CMsgGCHAccountVacStatusChange\022\020"
      "\n\010steam_id\030\001 \001(\006\022\016\n\006app_id\030\002 \001(\r\022\033\n\023rtim"
      "e_vacban_starts\030\003 \001(\r\022\025\n\ris_banned_now\030\004"
      " \001(\010\022\030\n\020is_banned_future\030\005 \001(\010\".\n\033CMsgGC"
      "GetPartnerAccountLink\022\017\n\007steamid\030\001 \001(\006\"E"
      "\n$CMsgGCGetPartnerAccountLink_Response\022\014"
      "\n\004pwid\030\001 \001(\r\022\017\n\007nexonid\030\002 \001(\r\"\361\002\n\021CMsgGC"
      "RoutingInfo\022\021\n\tdir_index\030\001 \003(\r\022C\n\006method"
      "\030\002 \001(\0162+.proto.dota.CMsgGCRoutingInfo.Ro"
      "utingMethod:\006RANDOM\022F\n\010fallback\030\003 \001(\0162+."
      "proto.dota.CMsgGCRoutingInfo.RoutingMeth"
      "od:\007DISCARD\022\026\n\016protobuf_field\030\004 \001(\r\022\024\n\014w"
      "ebapi_param\030\005 \001(\t\"\215\001\n\rRoutingMethod\022\n\n\006R"
      "ANDOM\020\000\022\013\n\007DISCARD\020\001\022\022\n\016CLIENT_STEAMID\020\002"
      "\022\031\n\025PROTOBUF_FIELD_UINT64\020\003\022\020\n\014WEBAPI_PA"
      "RAM\020\004\022\"\n\036WEBAPI_PARAM_STEAMID_ACCOUNTID\020"
      "\005\"\313\001\n\037CMsgGCMsgMasterSetWebAPIRouting\022B\n"
      "\007entries\030\001 \003(\01321.proto.dota.CMsgGCMsgMas"
      "terSetWebAPIRouting.Entry\032d\n\005Entry\022\026\n\016in"
      "terface_name\030\001 \001(\t\022\023\n\013method_name\030\002 \001(\t\022"
      ".\n\007routing\030\003 \001(\0132\035.proto.dota.CMsgGCRout"
      "ingInfo\"\266\001\n\"CMsgGCMsgMasterSetClientMsgR"
      "outing\022E\n\007entries\030\001 \003(\01324.proto.dota.CMs"
      "gGCMsgMasterSetClientMsgRouting.Entry\032I\n"
      "\005Entry\022\020\n\010msg_type\030\001 \001(\r\022.\n\007routing\030\002 \001("
      "\0132\035.proto.dota.CMsgGCRoutingInfo\">\n(CMsg"
      "GCMsgMasterSetWebAPIRouting_Response\022\022\n\007"
      "eresult\030\001 \001(\005:\0012\"A\n+CMsgGCMsgMasterSetCl"
      "ientMsgRouting_Response\022\022\n\007eresult\030\001 \001(\005"
      ":\0012\"\327\003\n\023CMsgGCMsgSetOptions\0227\n\007options\030\001"
      " \003(\0162&.proto.dota.CMsgGCMsgSetOptions.Op"
      "tion\022G\n\021client_msg_ranges\030\002 \003(\0132,.proto."
      "dota.CMsgGCMsgSetOptions.MessageRange\022[\n"
      "\rgcsql_version\030\003 \001(\0162,.proto.dota.CMsgGC"
      "MsgSetOptions.GCSQLVersion:\026GCSQL_VERSIO"
      "N_BASELINE\032)\n\014MessageRange\022\013\n\003low\030\001 \002(\r\022"
      "\014\n\004high\030\002 \002(\r\"n\n\006Option\022\030\n\024NOTIFY_USER_S"
      "ESSIONS\020\000\022\032\n\026NOTIFY_SERVER_SESSIONS\020\001\022\027\n"
      "\023NOTIFY_ACHIEVEMENTS\020\002\022\025\n\021NOTIFY_VAC_ACT"
      "ION\020\003\"F\n\014GCSQLVersion\022\032\n\026GCSQL_VERSION_B"
      "ASELINE\020\001\022\032\n\026GCSQL_VERSION_BOOLTYPE\020\002\"\237\002"
      "\n\024CMsgGCHUpdateSession\022\020\n\010steam_id\030\001 \001(\006"
      "\022\016\n\006app_id\030\002 \001(\r\022\016\n\006online\030\003 \001(\010\022\027\n\017serv"
      "er_steam_id\030\004 \001(\006\022\023\n\013server_addr\030\005 \001(\r\022\023"
      "\n\013server_port\030\006 \001(\r\022\017\n\007os_type\030\007 \001(\r\022\023\n\013"
      "client_addr\030\010 \001(\r\022A\n\014extra_fields\030\t \003(\0132"
      "+.proto.dota.CMsgGCHUpdateSession.ExtraF"
      "ield\032)\n\nExtraField\022\014\n\004name\030\001 \001(\t\022\r\n\005valu"
      "e\030\002 \001(\t\"\367\001\n$CMsgNotificationOfSuspicious"
      "Activity\022\017\n\007steamid\030\001 \001(\006\022\r\n\005appid\030\002 \001(\r"
      "\022b\n\022multiple_instances\030\003 \001(\0132F.proto.dot"
      "a.CMsgNotificationOfSuspiciousActivity.M"
      "ultipleGameInstances\032K\n\025MultipleGameInst"
      "ances\022\032\n\022app_instance_count\030\001 \001(\r\022\026\n\016oth"
      "er_steamids\030\002 \003(\006\"\210\005\n\026CMsgDPPartnerMicro"
      "Txns\022\r\n\005appid\030\001 \001(\r\022\017\n\007gc_name\030\002 \001(\t\022\?\n\007"
      "partner\030\003 \001(\0132..proto.dota.CMsgDPPartner"
      "MicroTxns.PartnerInfo\022H\n\014transactions\030\004 "
      "\003(\01322.proto.dota.CMsgDPPartnerMicroTxns."
      "PartnerMicroTxn\032\333\002\n\017PartnerMicroTxn\022\021\n\ti"
      "nit_time\030\001 \001(\r\022\030\n\020last_update_time\030\002 \001(\r"
      "\022\016\n\006txn_id\030\003 \001(\004\022\022\n\naccount_id\030\004 \001(\r\022\021\n\t"
      "line_item\030\005 \001(\r\022\017\n\007item_id\030\006 \001(\004\022\021\n\tdef_"
      "index\030\007 \001(\r\022\r\n\005price\030\010 \001(\r\022\013\n\003tax\030\t \001(\r\022"
      "\021\n\tprice_usd\030\n \001(\r\022\017\n\007tax_usd\030\013 \001(\r\022\025\n\rp"
      "urchase_type\030\014 \001(\r\022\026\n\016steam_txn_type\030\r \001"
      "(\r\022\024\n\014country_code\030\016 \001(\t\022\023\n\013region_code\030"
      "\017 \001(\t\022\020\n\010quantity\030\020 \001(\005\022\024\n\014ref_trans_id\030"
      "\021 \001(\004\032e\n\013PartnerInfo\022\022\n\npartner_id\030\001 \001(\r"
      "\022\024\n\014partner_name\030\002 \001(\t\022\025\n\rcurrency_code\030"
      "\003 \001(\t\022\025\n\rcurrency_name\030\004 \001(\t\"\211\003\n\036CMsgDPP"
      "artnerMicroTxnsResponse\022\022\n\007eresult\030\001 \001(\r"
      ":\0012\022U\n\neerrorcode\030\002 \001(\01625.proto.dota.CMs"
      "gDPPartnerMicroTxnsResponse.EErrorCode:\n"
      "k_MsgValid\"\373\001\n\nEErrorCode\022\016\n\nk_MsgValid\020"
      "\000\022\025\n\021k_MsgInvalidAppID\020\001\022\033\n\027k_MsgInvalid"
      "PartnerInfo\020\002\022\027\n\023k_MsgNoTransactions\020\003\022\023"
      "\n\017k_MsgSQLFailure\020\004\022\037\n\033k_MsgPartnerInfoD"
      "iscrepancy\020\005\022 \n\034k_MsgTransactionInsertFa"
      "iled\020\007\022\027\n\023k_MsgAlreadyRunning\020\010\022\037\n\033k_Msg"
      "InvalidTransactionData\020\t\"S\n\034CMsgGCHVacVe"
      "rificationChange\022\017\n\007steamid\030\001 \001(\006\022\r\n\005app"
      "id\030\002 \001(\r\022\023\n\013is_verified\030\003 \001(\010*\333\001\n\020GCProt"
      "oBufMsgSrc\022 \n\034GCProtoBufMsgSrc_Unspecifi"
      "ed\020\000\022\037\n\033GCProtoBufMsgSrc_FromSystem\020\001\022 \n"
      "\034GCProtoBufMsgSrc_FromSteamID\020\002\022\033\n\027GCPro"
      "toBufMsgSrc_FromGC\020\003\022 \n\034GCProtoBufMsgSrc"
      "_ReplySystem\020\004\022#\n\037GCProtoBufMsgSrc_Spoof"
      "edSteamID\020\005:9\n\tkey_field\022\035.google.protob"
      "uf.FieldOptions\030\340\324\003 \001(\010:\005false:A\n\022msgpoo"
      "l_soft_limit\022\037.google.protobuf.MessageOp"
      "tions\030\340\324\003 \001(\005:\00232:B\n\022msgpool_hard_limit\022"
      "\037.google.protobuf.MessageOptions\030\341\324\003 \001(\005"
      ":\003384B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 11092);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_2eproto

const ::google::protobuf::EnumDescriptor* CMsgGCRoutingInfo_RoutingMethod_descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_enum_descriptors[0];
}
bool CMsgGCRoutingInfo_RoutingMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::RANDOM;
const CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::DISCARD;
const CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::CLIENT_STEAMID;
const CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::PROTOBUF_FIELD_UINT64;
const CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::WEBAPI_PARAM;
const CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::WEBAPI_PARAM_STEAMID_ACCOUNTID;
const CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::RoutingMethod_MIN;
const CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::RoutingMethod_MAX;
const int CMsgGCRoutingInfo::RoutingMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGCMsgSetOptions_Option_descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_enum_descriptors[1];
}
bool CMsgGCMsgSetOptions_Option_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::NOTIFY_USER_SESSIONS;
const CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::NOTIFY_SERVER_SESSIONS;
const CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::NOTIFY_ACHIEVEMENTS;
const CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::NOTIFY_VAC_ACTION;
const CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::Option_MIN;
const CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::Option_MAX;
const int CMsgGCMsgSetOptions::Option_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGCMsgSetOptions_GCSQLVersion_descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_enum_descriptors[2];
}
bool CMsgGCMsgSetOptions_GCSQLVersion_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGCMsgSetOptions_GCSQLVersion CMsgGCMsgSetOptions::GCSQL_VERSION_BASELINE;
const CMsgGCMsgSetOptions_GCSQLVersion CMsgGCMsgSetOptions::GCSQL_VERSION_BOOLTYPE;
const CMsgGCMsgSetOptions_GCSQLVersion CMsgGCMsgSetOptions::GCSQLVersion_MIN;
const CMsgGCMsgSetOptions_GCSQLVersion CMsgGCMsgSetOptions::GCSQLVersion_MAX;
const int CMsgGCMsgSetOptions::GCSQLVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDPPartnerMicroTxnsResponse_EErrorCode_descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_enum_descriptors[3];
}
bool CMsgDPPartnerMicroTxnsResponse_EErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgValid;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgInvalidAppID;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgInvalidPartnerInfo;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgNoTransactions;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgSQLFailure;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgPartnerInfoDiscrepancy;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgTransactionInsertFailed;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgAlreadyRunning;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgInvalidTransactionData;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::EErrorCode_MIN;
const CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::EErrorCode_MAX;
const int CMsgDPPartnerMicroTxnsResponse::EErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GCProtoBufMsgSrc_descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_enum_descriptors[4];
}
bool GCProtoBufMsgSrc_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgProtoBufHeader::kClientSteamIdFieldNumber;
const int CMsgProtoBufHeader::kClientSessionIdFieldNumber;
const int CMsgProtoBufHeader::kSourceAppIdFieldNumber;
const int CMsgProtoBufHeader::kJobIdSourceFieldNumber;
const int CMsgProtoBufHeader::kJobIdTargetFieldNumber;
const int CMsgProtoBufHeader::kTargetJobNameFieldNumber;
const int CMsgProtoBufHeader::kEresultFieldNumber;
const int CMsgProtoBufHeader::kErrorMessageFieldNumber;
const int CMsgProtoBufHeader::kGcMsgSrcFieldNumber;
const int CMsgProtoBufHeader::kGcDirIndexSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgProtoBufHeader::CMsgProtoBufHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgProtoBufHeader)
}
CMsgProtoBufHeader::CMsgProtoBufHeader(const CMsgProtoBufHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_job_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_job_name()) {
    target_job_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_job_name_);
  }
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  ::memcpy(&client_steam_id_, &from.client_steam_id_,
    reinterpret_cast<char*>(&job_id_target_) -
    reinterpret_cast<char*>(&client_steam_id_) + sizeof(job_id_target_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgProtoBufHeader)
}

void CMsgProtoBufHeader::SharedCtor() {
  _cached_size_ = 0;
  target_job_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_steam_id_, 0, reinterpret_cast<char*>(&gc_dir_index_source_) -
    reinterpret_cast<char*>(&client_steam_id_) + sizeof(gc_dir_index_source_));
  eresult_ = 2;
  job_id_source_ = GOOGLE_ULONGLONG(18446744073709551615);
  job_id_target_ = GOOGLE_ULONGLONG(18446744073709551615);
}

CMsgProtoBufHeader::~CMsgProtoBufHeader() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgProtoBufHeader)
  SharedDtor();
}

void CMsgProtoBufHeader::SharedDtor() {
  target_job_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgProtoBufHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgProtoBufHeader::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgProtoBufHeader& CMsgProtoBufHeader::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgProtoBufHeader* CMsgProtoBufHeader::New(::google::protobuf::Arena* arena) const {
  CMsgProtoBufHeader* n = new CMsgProtoBufHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgProtoBufHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgProtoBufHeader)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_target_job_name()) {
      GOOGLE_DCHECK(!target_job_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*target_job_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_error_message()) {
      GOOGLE_DCHECK(!error_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*error_message_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&client_steam_id_, 0, reinterpret_cast<char*>(&gc_dir_index_source_) -
      reinterpret_cast<char*>(&client_steam_id_) + sizeof(gc_dir_index_source_));
    eresult_ = 2;
  }
  if (_has_bits_[8 / 32] & 768u) {
    job_id_source_ = GOOGLE_ULONGLONG(18446744073709551615);
    job_id_target_ = GOOGLE_ULONGLONG(18446744073709551615);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgProtoBufHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgProtoBufHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 client_steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_client_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 client_session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_client_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 source_app_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_source_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_job_id_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &job_id_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_job_id_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &job_id_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target_job_name = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_job_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_job_name().data(), this->target_job_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgProtoBufHeader.target_job_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 13 [default = 2];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgProtoBufHeader.error_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
      case 200: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1600u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::GCProtoBufMsgSrc_IsValid(value)) {
            set_gc_msg_src(static_cast< ::proto::dota::GCProtoBufMsgSrc >(value));
          } else {
            mutable_unknown_fields()->AddVarint(200, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gc_dir_index_source = 201;
      case 201: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1608u)) {
          set_has_gc_dir_index_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gc_dir_index_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgProtoBufHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgProtoBufHeader)
  return false;
#undef DO_
}

void CMsgProtoBufHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgProtoBufHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 client_steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->client_steam_id(), output);
  }

  // optional int32 client_session_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->client_session_id(), output);
  }

  // optional uint32 source_app_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->source_app_id(), output);
  }

  // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->job_id_source(), output);
  }

  // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->job_id_target(), output);
  }

  // optional string target_job_name = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_job_name().data(), this->target_job_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgProtoBufHeader.target_job_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->target_job_name(), output);
  }

  // optional int32 eresult = 13 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->eresult(), output);
  }

  // optional string error_message = 14;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgProtoBufHeader.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->error_message(), output);
  }

  // optional .proto.dota.GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      200, this->gc_msg_src(), output);
  }

  // optional uint32 gc_dir_index_source = 201;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(201, this->gc_dir_index_source(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgProtoBufHeader)
}

::google::protobuf::uint8* CMsgProtoBufHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgProtoBufHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 client_steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->client_steam_id(), target);
  }

  // optional int32 client_session_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->client_session_id(), target);
  }

  // optional uint32 source_app_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->source_app_id(), target);
  }

  // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->job_id_source(), target);
  }

  // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->job_id_target(), target);
  }

  // optional string target_job_name = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_job_name().data(), this->target_job_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgProtoBufHeader.target_job_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->target_job_name(), target);
  }

  // optional int32 eresult = 13 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->eresult(), target);
  }

  // optional string error_message = 14;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgProtoBufHeader.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->error_message(), target);
  }

  // optional .proto.dota.GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      200, this->gc_msg_src(), target);
  }

  // optional uint32 gc_dir_index_source = 201;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(201, this->gc_dir_index_source(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgProtoBufHeader)
  return target;
}

size_t CMsgProtoBufHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgProtoBufHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string target_job_name = 12;
    if (has_target_job_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_job_name());
    }

    // optional string error_message = 14;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional fixed64 client_steam_id = 1;
    if (has_client_steam_id()) {
      total_size += 1 + 8;
    }

    // optional int32 client_session_id = 2;
    if (has_client_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_session_id());
    }

    // optional uint32 source_app_id = 3;
    if (has_source_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_app_id());
    }

    // optional .proto.dota.GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
    if (has_gc_msg_src()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gc_msg_src());
    }

    // optional uint32 gc_dir_index_source = 201;
    if (has_gc_dir_index_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gc_dir_index_source());
    }

    // optional int32 eresult = 13 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
    if (has_job_id_source()) {
      total_size += 1 + 8;
    }

    // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
    if (has_job_id_target()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgProtoBufHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgProtoBufHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgProtoBufHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgProtoBufHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgProtoBufHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgProtoBufHeader)
    MergeFrom(*source);
  }
}

void CMsgProtoBufHeader::MergeFrom(const CMsgProtoBufHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgProtoBufHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_target_job_name();
      target_job_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_job_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_error_message();
      error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000004u) {
      client_steam_id_ = from.client_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_session_id_ = from.client_session_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      source_app_id_ = from.source_app_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      gc_msg_src_ = from.gc_msg_src_;
    }
    if (cached_has_bits & 0x00000040u) {
      gc_dir_index_source_ = from.gc_dir_index_source_;
    }
    if (cached_has_bits & 0x00000080u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      job_id_source_ = from.job_id_source_;
    }
    if (cached_has_bits & 0x00000200u) {
      job_id_target_ = from.job_id_target_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgProtoBufHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgProtoBufHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProtoBufHeader::CopyFrom(const CMsgProtoBufHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgProtoBufHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtoBufHeader::IsInitialized() const {
  return true;
}

void CMsgProtoBufHeader::Swap(CMsgProtoBufHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgProtoBufHeader::InternalSwap(CMsgProtoBufHeader* other) {
  target_job_name_.Swap(&other->target_job_name_);
  error_message_.Swap(&other->error_message_);
  std::swap(client_steam_id_, other->client_steam_id_);
  std::swap(client_session_id_, other->client_session_id_);
  std::swap(source_app_id_, other->source_app_id_);
  std::swap(gc_msg_src_, other->gc_msg_src_);
  std::swap(gc_dir_index_source_, other->gc_dir_index_source_);
  std::swap(eresult_, other->eresult_);
  std::swap(job_id_source_, other->job_id_source_);
  std::swap(job_id_target_, other->job_id_target_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgProtoBufHeader::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgProtoBufHeader

// optional fixed64 client_steam_id = 1;
bool CMsgProtoBufHeader::has_client_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgProtoBufHeader::set_has_client_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgProtoBufHeader::clear_has_client_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgProtoBufHeader::clear_client_steam_id() {
  client_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_steam_id();
}
::google::protobuf::uint64 CMsgProtoBufHeader::client_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgProtoBufHeader.client_steam_id)
  return client_steam_id_;
}
void CMsgProtoBufHeader::set_client_steam_id(::google::protobuf::uint64 value) {
  set_has_client_steam_id();
  client_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgProtoBufHeader.client_steam_id)
}

// optional int32 client_session_id = 2;
bool CMsgProtoBufHeader::has_client_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgProtoBufHeader::set_has_client_session_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgProtoBufHeader::clear_has_client_session_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgProtoBufHeader::clear_client_session_id() {
  client_session_id_ = 0;
  clear_has_client_session_id();
}
::google::protobuf::int32 CMsgProtoBufHeader::client_session_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgProtoBufHeader.client_session_id)
  return client_session_id_;
}
void CMsgProtoBufHeader::set_client_session_id(::google::protobuf::int32 value) {
  set_has_client_session_id();
  client_session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgProtoBufHeader.client_session_id)
}

// optional uint32 source_app_id = 3;
bool CMsgProtoBufHeader::has_source_app_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgProtoBufHeader::set_has_source_app_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgProtoBufHeader::clear_has_source_app_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgProtoBufHeader::clear_source_app_id() {
  source_app_id_ = 0u;
  clear_has_source_app_id();
}
::google::protobuf::uint32 CMsgProtoBufHeader::source_app_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgProtoBufHeader.source_app_id)
  return source_app_id_;
}
void CMsgProtoBufHeader::set_source_app_id(::google::protobuf::uint32 value) {
  set_has_source_app_id();
  source_app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgProtoBufHeader.source_app_id)
}

// optional fixed64 job_id_source = 10 [default = 18446744073709551615];
bool CMsgProtoBufHeader::has_job_id_source() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgProtoBufHeader::set_has_job_id_source() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgProtoBufHeader::clear_has_job_id_source() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgProtoBufHeader::clear_job_id_source() {
  job_id_source_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_job_id_source();
}
::google::protobuf::uint64 CMsgProtoBufHeader::job_id_source() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgProtoBufHeader.job_id_source)
  return job_id_source_;
}
void CMsgProtoBufHeader::set_job_id_source(::google::protobuf::uint64 value) {
  set_has_job_id_source();
  job_id_source_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgProtoBufHeader.job_id_source)
}

// optional fixed64 job_id_target = 11 [default = 18446744073709551615];
bool CMsgProtoBufHeader::has_job_id_target() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgProtoBufHeader::set_has_job_id_target() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgProtoBufHeader::clear_has_job_id_target() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgProtoBufHeader::clear_job_id_target() {
  job_id_target_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_job_id_target();
}
::google::protobuf::uint64 CMsgProtoBufHeader::job_id_target() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgProtoBufHeader.job_id_target)
  return job_id_target_;
}
void CMsgProtoBufHeader::set_job_id_target(::google::protobuf::uint64 value) {
  set_has_job_id_target();
  job_id_target_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgProtoBufHeader.job_id_target)
}

// optional string target_job_name = 12;
bool CMsgProtoBufHeader::has_target_job_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgProtoBufHeader::set_has_target_job_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgProtoBufHeader::clear_has_target_job_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgProtoBufHeader::clear_target_job_name() {
  target_job_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_job_name();
}
const ::std::string& CMsgProtoBufHeader::target_job_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgProtoBufHeader.target_job_name)
  return target_job_name_.GetNoArena();
}
void CMsgProtoBufHeader::set_target_job_name(const ::std::string& value) {
  set_has_target_job_name();
  target_job_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgProtoBufHeader.target_job_name)
}
#if LANG_CXX11
void CMsgProtoBufHeader::set_target_job_name(::std::string&& value) {
  set_has_target_job_name();
  target_job_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgProtoBufHeader.target_job_name)
}
#endif
void CMsgProtoBufHeader::set_target_job_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target_job_name();
  target_job_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgProtoBufHeader.target_job_name)
}
void CMsgProtoBufHeader::set_target_job_name(const char* value, size_t size) {
  set_has_target_job_name();
  target_job_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgProtoBufHeader.target_job_name)
}
::std::string* CMsgProtoBufHeader::mutable_target_job_name() {
  set_has_target_job_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgProtoBufHeader.target_job_name)
  return target_job_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgProtoBufHeader::release_target_job_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgProtoBufHeader.target_job_name)
  clear_has_target_job_name();
  return target_job_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgProtoBufHeader::set_allocated_target_job_name(::std::string* target_job_name) {
  if (target_job_name != NULL) {
    set_has_target_job_name();
  } else {
    clear_has_target_job_name();
  }
  target_job_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_job_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgProtoBufHeader.target_job_name)
}

// optional int32 eresult = 13 [default = 2];
bool CMsgProtoBufHeader::has_eresult() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgProtoBufHeader::set_has_eresult() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgProtoBufHeader::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgProtoBufHeader::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgProtoBufHeader::eresult() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgProtoBufHeader.eresult)
  return eresult_;
}
void CMsgProtoBufHeader::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgProtoBufHeader.eresult)
}

// optional string error_message = 14;
bool CMsgProtoBufHeader::has_error_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgProtoBufHeader::set_has_error_message() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgProtoBufHeader::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgProtoBufHeader::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
const ::std::string& CMsgProtoBufHeader::error_message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgProtoBufHeader.error_message)
  return error_message_.GetNoArena();
}
void CMsgProtoBufHeader::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgProtoBufHeader.error_message)
}
#if LANG_CXX11
void CMsgProtoBufHeader::set_error_message(::std::string&& value) {
  set_has_error_message();
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgProtoBufHeader.error_message)
}
#endif
void CMsgProtoBufHeader::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgProtoBufHeader.error_message)
}
void CMsgProtoBufHeader::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgProtoBufHeader.error_message)
}
::std::string* CMsgProtoBufHeader::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgProtoBufHeader.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgProtoBufHeader::release_error_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgProtoBufHeader.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgProtoBufHeader::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgProtoBufHeader.error_message)
}

// optional .proto.dota.GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
bool CMsgProtoBufHeader::has_gc_msg_src() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgProtoBufHeader::set_has_gc_msg_src() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgProtoBufHeader::clear_has_gc_msg_src() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgProtoBufHeader::clear_gc_msg_src() {
  gc_msg_src_ = 0;
  clear_has_gc_msg_src();
}
::proto::dota::GCProtoBufMsgSrc CMsgProtoBufHeader::gc_msg_src() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgProtoBufHeader.gc_msg_src)
  return static_cast< ::proto::dota::GCProtoBufMsgSrc >(gc_msg_src_);
}
void CMsgProtoBufHeader::set_gc_msg_src(::proto::dota::GCProtoBufMsgSrc value) {
  assert(::proto::dota::GCProtoBufMsgSrc_IsValid(value));
  set_has_gc_msg_src();
  gc_msg_src_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgProtoBufHeader.gc_msg_src)
}

// optional uint32 gc_dir_index_source = 201;
bool CMsgProtoBufHeader::has_gc_dir_index_source() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgProtoBufHeader::set_has_gc_dir_index_source() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgProtoBufHeader::clear_has_gc_dir_index_source() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgProtoBufHeader::clear_gc_dir_index_source() {
  gc_dir_index_source_ = 0u;
  clear_has_gc_dir_index_source();
}
::google::protobuf::uint32 CMsgProtoBufHeader::gc_dir_index_source() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgProtoBufHeader.gc_dir_index_source)
  return gc_dir_index_source_;
}
void CMsgProtoBufHeader::set_gc_dir_index_source(::google::protobuf::uint32 value) {
  set_has_gc_dir_index_source();
  gc_dir_index_source_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgProtoBufHeader.gc_dir_index_source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgWebAPIKey::kStatusFieldNumber;
const int CMsgWebAPIKey::kAccountIdFieldNumber;
const int CMsgWebAPIKey::kPublisherGroupIdFieldNumber;
const int CMsgWebAPIKey::kKeyIdFieldNumber;
const int CMsgWebAPIKey::kDomainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgWebAPIKey::CMsgWebAPIKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgWebAPIKey)
}
CMsgWebAPIKey::CMsgWebAPIKey(const CMsgWebAPIKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_domain()) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgWebAPIKey)
}

void CMsgWebAPIKey::SharedCtor() {
  _cached_size_ = 0;
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&key_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(key_id_));
  status_ = 255u;
}

CMsgWebAPIKey::~CMsgWebAPIKey() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgWebAPIKey)
  SharedDtor();
}

void CMsgWebAPIKey::SharedDtor() {
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgWebAPIKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgWebAPIKey::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgWebAPIKey& CMsgWebAPIKey::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgWebAPIKey* CMsgWebAPIKey::New(::google::protobuf::Arena* arena) const {
  CMsgWebAPIKey* n = new CMsgWebAPIKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgWebAPIKey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgWebAPIKey)
  if (has_domain()) {
    GOOGLE_DCHECK(!domain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*domain_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&key_id_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(key_id_));
    status_ = 255u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgWebAPIKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgWebAPIKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1 [default = 255];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 publisher_group_id = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_publisher_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publisher_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 key_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_key_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string domain = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgWebAPIKey.domain");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgWebAPIKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgWebAPIKey)
  return false;
#undef DO_
}

void CMsgWebAPIKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgWebAPIKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 status = 1 [default = 255];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // optional uint32 account_id = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint32 publisher_group_id = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->publisher_group_id(), output);
  }

  // optional uint32 key_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->key_id(), output);
  }

  // optional string domain = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWebAPIKey.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->domain(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgWebAPIKey)
}

::google::protobuf::uint8* CMsgWebAPIKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgWebAPIKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 status = 1 [default = 255];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // optional uint32 account_id = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint32 publisher_group_id = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->publisher_group_id(), target);
  }

  // optional uint32 key_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->key_id(), target);
  }

  // optional string domain = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWebAPIKey.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->domain(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgWebAPIKey)
  return target;
}

size_t CMsgWebAPIKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgWebAPIKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string domain = 5;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional uint32 account_id = 2 [default = 0];
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 publisher_group_id = 3 [default = 0];
    if (has_publisher_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publisher_group_id());
    }

    // optional uint32 key_id = 4;
    if (has_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_id());
    }

    // optional uint32 status = 1 [default = 255];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgWebAPIKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgWebAPIKey)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWebAPIKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgWebAPIKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgWebAPIKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgWebAPIKey)
    MergeFrom(*source);
  }
}

void CMsgWebAPIKey::MergeFrom(const CMsgWebAPIKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgWebAPIKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_domain();
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      publisher_group_id_ = from.publisher_group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      key_id_ = from.key_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgWebAPIKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgWebAPIKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWebAPIKey::CopyFrom(const CMsgWebAPIKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgWebAPIKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWebAPIKey::IsInitialized() const {
  return true;
}

void CMsgWebAPIKey::Swap(CMsgWebAPIKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgWebAPIKey::InternalSwap(CMsgWebAPIKey* other) {
  domain_.Swap(&other->domain_);
  std::swap(account_id_, other->account_id_);
  std::swap(publisher_group_id_, other->publisher_group_id_);
  std::swap(key_id_, other->key_id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgWebAPIKey::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgWebAPIKey

// optional uint32 status = 1 [default = 255];
bool CMsgWebAPIKey::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgWebAPIKey::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgWebAPIKey::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgWebAPIKey::clear_status() {
  status_ = 255u;
  clear_has_status();
}
::google::protobuf::uint32 CMsgWebAPIKey::status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWebAPIKey.status)
  return status_;
}
void CMsgWebAPIKey::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWebAPIKey.status)
}

// optional uint32 account_id = 2 [default = 0];
bool CMsgWebAPIKey::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgWebAPIKey::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgWebAPIKey::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgWebAPIKey::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgWebAPIKey::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWebAPIKey.account_id)
  return account_id_;
}
void CMsgWebAPIKey::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWebAPIKey.account_id)
}

// optional uint32 publisher_group_id = 3 [default = 0];
bool CMsgWebAPIKey::has_publisher_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgWebAPIKey::set_has_publisher_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgWebAPIKey::clear_has_publisher_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgWebAPIKey::clear_publisher_group_id() {
  publisher_group_id_ = 0u;
  clear_has_publisher_group_id();
}
::google::protobuf::uint32 CMsgWebAPIKey::publisher_group_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWebAPIKey.publisher_group_id)
  return publisher_group_id_;
}
void CMsgWebAPIKey::set_publisher_group_id(::google::protobuf::uint32 value) {
  set_has_publisher_group_id();
  publisher_group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWebAPIKey.publisher_group_id)
}

// optional uint32 key_id = 4;
bool CMsgWebAPIKey::has_key_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgWebAPIKey::set_has_key_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgWebAPIKey::clear_has_key_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgWebAPIKey::clear_key_id() {
  key_id_ = 0u;
  clear_has_key_id();
}
::google::protobuf::uint32 CMsgWebAPIKey::key_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWebAPIKey.key_id)
  return key_id_;
}
void CMsgWebAPIKey::set_key_id(::google::protobuf::uint32 value) {
  set_has_key_id();
  key_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWebAPIKey.key_id)
}

// optional string domain = 5;
bool CMsgWebAPIKey::has_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgWebAPIKey::set_has_domain() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgWebAPIKey::clear_has_domain() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgWebAPIKey::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
const ::std::string& CMsgWebAPIKey::domain() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWebAPIKey.domain)
  return domain_.GetNoArena();
}
void CMsgWebAPIKey::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWebAPIKey.domain)
}
#if LANG_CXX11
void CMsgWebAPIKey::set_domain(::std::string&& value) {
  set_has_domain();
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgWebAPIKey.domain)
}
#endif
void CMsgWebAPIKey::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgWebAPIKey.domain)
}
void CMsgWebAPIKey::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgWebAPIKey.domain)
}
::std::string* CMsgWebAPIKey::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgWebAPIKey.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgWebAPIKey::release_domain() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgWebAPIKey.domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgWebAPIKey::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgWebAPIKey.domain)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHttpRequest_RequestHeader::kNameFieldNumber;
const int CMsgHttpRequest_RequestHeader::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHttpRequest_RequestHeader::CMsgHttpRequest_RequestHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgHttpRequest.RequestHeader)
}
CMsgHttpRequest_RequestHeader::CMsgHttpRequest_RequestHeader(const CMsgHttpRequest_RequestHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgHttpRequest.RequestHeader)
}

void CMsgHttpRequest_RequestHeader::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgHttpRequest_RequestHeader::~CMsgHttpRequest_RequestHeader() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgHttpRequest.RequestHeader)
  SharedDtor();
}

void CMsgHttpRequest_RequestHeader::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgHttpRequest_RequestHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHttpRequest_RequestHeader::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgHttpRequest_RequestHeader& CMsgHttpRequest_RequestHeader::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgHttpRequest_RequestHeader* CMsgHttpRequest_RequestHeader::New(::google::protobuf::Arena* arena) const {
  CMsgHttpRequest_RequestHeader* n = new CMsgHttpRequest_RequestHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgHttpRequest_RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgHttpRequest.RequestHeader)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgHttpRequest_RequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgHttpRequest.RequestHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgHttpRequest.RequestHeader.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgHttpRequest.RequestHeader.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgHttpRequest.RequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgHttpRequest.RequestHeader)
  return false;
#undef DO_
}

void CMsgHttpRequest_RequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgHttpRequest.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.RequestHeader.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.RequestHeader.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgHttpRequest.RequestHeader)
}

::google::protobuf::uint8* CMsgHttpRequest_RequestHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgHttpRequest.RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.RequestHeader.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.RequestHeader.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgHttpRequest.RequestHeader)
  return target;
}

size_t CMsgHttpRequest_RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgHttpRequest.RequestHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHttpRequest_RequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgHttpRequest.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHttpRequest_RequestHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgHttpRequest_RequestHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgHttpRequest.RequestHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgHttpRequest.RequestHeader)
    MergeFrom(*source);
  }
}

void CMsgHttpRequest_RequestHeader::MergeFrom(const CMsgHttpRequest_RequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgHttpRequest.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CMsgHttpRequest_RequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgHttpRequest.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHttpRequest_RequestHeader::CopyFrom(const CMsgHttpRequest_RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgHttpRequest.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpRequest_RequestHeader::IsInitialized() const {
  return true;
}

void CMsgHttpRequest_RequestHeader::Swap(CMsgHttpRequest_RequestHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHttpRequest_RequestHeader::InternalSwap(CMsgHttpRequest_RequestHeader* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgHttpRequest_RequestHeader::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgHttpRequest_RequestHeader

// optional string name = 1;
bool CMsgHttpRequest_RequestHeader::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgHttpRequest_RequestHeader::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgHttpRequest_RequestHeader::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgHttpRequest_RequestHeader::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgHttpRequest_RequestHeader::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHttpRequest.RequestHeader.name)
  return name_.GetNoArena();
}
void CMsgHttpRequest_RequestHeader::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgHttpRequest.RequestHeader.name)
}
#if LANG_CXX11
void CMsgHttpRequest_RequestHeader::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgHttpRequest.RequestHeader.name)
}
#endif
void CMsgHttpRequest_RequestHeader::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgHttpRequest.RequestHeader.name)
}
void CMsgHttpRequest_RequestHeader::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgHttpRequest.RequestHeader.name)
}
::std::string* CMsgHttpRequest_RequestHeader::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgHttpRequest.RequestHeader.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgHttpRequest_RequestHeader::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgHttpRequest.RequestHeader.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgHttpRequest_RequestHeader::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgHttpRequest.RequestHeader.name)
}

// optional string value = 2;
bool CMsgHttpRequest_RequestHeader::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgHttpRequest_RequestHeader::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgHttpRequest_RequestHeader::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgHttpRequest_RequestHeader::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CMsgHttpRequest_RequestHeader::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHttpRequest.RequestHeader.value)
  return value_.GetNoArena();
}
void CMsgHttpRequest_RequestHeader::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgHttpRequest.RequestHeader.value)
}
#if LANG_CXX11
void CMsgHttpRequest_RequestHeader::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgHttpRequest.RequestHeader.value)
}
#endif
void CMsgHttpRequest_RequestHeader::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgHttpRequest.RequestHeader.value)
}
void CMsgHttpRequest_RequestHeader::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgHttpRequest.RequestHeader.value)
}
::std::string* CMsgHttpRequest_RequestHeader::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgHttpRequest.RequestHeader.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgHttpRequest_RequestHeader::release_value() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgHttpRequest.RequestHeader.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgHttpRequest_RequestHeader::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgHttpRequest.RequestHeader.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHttpRequest_QueryParam::kNameFieldNumber;
const int CMsgHttpRequest_QueryParam::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHttpRequest_QueryParam::CMsgHttpRequest_QueryParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgHttpRequest.QueryParam)
}
CMsgHttpRequest_QueryParam::CMsgHttpRequest_QueryParam(const CMsgHttpRequest_QueryParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgHttpRequest.QueryParam)
}

void CMsgHttpRequest_QueryParam::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgHttpRequest_QueryParam::~CMsgHttpRequest_QueryParam() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgHttpRequest.QueryParam)
  SharedDtor();
}

void CMsgHttpRequest_QueryParam::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgHttpRequest_QueryParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHttpRequest_QueryParam::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgHttpRequest_QueryParam& CMsgHttpRequest_QueryParam::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgHttpRequest_QueryParam* CMsgHttpRequest_QueryParam::New(::google::protobuf::Arena* arena) const {
  CMsgHttpRequest_QueryParam* n = new CMsgHttpRequest_QueryParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgHttpRequest_QueryParam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgHttpRequest.QueryParam)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgHttpRequest_QueryParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgHttpRequest.QueryParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgHttpRequest.QueryParam.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgHttpRequest.QueryParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgHttpRequest.QueryParam)
  return false;
#undef DO_
}

void CMsgHttpRequest_QueryParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgHttpRequest.QueryParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.QueryParam.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgHttpRequest.QueryParam)
}

::google::protobuf::uint8* CMsgHttpRequest_QueryParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgHttpRequest.QueryParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.QueryParam.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgHttpRequest.QueryParam)
  return target;
}

size_t CMsgHttpRequest_QueryParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgHttpRequest.QueryParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHttpRequest_QueryParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgHttpRequest.QueryParam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHttpRequest_QueryParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgHttpRequest_QueryParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgHttpRequest.QueryParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgHttpRequest.QueryParam)
    MergeFrom(*source);
  }
}

void CMsgHttpRequest_QueryParam::MergeFrom(const CMsgHttpRequest_QueryParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgHttpRequest.QueryParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CMsgHttpRequest_QueryParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgHttpRequest.QueryParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHttpRequest_QueryParam::CopyFrom(const CMsgHttpRequest_QueryParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgHttpRequest.QueryParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpRequest_QueryParam::IsInitialized() const {
  return true;
}

void CMsgHttpRequest_QueryParam::Swap(CMsgHttpRequest_QueryParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHttpRequest_QueryParam::InternalSwap(CMsgHttpRequest_QueryParam* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgHttpRequest_QueryParam::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgHttpRequest_QueryParam

// optional string name = 1;
bool CMsgHttpRequest_QueryParam::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgHttpRequest_QueryParam::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgHttpRequest_QueryParam::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgHttpRequest_QueryParam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgHttpRequest_QueryParam::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHttpRequest.QueryParam.name)
  return name_.GetNoArena();
}
void CMsgHttpRequest_QueryParam::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgHttpRequest.QueryParam.name)
}
#if LANG_CXX11
void CMsgHttpRequest_QueryParam::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgHttpRequest.QueryParam.name)
}
#endif
void CMsgHttpRequest_QueryParam::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgHttpRequest.QueryParam.name)
}
void CMsgHttpRequest_QueryParam::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgHttpRequest.QueryParam.name)
}
::std::string* CMsgHttpRequest_QueryParam::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgHttpRequest.QueryParam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgHttpRequest_QueryParam::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgHttpRequest.QueryParam.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgHttpRequest_QueryParam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgHttpRequest.QueryParam.name)
}

// optional bytes value = 2;
bool CMsgHttpRequest_QueryParam::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgHttpRequest_QueryParam::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgHttpRequest_QueryParam::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgHttpRequest_QueryParam::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CMsgHttpRequest_QueryParam::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHttpRequest.QueryParam.value)
  return value_.GetNoArena();
}
void CMsgHttpRequest_QueryParam::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgHttpRequest.QueryParam.value)
}
#if LANG_CXX11
void CMsgHttpRequest_QueryParam::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgHttpRequest.QueryParam.value)
}
#endif
void CMsgHttpRequest_QueryParam::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgHttpRequest.QueryParam.value)
}
void CMsgHttpRequest_QueryParam::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgHttpRequest.QueryParam.value)
}
::std::string* CMsgHttpRequest_QueryParam::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgHttpRequest.QueryParam.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgHttpRequest_QueryParam::release_value() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgHttpRequest.QueryParam.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgHttpRequest_QueryParam::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgHttpRequest.QueryParam.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHttpRequest::kRequestMethodFieldNumber;
const int CMsgHttpRequest::kHostnameFieldNumber;
const int CMsgHttpRequest::kUrlFieldNumber;
const int CMsgHttpRequest::kHeadersFieldNumber;
const int CMsgHttpRequest::kGetParamsFieldNumber;
const int CMsgHttpRequest::kPostParamsFieldNumber;
const int CMsgHttpRequest::kBodyFieldNumber;
const int CMsgHttpRequest::kAbsoluteTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHttpRequest::CMsgHttpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgHttpRequest)
}
CMsgHttpRequest::CMsgHttpRequest(const CMsgHttpRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      headers_(from.headers_),
      get_params_(from.get_params_),
      post_params_(from.post_params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hostname()) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body()) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  ::memcpy(&request_method_, &from.request_method_,
    reinterpret_cast<char*>(&absolute_timeout_) -
    reinterpret_cast<char*>(&request_method_) + sizeof(absolute_timeout_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgHttpRequest)
}

void CMsgHttpRequest::SharedCtor() {
  _cached_size_ = 0;
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_method_, 0, reinterpret_cast<char*>(&absolute_timeout_) -
    reinterpret_cast<char*>(&request_method_) + sizeof(absolute_timeout_));
}

CMsgHttpRequest::~CMsgHttpRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgHttpRequest)
  SharedDtor();
}

void CMsgHttpRequest::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgHttpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHttpRequest::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgHttpRequest& CMsgHttpRequest::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgHttpRequest* CMsgHttpRequest::New(::google::protobuf::Arena* arena) const {
  CMsgHttpRequest* n = new CMsgHttpRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgHttpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgHttpRequest)
  headers_.Clear();
  get_params_.Clear();
  post_params_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_hostname()) {
      GOOGLE_DCHECK(!hostname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hostname_.UnsafeRawStringPointer())->clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_body()) {
      GOOGLE_DCHECK(!body_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*body_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&request_method_, 0, reinterpret_cast<char*>(&absolute_timeout_) -
      reinterpret_cast<char*>(&request_method_) + sizeof(absolute_timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgHttpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgHttpRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_method = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_request_method();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hostname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgHttpRequest.hostname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgHttpRequest.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgHttpRequest.RequestHeader headers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgHttpRequest.QueryParam get_params = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_get_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgHttpRequest.QueryParam post_params = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_post_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes body = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 absolute_timeout = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_absolute_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &absolute_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgHttpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgHttpRequest)
  return false;
#undef DO_
}

void CMsgHttpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgHttpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_method = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_method(), output);
  }

  // optional string hostname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hostname(), output);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // repeated .proto.dota.CMsgHttpRequest.RequestHeader headers = 4;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->headers(i), output);
  }

  // repeated .proto.dota.CMsgHttpRequest.QueryParam get_params = 5;
  for (unsigned int i = 0, n = this->get_params_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->get_params(i), output);
  }

  // repeated .proto.dota.CMsgHttpRequest.QueryParam post_params = 6;
  for (unsigned int i = 0, n = this->post_params_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->post_params(i), output);
  }

  // optional bytes body = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->body(), output);
  }

  // optional uint32 absolute_timeout = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->absolute_timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgHttpRequest)
}

::google::protobuf::uint8* CMsgHttpRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgHttpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_method = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_method(), target);
  }

  // optional string hostname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpRequest.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // repeated .proto.dota.CMsgHttpRequest.RequestHeader headers = 4;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->headers(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgHttpRequest.QueryParam get_params = 5;
  for (unsigned int i = 0, n = this->get_params_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->get_params(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgHttpRequest.QueryParam post_params = 6;
  for (unsigned int i = 0, n = this->post_params_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->post_params(i), deterministic, target);
  }

  // optional bytes body = 7;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->body(), target);
  }

  // optional uint32 absolute_timeout = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->absolute_timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgHttpRequest)
  return target;
}

size_t CMsgHttpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgHttpRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgHttpRequest.RequestHeader headers = 4;
  {
    unsigned int count = this->headers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->headers(i));
    }
  }

  // repeated .proto.dota.CMsgHttpRequest.QueryParam get_params = 5;
  {
    unsigned int count = this->get_params_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_params(i));
    }
  }

  // repeated .proto.dota.CMsgHttpRequest.QueryParam post_params = 6;
  {
    unsigned int count = this->post_params_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->post_params(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string hostname = 2;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional bytes body = 7;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional uint32 request_method = 1;
    if (has_request_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_method());
    }

    // optional uint32 absolute_timeout = 8;
    if (has_absolute_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->absolute_timeout());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHttpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgHttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHttpRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgHttpRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgHttpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgHttpRequest)
    MergeFrom(*source);
  }
}

void CMsgHttpRequest::MergeFrom(const CMsgHttpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgHttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  get_params_.MergeFrom(from.get_params_);
  post_params_.MergeFrom(from.post_params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hostname();
      hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
    if (cached_has_bits & 0x00000008u) {
      request_method_ = from.request_method_;
    }
    if (cached_has_bits & 0x00000010u) {
      absolute_timeout_ = from.absolute_timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgHttpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgHttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHttpRequest::CopyFrom(const CMsgHttpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgHttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpRequest::IsInitialized() const {
  return true;
}

void CMsgHttpRequest::Swap(CMsgHttpRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHttpRequest::InternalSwap(CMsgHttpRequest* other) {
  headers_.InternalSwap(&other->headers_);
  get_params_.InternalSwap(&other->get_params_);
  post_params_.InternalSwap(&other->post_params_);
  hostname_.Swap(&other->hostname_);
  url_.Swap(&other->url_);
  body_.Swap(&other->body_);
  std::swap(request_method_, other->request_method_);
  std::swap(absolute_timeout_, other->absolute_timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgHttpRequest::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgHttpRequest

// optional uint32 request_method = 1;
bool CMsgHttpRequest::has_request_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgHttpRequest::set_has_request_method() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgHttpRequest::clear_has_request_method() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgHttpRequest::clear_request_method() {
  request_method_ = 0u;
  clear_has_request_method();
}
::google::protobuf::uint32 CMsgHttpRequest::request_method() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHttpRequest.request_method)
  return request_method_;
}
void CMsgHttpRequest::set_request_method(::google::protobuf::uint32 value) {
  set_has_request_method();
  request_method_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgHttpRequest.request_method)
}

// optional string hostname = 2;
bool CMsgHttpRequest::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgHttpRequest::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgHttpRequest::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgHttpRequest::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
const ::std::string& CMsgHttpRequest::hostname() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHttpRequest.hostname)
  return hostname_.GetNoArena();
}
void CMsgHttpRequest::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgHttpRequest.hostname)
}
#if LANG_CXX11
void CMsgHttpRequest::set_hostname(::std::string&& value) {
  set_has_hostname();
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgHttpRequest.hostname)
}
#endif
void CMsgHttpRequest::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgHttpRequest.hostname)
}
void CMsgHttpRequest::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgHttpRequest.hostname)
}
::std::string* CMsgHttpRequest::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgHttpRequest.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgHttpRequest::release_hostname() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgHttpRequest.hostname)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgHttpRequest::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgHttpRequest.hostname)
}

// optional string url = 3;
bool CMsgHttpRequest::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgHttpRequest::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgHttpRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgHttpRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CMsgHttpRequest::url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHttpRequest.url)
  return url_.GetNoArena();
}
void CMsgHttpRequest::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgHttpRequest.url)
}
#if LANG_CXX11
void CMsgHttpRequest::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgHttpRequest.url)
}
#endif
void CMsgHttpRequest::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgHttpRequest.url)
}
void CMsgHttpRequest::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgHttpRequest.url)
}
::std::string* CMsgHttpRequest::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgHttpRequest.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgHttpRequest::release_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgHttpRequest.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgHttpRequest::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgHttpRequest.url)
}

// repeated .proto.dota.CMsgHttpRequest.RequestHeader headers = 4;
int CMsgHttpRequest::headers_size() const {
  return headers_.size();
}
void CMsgHttpRequest::clear_headers() {
  headers_.Clear();
}
const ::proto::dota::CMsgHttpRequest_RequestHeader& CMsgHttpRequest::headers(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHttpRequest.headers)
  return headers_.Get(index);
}
::proto::dota::CMsgHttpRequest_RequestHeader* CMsgHttpRequest::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgHttpRequest.headers)
  return headers_.Mutable(index);
}
::proto::dota::CMsgHttpRequest_RequestHeader* CMsgHttpRequest::add_headers() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgHttpRequest.headers)
  return headers_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgHttpRequest_RequestHeader >*
CMsgHttpRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgHttpRequest.headers)
  return &headers_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgHttpRequest_RequestHeader >&
CMsgHttpRequest::headers() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgHttpRequest.headers)
  return headers_;
}

// repeated .proto.dota.CMsgHttpRequest.QueryParam get_params = 5;
int CMsgHttpRequest::get_params_size() const {
  return get_params_.size();
}
void CMsgHttpRequest::clear_get_params() {
  get_params_.Clear();
}
const ::proto::dota::CMsgHttpRequest_QueryParam& CMsgHttpRequest::get_params(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHttpRequest.get_params)
  return get_params_.Get(index);
}
::proto::dota::CMsgHttpRequest_QueryParam* CMsgHttpRequest::mutable_get_params(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgHttpRequest.get_params)
  return get_params_.Mutable(index);
}
::proto::dota::CMsgHttpRequest_QueryParam* CMsgHttpRequest::add_get_params() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgHttpRequest.get_params)
  return get_params_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgHttpRequest_QueryParam >*
CMsgHttpRequest::mutable_get_params() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgHttpRequest.get_params)
  return &get_params_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgHttpRequest_QueryParam >&
CMsgHttpRequest::get_params() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgHttpRequest.get_params)
  return get_params_;
}

// repeated .proto.dota.CMsgHttpRequest.QueryParam post_params = 6;
int CMsgHttpRequest::post_params_size() const {
  return post_params_.size();
}
void CMsgHttpRequest::clear_post_params() {
  post_params_.Clear();
}
const ::proto::dota::CMsgHttpRequest_QueryParam& CMsgHttpRequest::post_params(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHttpRequest.post_params)
  return post_params_.Get(index);
}
::proto::dota::CMsgHttpRequest_QueryParam* CMsgHttpRequest::mutable_post_params(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgHttpRequest.post_params)
  return post_params_.Mutable(index);
}
::proto::dota::CMsgHttpRequest_QueryParam* CMsgHttpRequest::add_post_params() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgHttpRequest.post_params)
  return post_params_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgHttpRequest_QueryParam >*
CMsgHttpRequest::mutable_post_params() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgHttpRequest.post_params)
  return &post_params_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgHttpRequest_QueryParam >&
CMsgHttpRequest::post_params() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgHttpRequest.post_params)
  return post_params_;
}

// optional bytes body = 7;
bool CMsgHttpRequest::has_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgHttpRequest::set_has_body() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgHttpRequest::clear_has_body() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgHttpRequest::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
const ::std::string& CMsgHttpRequest::body() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHttpRequest.body)
  return body_.GetNoArena();
}
void CMsgHttpRequest::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgHttpRequest.body)
}
#if LANG_CXX11
void CMsgHttpRequest::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgHttpRequest.body)
}
#endif
void CMsgHttpRequest::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgHttpRequest.body)
}
void CMsgHttpRequest::set_body(const void* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgHttpRequest.body)
}
::std::string* CMsgHttpRequest::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgHttpRequest.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgHttpRequest::release_body() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgHttpRequest.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgHttpRequest::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgHttpRequest.body)
}

// optional uint32 absolute_timeout = 8;
bool CMsgHttpRequest::has_absolute_timeout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgHttpRequest::set_has_absolute_timeout() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgHttpRequest::clear_has_absolute_timeout() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgHttpRequest::clear_absolute_timeout() {
  absolute_timeout_ = 0u;
  clear_has_absolute_timeout();
}
::google::protobuf::uint32 CMsgHttpRequest::absolute_timeout() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHttpRequest.absolute_timeout)
  return absolute_timeout_;
}
void CMsgHttpRequest::set_absolute_timeout(::google::protobuf::uint32 value) {
  set_has_absolute_timeout();
  absolute_timeout_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgHttpRequest.absolute_timeout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgWebAPIRequest::kUNUSEDJobNameFieldNumber;
const int CMsgWebAPIRequest::kInterfaceNameFieldNumber;
const int CMsgWebAPIRequest::kMethodNameFieldNumber;
const int CMsgWebAPIRequest::kVersionFieldNumber;
const int CMsgWebAPIRequest::kApiKeyFieldNumber;
const int CMsgWebAPIRequest::kRequestFieldNumber;
const int CMsgWebAPIRequest::kRoutingAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgWebAPIRequest::CMsgWebAPIRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgWebAPIRequest)
}
CMsgWebAPIRequest::CMsgWebAPIRequest(const CMsgWebAPIRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unused_job_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unused_job_name()) {
    unused_job_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unused_job_name_);
  }
  interface_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_interface_name()) {
    interface_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_name_);
  }
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_method_name()) {
    method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  if (from.has_api_key()) {
    api_key_ = new ::proto::dota::CMsgWebAPIKey(*from.api_key_);
  } else {
    api_key_ = NULL;
  }
  if (from.has_request()) {
    request_ = new ::proto::dota::CMsgHttpRequest(*from.request_);
  } else {
    request_ = NULL;
  }
  ::memcpy(&version_, &from.version_,
    reinterpret_cast<char*>(&routing_app_id_) -
    reinterpret_cast<char*>(&version_) + sizeof(routing_app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgWebAPIRequest)
}

void CMsgWebAPIRequest::SharedCtor() {
  _cached_size_ = 0;
  unused_job_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&api_key_, 0, reinterpret_cast<char*>(&routing_app_id_) -
    reinterpret_cast<char*>(&api_key_) + sizeof(routing_app_id_));
}

CMsgWebAPIRequest::~CMsgWebAPIRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgWebAPIRequest)
  SharedDtor();
}

void CMsgWebAPIRequest::SharedDtor() {
  unused_job_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interface_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete api_key_;
  }
  if (this != internal_default_instance()) {
    delete request_;
  }
}

void CMsgWebAPIRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgWebAPIRequest::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgWebAPIRequest& CMsgWebAPIRequest::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgWebAPIRequest* CMsgWebAPIRequest::New(::google::protobuf::Arena* arena) const {
  CMsgWebAPIRequest* n = new CMsgWebAPIRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgWebAPIRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgWebAPIRequest)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_unused_job_name()) {
      GOOGLE_DCHECK(!unused_job_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*unused_job_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_interface_name()) {
      GOOGLE_DCHECK(!interface_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*interface_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_method_name()) {
      GOOGLE_DCHECK(!method_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*method_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_api_key()) {
      GOOGLE_DCHECK(api_key_ != NULL);
      api_key_->::proto::dota::CMsgWebAPIKey::Clear();
    }
    if (has_request()) {
      GOOGLE_DCHECK(request_ != NULL);
      request_->::proto::dota::CMsgHttpRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 96u) {
    ::memset(&version_, 0, reinterpret_cast<char*>(&routing_app_id_) -
      reinterpret_cast<char*>(&version_) + sizeof(routing_app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgWebAPIRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgWebAPIRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UNUSED_job_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unused_job_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unused_job_name().data(), this->unused_job_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgWebAPIRequest.UNUSED_job_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string interface_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->interface_name().data(), this->interface_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgWebAPIRequest.interface_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string method_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgWebAPIRequest.method_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgWebAPIKey api_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_api_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgHttpRequest request = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 routing_app_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_routing_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &routing_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgWebAPIRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgWebAPIRequest)
  return false;
#undef DO_
}

void CMsgWebAPIRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgWebAPIRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UNUSED_job_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unused_job_name().data(), this->unused_job_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWebAPIRequest.UNUSED_job_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unused_job_name(), output);
  }

  // optional string interface_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interface_name().data(), this->interface_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWebAPIRequest.interface_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->interface_name(), output);
  }

  // optional string method_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWebAPIRequest.method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->method_name(), output);
  }

  // optional uint32 version = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->version(), output);
  }

  // optional .proto.dota.CMsgWebAPIKey api_key = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->api_key_, output);
  }

  // optional .proto.dota.CMsgHttpRequest request = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->request_, output);
  }

  // optional uint32 routing_app_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->routing_app_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgWebAPIRequest)
}

::google::protobuf::uint8* CMsgWebAPIRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgWebAPIRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UNUSED_job_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unused_job_name().data(), this->unused_job_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWebAPIRequest.UNUSED_job_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unused_job_name(), target);
  }

  // optional string interface_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interface_name().data(), this->interface_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWebAPIRequest.interface_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->interface_name(), target);
  }

  // optional string method_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWebAPIRequest.method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->method_name(), target);
  }

  // optional uint32 version = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->version(), target);
  }

  // optional .proto.dota.CMsgWebAPIKey api_key = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->api_key_, deterministic, target);
  }

  // optional .proto.dota.CMsgHttpRequest request = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->request_, deterministic, target);
  }

  // optional uint32 routing_app_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->routing_app_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgWebAPIRequest)
  return target;
}

size_t CMsgWebAPIRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgWebAPIRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string UNUSED_job_name = 1;
    if (has_unused_job_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unused_job_name());
    }

    // optional string interface_name = 2;
    if (has_interface_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interface_name());
    }

    // optional string method_name = 3;
    if (has_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }

    // optional .proto.dota.CMsgWebAPIKey api_key = 5;
    if (has_api_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->api_key_);
    }

    // optional .proto.dota.CMsgHttpRequest request = 6;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_);
    }

    // optional uint32 version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 routing_app_id = 7;
    if (has_routing_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->routing_app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgWebAPIRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgWebAPIRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWebAPIRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgWebAPIRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgWebAPIRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgWebAPIRequest)
    MergeFrom(*source);
  }
}

void CMsgWebAPIRequest::MergeFrom(const CMsgWebAPIRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgWebAPIRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_unused_job_name();
      unused_job_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unused_job_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_interface_name();
      interface_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_method_name();
      method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_api_key()->::proto::dota::CMsgWebAPIKey::MergeFrom(from.api_key());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_request()->::proto::dota::CMsgHttpRequest::MergeFrom(from.request());
    }
    if (cached_has_bits & 0x00000020u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000040u) {
      routing_app_id_ = from.routing_app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgWebAPIRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgWebAPIRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWebAPIRequest::CopyFrom(const CMsgWebAPIRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgWebAPIRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWebAPIRequest::IsInitialized() const {
  return true;
}

void CMsgWebAPIRequest::Swap(CMsgWebAPIRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgWebAPIRequest::InternalSwap(CMsgWebAPIRequest* other) {
  unused_job_name_.Swap(&other->unused_job_name_);
  interface_name_.Swap(&other->interface_name_);
  method_name_.Swap(&other->method_name_);
  std::swap(api_key_, other->api_key_);
  std::swap(request_, other->request_);
  std::swap(version_, other->version_);
  std::swap(routing_app_id_, other->routing_app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgWebAPIRequest::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgWebAPIRequest

// optional string UNUSED_job_name = 1;
bool CMsgWebAPIRequest::has_unused_job_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgWebAPIRequest::set_has_unused_job_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgWebAPIRequest::clear_has_unused_job_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgWebAPIRequest::clear_unused_job_name() {
  unused_job_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unused_job_name();
}
const ::std::string& CMsgWebAPIRequest::unused_job_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWebAPIRequest.UNUSED_job_name)
  return unused_job_name_.GetNoArena();
}
void CMsgWebAPIRequest::set_unused_job_name(const ::std::string& value) {
  set_has_unused_job_name();
  unused_job_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWebAPIRequest.UNUSED_job_name)
}
#if LANG_CXX11
void CMsgWebAPIRequest::set_unused_job_name(::std::string&& value) {
  set_has_unused_job_name();
  unused_job_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgWebAPIRequest.UNUSED_job_name)
}
#endif
void CMsgWebAPIRequest::set_unused_job_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unused_job_name();
  unused_job_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgWebAPIRequest.UNUSED_job_name)
}
void CMsgWebAPIRequest::set_unused_job_name(const char* value, size_t size) {
  set_has_unused_job_name();
  unused_job_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgWebAPIRequest.UNUSED_job_name)
}
::std::string* CMsgWebAPIRequest::mutable_unused_job_name() {
  set_has_unused_job_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgWebAPIRequest.UNUSED_job_name)
  return unused_job_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgWebAPIRequest::release_unused_job_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgWebAPIRequest.UNUSED_job_name)
  clear_has_unused_job_name();
  return unused_job_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgWebAPIRequest::set_allocated_unused_job_name(::std::string* unused_job_name) {
  if (unused_job_name != NULL) {
    set_has_unused_job_name();
  } else {
    clear_has_unused_job_name();
  }
  unused_job_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unused_job_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgWebAPIRequest.UNUSED_job_name)
}

// optional string interface_name = 2;
bool CMsgWebAPIRequest::has_interface_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgWebAPIRequest::set_has_interface_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgWebAPIRequest::clear_has_interface_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgWebAPIRequest::clear_interface_name() {
  interface_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_interface_name();
}
const ::std::string& CMsgWebAPIRequest::interface_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWebAPIRequest.interface_name)
  return interface_name_.GetNoArena();
}
void CMsgWebAPIRequest::set_interface_name(const ::std::string& value) {
  set_has_interface_name();
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWebAPIRequest.interface_name)
}
#if LANG_CXX11
void CMsgWebAPIRequest::set_interface_name(::std::string&& value) {
  set_has_interface_name();
  interface_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgWebAPIRequest.interface_name)
}
#endif
void CMsgWebAPIRequest::set_interface_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_interface_name();
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgWebAPIRequest.interface_name)
}
void CMsgWebAPIRequest::set_interface_name(const char* value, size_t size) {
  set_has_interface_name();
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgWebAPIRequest.interface_name)
}
::std::string* CMsgWebAPIRequest::mutable_interface_name() {
  set_has_interface_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgWebAPIRequest.interface_name)
  return interface_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgWebAPIRequest::release_interface_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgWebAPIRequest.interface_name)
  clear_has_interface_name();
  return interface_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgWebAPIRequest::set_allocated_interface_name(::std::string* interface_name) {
  if (interface_name != NULL) {
    set_has_interface_name();
  } else {
    clear_has_interface_name();
  }
  interface_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interface_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgWebAPIRequest.interface_name)
}

// optional string method_name = 3;
bool CMsgWebAPIRequest::has_method_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgWebAPIRequest::set_has_method_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgWebAPIRequest::clear_has_method_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgWebAPIRequest::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method_name();
}
const ::std::string& CMsgWebAPIRequest::method_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWebAPIRequest.method_name)
  return method_name_.GetNoArena();
}
void CMsgWebAPIRequest::set_method_name(const ::std::string& value) {
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWebAPIRequest.method_name)
}
#if LANG_CXX11
void CMsgWebAPIRequest::set_method_name(::std::string&& value) {
  set_has_method_name();
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgWebAPIRequest.method_name)
}
#endif
void CMsgWebAPIRequest::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgWebAPIRequest.method_name)
}
void CMsgWebAPIRequest::set_method_name(const char* value, size_t size) {
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgWebAPIRequest.method_name)
}
::std::string* CMsgWebAPIRequest::mutable_method_name() {
  set_has_method_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgWebAPIRequest.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgWebAPIRequest::release_method_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgWebAPIRequest.method_name)
  clear_has_method_name();
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgWebAPIRequest::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    set_has_method_name();
  } else {
    clear_has_method_name();
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgWebAPIRequest.method_name)
}

// optional uint32 version = 4;
bool CMsgWebAPIRequest::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgWebAPIRequest::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgWebAPIRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgWebAPIRequest::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 CMsgWebAPIRequest::version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWebAPIRequest.version)
  return version_;
}
void CMsgWebAPIRequest::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWebAPIRequest.version)
}

// optional .proto.dota.CMsgWebAPIKey api_key = 5;
bool CMsgWebAPIRequest::has_api_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgWebAPIRequest::set_has_api_key() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgWebAPIRequest::clear_has_api_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgWebAPIRequest::clear_api_key() {
  if (api_key_ != NULL) api_key_->::proto::dota::CMsgWebAPIKey::Clear();
  clear_has_api_key();
}
const ::proto::dota::CMsgWebAPIKey& CMsgWebAPIRequest::api_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWebAPIRequest.api_key)
  return api_key_ != NULL ? *api_key_
                         : *::proto::dota::CMsgWebAPIKey::internal_default_instance();
}
::proto::dota::CMsgWebAPIKey* CMsgWebAPIRequest::mutable_api_key() {
  set_has_api_key();
  if (api_key_ == NULL) {
    api_key_ = new ::proto::dota::CMsgWebAPIKey;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgWebAPIRequest.api_key)
  return api_key_;
}
::proto::dota::CMsgWebAPIKey* CMsgWebAPIRequest::release_api_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgWebAPIRequest.api_key)
  clear_has_api_key();
  ::proto::dota::CMsgWebAPIKey* temp = api_key_;
  api_key_ = NULL;
  return temp;
}
void CMsgWebAPIRequest::set_allocated_api_key(::proto::dota::CMsgWebAPIKey* api_key) {
  delete api_key_;
  api_key_ = api_key;
  if (api_key) {
    set_has_api_key();
  } else {
    clear_has_api_key();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgWebAPIRequest.api_key)
}

// optional .proto.dota.CMsgHttpRequest request = 6;
bool CMsgWebAPIRequest::has_request() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgWebAPIRequest::set_has_request() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgWebAPIRequest::clear_has_request() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgWebAPIRequest::clear_request() {
  if (request_ != NULL) request_->::proto::dota::CMsgHttpRequest::Clear();
  clear_has_request();
}
const ::proto::dota::CMsgHttpRequest& CMsgWebAPIRequest::request() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWebAPIRequest.request)
  return request_ != NULL ? *request_
                         : *::proto::dota::CMsgHttpRequest::internal_default_instance();
}
::proto::dota::CMsgHttpRequest* CMsgWebAPIRequest::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::proto::dota::CMsgHttpRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgWebAPIRequest.request)
  return request_;
}
::proto::dota::CMsgHttpRequest* CMsgWebAPIRequest::release_request() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgWebAPIRequest.request)
  clear_has_request();
  ::proto::dota::CMsgHttpRequest* temp = request_;
  request_ = NULL;
  return temp;
}
void CMsgWebAPIRequest::set_allocated_request(::proto::dota::CMsgHttpRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgWebAPIRequest.request)
}

// optional uint32 routing_app_id = 7;
bool CMsgWebAPIRequest::has_routing_app_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgWebAPIRequest::set_has_routing_app_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgWebAPIRequest::clear_has_routing_app_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgWebAPIRequest::clear_routing_app_id() {
  routing_app_id_ = 0u;
  clear_has_routing_app_id();
}
::google::protobuf::uint32 CMsgWebAPIRequest::routing_app_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWebAPIRequest.routing_app_id)
  return routing_app_id_;
}
void CMsgWebAPIRequest::set_routing_app_id(::google::protobuf::uint32 value) {
  set_has_routing_app_id();
  routing_app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWebAPIRequest.routing_app_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHttpResponse_ResponseHeader::kNameFieldNumber;
const int CMsgHttpResponse_ResponseHeader::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHttpResponse_ResponseHeader::CMsgHttpResponse_ResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgHttpResponse.ResponseHeader)
}
CMsgHttpResponse_ResponseHeader::CMsgHttpResponse_ResponseHeader(const CMsgHttpResponse_ResponseHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgHttpResponse.ResponseHeader)
}

void CMsgHttpResponse_ResponseHeader::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgHttpResponse_ResponseHeader::~CMsgHttpResponse_ResponseHeader() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgHttpResponse.ResponseHeader)
  SharedDtor();
}

void CMsgHttpResponse_ResponseHeader::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgHttpResponse_ResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHttpResponse_ResponseHeader::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgHttpResponse_ResponseHeader& CMsgHttpResponse_ResponseHeader::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgHttpResponse_ResponseHeader* CMsgHttpResponse_ResponseHeader::New(::google::protobuf::Arena* arena) const {
  CMsgHttpResponse_ResponseHeader* n = new CMsgHttpResponse_ResponseHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgHttpResponse_ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgHttpResponse.ResponseHeader)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgHttpResponse_ResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgHttpResponse.ResponseHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgHttpResponse.ResponseHeader.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgHttpResponse.ResponseHeader.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgHttpResponse.ResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgHttpResponse.ResponseHeader)
  return false;
#undef DO_
}

void CMsgHttpResponse_ResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgHttpResponse.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpResponse.ResponseHeader.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpResponse.ResponseHeader.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgHttpResponse.ResponseHeader)
}

::google::protobuf::uint8* CMsgHttpResponse_ResponseHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgHttpResponse.ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpResponse.ResponseHeader.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgHttpResponse.ResponseHeader.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgHttpResponse.ResponseHeader)
  return target;
}

size_t CMsgHttpResponse_ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgHttpResponse.ResponseHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHttpResponse_ResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgHttpResponse.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHttpResponse_ResponseHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgHttpResponse_ResponseHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgHttpResponse.ResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgHttpResponse.ResponseHeader)
    MergeFrom(*source);
  }
}

void CMsgHttpResponse_ResponseHeader::MergeFrom(const CMsgHttpResponse_ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgHttpResponse.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CMsgHttpResponse_ResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgHttpResponse.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHttpResponse_ResponseHeader::CopyFrom(const CMsgHttpResponse_ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgHttpResponse.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpResponse_ResponseHeader::IsInitialized() const {
  return true;
}

void CMsgHttpResponse_ResponseHeader::Swap(CMsgHttpResponse_ResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHttpResponse_ResponseHeader::InternalSwap(CMsgHttpResponse_ResponseHeader* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgHttpResponse_ResponseHeader::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgHttpResponse_ResponseHeader

// optional string name = 1;
bool CMsgHttpResponse_ResponseHeader::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgHttpResponse_ResponseHeader::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgHttpResponse_ResponseHeader::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgHttpResponse_ResponseHeader::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgHttpResponse_ResponseHeader::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHttpResponse.ResponseHeader.name)
  return name_.GetNoArena();
}
void CMsgHttpResponse_ResponseHeader::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgHttpResponse.ResponseHeader.name)
}
#if LANG_CXX11
void CMsgHttpResponse_ResponseHeader::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgHttpResponse.ResponseHeader.name)
}
#endif
void CMsgHttpResponse_ResponseHeader::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgHttpResponse.ResponseHeader.name)
}
void CMsgHttpResponse_ResponseHeader::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgHttpResponse.ResponseHeader.name)
}
::std::string* CMsgHttpResponse_ResponseHeader::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgHttpResponse.ResponseHeader.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgHttpResponse_ResponseHeader::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgHttpResponse.ResponseHeader.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgHttpResponse_ResponseHeader::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgHttpResponse.ResponseHeader.name)
}

// optional string value = 2;
bool CMsgHttpResponse_ResponseHeader::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgHttpResponse_ResponseHeader::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgHttpResponse_ResponseHeader::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgHttpResponse_ResponseHeader::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CMsgHttpResponse_ResponseHeader::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHttpResponse.ResponseHeader.value)
  return value_.GetNoArena();
}
void CMsgHttpResponse_ResponseHeader::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgHttpResponse.ResponseHeader.value)
}
#if LANG_CXX11
void CMsgHttpResponse_ResponseHeader::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgHttpResponse.ResponseHeader.value)
}
#endif
void CMsgHttpResponse_ResponseHeader::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgHttpResponse.ResponseHeader.value)
}
void CMsgHttpResponse_ResponseHeader::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgHttpResponse.ResponseHeader.value)
}
::std::string* CMsgHttpResponse_ResponseHeader::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgHttpResponse.ResponseHeader.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgHttpResponse_ResponseHeader::release_value() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgHttpResponse.ResponseHeader.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgHttpResponse_ResponseHeader::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgHttpResponse.ResponseHeader.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHttpResponse::kStatusCodeFieldNumber;
const int CMsgHttpResponse::kHeadersFieldNumber;
const int CMsgHttpResponse::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHttpResponse::CMsgHttpResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgHttpResponse)
}
CMsgHttpResponse::CMsgHttpResponse(const CMsgHttpResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body()) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgHttpResponse)
}

void CMsgHttpResponse::SharedCtor() {
  _cached_size_ = 0;
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_code_ = 0u;
}

CMsgHttpResponse::~CMsgHttpResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgHttpResponse)
  SharedDtor();
}

void CMsgHttpResponse::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgHttpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHttpResponse::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgHttpResponse& CMsgHttpResponse::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgHttpResponse* CMsgHttpResponse::New(::google::protobuf::Arena* arena) const {
  CMsgHttpResponse* n = new CMsgHttpResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgHttpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgHttpResponse)
  headers_.Clear();
  if (has_body()) {
    GOOGLE_DCHECK(!body_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*body_.UnsafeRawStringPointer())->clear();
  }
  status_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgHttpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgHttpResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_status_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgHttpResponse.ResponseHeader headers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes body = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgHttpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgHttpResponse)
  return false;
#undef DO_
}

void CMsgHttpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgHttpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 status_code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status_code(), output);
  }

  // repeated .proto.dota.CMsgHttpResponse.ResponseHeader headers = 2;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->headers(i), output);
  }

  // optional bytes body = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->body(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgHttpResponse)
}

::google::protobuf::uint8* CMsgHttpResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgHttpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 status_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status_code(), target);
  }

  // repeated .proto.dota.CMsgHttpResponse.ResponseHeader headers = 2;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->headers(i), deterministic, target);
  }

  // optional bytes body = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->body(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgHttpResponse)
  return target;
}

size_t CMsgHttpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgHttpResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgHttpResponse.ResponseHeader headers = 2;
  {
    unsigned int count = this->headers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->headers(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes body = 3;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional uint32 status_code = 1;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHttpResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgHttpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHttpResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgHttpResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgHttpResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgHttpResponse)
    MergeFrom(*source);
  }
}

void CMsgHttpResponse::MergeFrom(const CMsgHttpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgHttpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
    if (cached_has_bits & 0x00000002u) {
      status_code_ = from.status_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgHttpResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgHttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHttpResponse::CopyFrom(const CMsgHttpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgHttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpResponse::IsInitialized() const {
  return true;
}

void CMsgHttpResponse::Swap(CMsgHttpResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHttpResponse::InternalSwap(CMsgHttpResponse* other) {
  headers_.InternalSwap(&other->headers_);
  body_.Swap(&other->body_);
  std::swap(status_code_, other->status_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgHttpResponse::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgHttpResponse

// optional uint32 status_code = 1;
bool CMsgHttpResponse::has_status_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgHttpResponse::set_has_status_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgHttpResponse::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgHttpResponse::clear_status_code() {
  status_code_ = 0u;
  clear_has_status_code();
}
::google::protobuf::uint32 CMsgHttpResponse::status_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHttpResponse.status_code)
  return status_code_;
}
void CMsgHttpResponse::set_status_code(::google::protobuf::uint32 value) {
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgHttpResponse.status_code)
}

// repeated .proto.dota.CMsgHttpResponse.ResponseHeader headers = 2;
int CMsgHttpResponse::headers_size() const {
  return headers_.size();
}
void CMsgHttpResponse::clear_headers() {
  headers_.Clear();
}
const ::proto::dota::CMsgHttpResponse_ResponseHeader& CMsgHttpResponse::headers(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHttpResponse.headers)
  return headers_.Get(index);
}
::proto::dota::CMsgHttpResponse_ResponseHeader* CMsgHttpResponse::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgHttpResponse.headers)
  return headers_.Mutable(index);
}
::proto::dota::CMsgHttpResponse_ResponseHeader* CMsgHttpResponse::add_headers() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgHttpResponse.headers)
  return headers_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgHttpResponse_ResponseHeader >*
CMsgHttpResponse::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgHttpResponse.headers)
  return &headers_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgHttpResponse_ResponseHeader >&
CMsgHttpResponse::headers() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgHttpResponse.headers)
  return headers_;
}

// optional bytes body = 3;
bool CMsgHttpResponse::has_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgHttpResponse::set_has_body() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgHttpResponse::clear_has_body() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgHttpResponse::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
const ::std::string& CMsgHttpResponse::body() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHttpResponse.body)
  return body_.GetNoArena();
}
void CMsgHttpResponse::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgHttpResponse.body)
}
#if LANG_CXX11
void CMsgHttpResponse::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgHttpResponse.body)
}
#endif
void CMsgHttpResponse::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgHttpResponse.body)
}
void CMsgHttpResponse::set_body(const void* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgHttpResponse.body)
}
::std::string* CMsgHttpResponse::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgHttpResponse.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgHttpResponse::release_body() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgHttpResponse.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgHttpResponse::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgHttpResponse.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMFindAccounts::kSearchTypeFieldNumber;
const int CMsgAMFindAccounts::kSearchStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMFindAccounts::CMsgAMFindAccounts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMFindAccounts)
}
CMsgAMFindAccounts::CMsgAMFindAccounts(const CMsgAMFindAccounts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_string()) {
    search_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_string_);
  }
  search_type_ = from.search_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMFindAccounts)
}

void CMsgAMFindAccounts::SharedCtor() {
  _cached_size_ = 0;
  search_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_type_ = 0u;
}

CMsgAMFindAccounts::~CMsgAMFindAccounts() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMFindAccounts)
  SharedDtor();
}

void CMsgAMFindAccounts::SharedDtor() {
  search_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgAMFindAccounts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMFindAccounts::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAMFindAccounts& CMsgAMFindAccounts::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAMFindAccounts* CMsgAMFindAccounts::New(::google::protobuf::Arena* arena) const {
  CMsgAMFindAccounts* n = new CMsgAMFindAccounts;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAMFindAccounts::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMFindAccounts)
  if (has_search_string()) {
    GOOGLE_DCHECK(!search_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*search_string_.UnsafeRawStringPointer())->clear();
  }
  search_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAMFindAccounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMFindAccounts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 search_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_search_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string search_string = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_string().data(), this->search_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgAMFindAccounts.search_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMFindAccounts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMFindAccounts)
  return false;
#undef DO_
}

void CMsgAMFindAccounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMFindAccounts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 search_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->search_type(), output);
  }

  // optional string search_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_string().data(), this->search_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMFindAccounts.search_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->search_string(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMFindAccounts)
}

::google::protobuf::uint8* CMsgAMFindAccounts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMFindAccounts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 search_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->search_type(), target);
  }

  // optional string search_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_string().data(), this->search_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMFindAccounts.search_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->search_string(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMFindAccounts)
  return target;
}

size_t CMsgAMFindAccounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMFindAccounts)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string search_string = 2;
    if (has_search_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_string());
    }

    // optional uint32 search_type = 1;
    if (has_search_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMFindAccounts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMFindAccounts)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMFindAccounts* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAMFindAccounts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMFindAccounts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMFindAccounts)
    MergeFrom(*source);
  }
}

void CMsgAMFindAccounts::MergeFrom(const CMsgAMFindAccounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMFindAccounts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_search_string();
      search_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      search_type_ = from.search_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMFindAccounts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMFindAccounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMFindAccounts::CopyFrom(const CMsgAMFindAccounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMFindAccounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMFindAccounts::IsInitialized() const {
  return true;
}

void CMsgAMFindAccounts::Swap(CMsgAMFindAccounts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMFindAccounts::InternalSwap(CMsgAMFindAccounts* other) {
  search_string_.Swap(&other->search_string_);
  std::swap(search_type_, other->search_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAMFindAccounts::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAMFindAccounts

// optional uint32 search_type = 1;
bool CMsgAMFindAccounts::has_search_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgAMFindAccounts::set_has_search_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgAMFindAccounts::clear_has_search_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgAMFindAccounts::clear_search_type() {
  search_type_ = 0u;
  clear_has_search_type();
}
::google::protobuf::uint32 CMsgAMFindAccounts::search_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMFindAccounts.search_type)
  return search_type_;
}
void CMsgAMFindAccounts::set_search_type(::google::protobuf::uint32 value) {
  set_has_search_type();
  search_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMFindAccounts.search_type)
}

// optional string search_string = 2;
bool CMsgAMFindAccounts::has_search_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAMFindAccounts::set_has_search_string() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAMFindAccounts::clear_has_search_string() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAMFindAccounts::clear_search_string() {
  search_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_string();
}
const ::std::string& CMsgAMFindAccounts::search_string() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMFindAccounts.search_string)
  return search_string_.GetNoArena();
}
void CMsgAMFindAccounts::set_search_string(const ::std::string& value) {
  set_has_search_string();
  search_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMFindAccounts.search_string)
}
#if LANG_CXX11
void CMsgAMFindAccounts::set_search_string(::std::string&& value) {
  set_has_search_string();
  search_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgAMFindAccounts.search_string)
}
#endif
void CMsgAMFindAccounts::set_search_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_string();
  search_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgAMFindAccounts.search_string)
}
void CMsgAMFindAccounts::set_search_string(const char* value, size_t size) {
  set_has_search_string();
  search_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgAMFindAccounts.search_string)
}
::std::string* CMsgAMFindAccounts::mutable_search_string() {
  set_has_search_string();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgAMFindAccounts.search_string)
  return search_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgAMFindAccounts::release_search_string() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgAMFindAccounts.search_string)
  clear_has_search_string();
  return search_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgAMFindAccounts::set_allocated_search_string(::std::string* search_string) {
  if (search_string != NULL) {
    set_has_search_string();
  } else {
    clear_has_search_string();
  }
  search_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_string);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgAMFindAccounts.search_string)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMFindAccountsResponse::kSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMFindAccountsResponse::CMsgAMFindAccountsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMFindAccountsResponse)
}
CMsgAMFindAccountsResponse::CMsgAMFindAccountsResponse(const CMsgAMFindAccountsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      steam_id_(from.steam_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMFindAccountsResponse)
}

void CMsgAMFindAccountsResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgAMFindAccountsResponse::~CMsgAMFindAccountsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMFindAccountsResponse)
  SharedDtor();
}

void CMsgAMFindAccountsResponse::SharedDtor() {
}

void CMsgAMFindAccountsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMFindAccountsResponse::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAMFindAccountsResponse& CMsgAMFindAccountsResponse::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAMFindAccountsResponse* CMsgAMFindAccountsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgAMFindAccountsResponse* n = new CMsgAMFindAccountsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAMFindAccountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMFindAccountsResponse)
  steam_id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAMFindAccountsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMFindAccountsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9u, input, this->mutable_steam_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steam_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMFindAccountsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMFindAccountsResponse)
  return false;
#undef DO_
}

void CMsgAMFindAccountsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMFindAccountsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 steam_id = 1;
  for (int i = 0, n = this->steam_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->steam_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMFindAccountsResponse)
}

::google::protobuf::uint8* CMsgAMFindAccountsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMFindAccountsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 steam_id = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(1, this->steam_id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMFindAccountsResponse)
  return target;
}

size_t CMsgAMFindAccountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMFindAccountsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed64 steam_id = 1;
  {
    unsigned int count = this->steam_id_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steam_id_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMFindAccountsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMFindAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMFindAccountsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAMFindAccountsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMFindAccountsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMFindAccountsResponse)
    MergeFrom(*source);
  }
}

void CMsgAMFindAccountsResponse::MergeFrom(const CMsgAMFindAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMFindAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steam_id_.MergeFrom(from.steam_id_);
}

void CMsgAMFindAccountsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMFindAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMFindAccountsResponse::CopyFrom(const CMsgAMFindAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMFindAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMFindAccountsResponse::IsInitialized() const {
  return true;
}

void CMsgAMFindAccountsResponse::Swap(CMsgAMFindAccountsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMFindAccountsResponse::InternalSwap(CMsgAMFindAccountsResponse* other) {
  steam_id_.InternalSwap(&other->steam_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAMFindAccountsResponse::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAMFindAccountsResponse

// repeated fixed64 steam_id = 1;
int CMsgAMFindAccountsResponse::steam_id_size() const {
  return steam_id_.size();
}
void CMsgAMFindAccountsResponse::clear_steam_id() {
  steam_id_.Clear();
}
::google::protobuf::uint64 CMsgAMFindAccountsResponse::steam_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMFindAccountsResponse.steam_id)
  return steam_id_.Get(index);
}
void CMsgAMFindAccountsResponse::set_steam_id(int index, ::google::protobuf::uint64 value) {
  steam_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMFindAccountsResponse.steam_id)
}
void CMsgAMFindAccountsResponse::add_steam_id(::google::protobuf::uint64 value) {
  steam_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgAMFindAccountsResponse.steam_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgAMFindAccountsResponse::steam_id() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgAMFindAccountsResponse.steam_id)
  return steam_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgAMFindAccountsResponse::mutable_steam_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgAMFindAccountsResponse.steam_id)
  return &steam_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgNotifyWatchdog::kSourceFieldNumber;
const int CMsgNotifyWatchdog::kAlertTypeFieldNumber;
const int CMsgNotifyWatchdog::kCriticalFieldNumber;
const int CMsgNotifyWatchdog::kTimeFieldNumber;
const int CMsgNotifyWatchdog::kAppidFieldNumber;
const int CMsgNotifyWatchdog::kTextFieldNumber;
const int CMsgNotifyWatchdog::kRecipientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgNotifyWatchdog::CMsgNotifyWatchdog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgNotifyWatchdog)
}
CMsgNotifyWatchdog::CMsgNotifyWatchdog(const CMsgNotifyWatchdog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  recipient_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_recipient()) {
    recipient_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recipient_);
  }
  ::memcpy(&source_, &from.source_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&source_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgNotifyWatchdog)
}

void CMsgNotifyWatchdog::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recipient_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&source_) + sizeof(appid_));
}

CMsgNotifyWatchdog::~CMsgNotifyWatchdog() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgNotifyWatchdog)
  SharedDtor();
}

void CMsgNotifyWatchdog::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recipient_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgNotifyWatchdog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgNotifyWatchdog::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgNotifyWatchdog& CMsgNotifyWatchdog::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgNotifyWatchdog* CMsgNotifyWatchdog::New(::google::protobuf::Arena* arena) const {
  CMsgNotifyWatchdog* n = new CMsgNotifyWatchdog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgNotifyWatchdog::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgNotifyWatchdog)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_text()) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
    if (has_recipient()) {
      GOOGLE_DCHECK(!recipient_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*recipient_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&source_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&source_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgNotifyWatchdog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgNotifyWatchdog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 alert_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_alert_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alert_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool critical = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_critical();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &critical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgNotifyWatchdog.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string recipient = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recipient()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recipient().data(), this->recipient().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgNotifyWatchdog.recipient");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgNotifyWatchdog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgNotifyWatchdog)
  return false;
#undef DO_
}

void CMsgNotifyWatchdog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgNotifyWatchdog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source(), output);
  }

  // optional uint32 alert_type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->alert_type(), output);
  }

  // optional bool critical = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->critical(), output);
  }

  // optional uint32 time = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // optional uint32 appid = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->appid(), output);
  }

  // optional string text = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgNotifyWatchdog.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->text(), output);
  }

  // optional string recipient = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recipient().data(), this->recipient().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgNotifyWatchdog.recipient");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->recipient(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgNotifyWatchdog)
}

::google::protobuf::uint8* CMsgNotifyWatchdog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgNotifyWatchdog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source(), target);
  }

  // optional uint32 alert_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->alert_type(), target);
  }

  // optional bool critical = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->critical(), target);
  }

  // optional uint32 time = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // optional uint32 appid = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->appid(), target);
  }

  // optional string text = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgNotifyWatchdog.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->text(), target);
  }

  // optional string recipient = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recipient().data(), this->recipient().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgNotifyWatchdog.recipient");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->recipient(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgNotifyWatchdog)
  return target;
}

size_t CMsgNotifyWatchdog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgNotifyWatchdog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string text = 7;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string recipient = 12;
    if (has_recipient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recipient());
    }

    // optional uint32 source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source());
    }

    // optional uint32 alert_type = 2;
    if (has_alert_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alert_type());
    }

    // optional bool critical = 4;
    if (has_critical()) {
      total_size += 1 + 1;
    }

    // optional uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 appid = 6;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgNotifyWatchdog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgNotifyWatchdog)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNotifyWatchdog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgNotifyWatchdog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgNotifyWatchdog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgNotifyWatchdog)
    MergeFrom(*source);
  }
}

void CMsgNotifyWatchdog::MergeFrom(const CMsgNotifyWatchdog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgNotifyWatchdog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_recipient();
      recipient_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recipient_);
    }
    if (cached_has_bits & 0x00000004u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000008u) {
      alert_type_ = from.alert_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      critical_ = from.critical_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000040u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgNotifyWatchdog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgNotifyWatchdog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNotifyWatchdog::CopyFrom(const CMsgNotifyWatchdog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgNotifyWatchdog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotifyWatchdog::IsInitialized() const {
  return true;
}

void CMsgNotifyWatchdog::Swap(CMsgNotifyWatchdog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgNotifyWatchdog::InternalSwap(CMsgNotifyWatchdog* other) {
  text_.Swap(&other->text_);
  recipient_.Swap(&other->recipient_);
  std::swap(source_, other->source_);
  std::swap(alert_type_, other->alert_type_);
  std::swap(critical_, other->critical_);
  std::swap(time_, other->time_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgNotifyWatchdog::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgNotifyWatchdog

// optional uint32 source = 1;
bool CMsgNotifyWatchdog::has_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgNotifyWatchdog::set_has_source() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgNotifyWatchdog::clear_has_source() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgNotifyWatchdog::clear_source() {
  source_ = 0u;
  clear_has_source();
}
::google::protobuf::uint32 CMsgNotifyWatchdog::source() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgNotifyWatchdog.source)
  return source_;
}
void CMsgNotifyWatchdog::set_source(::google::protobuf::uint32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgNotifyWatchdog.source)
}

// optional uint32 alert_type = 2;
bool CMsgNotifyWatchdog::has_alert_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgNotifyWatchdog::set_has_alert_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgNotifyWatchdog::clear_has_alert_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgNotifyWatchdog::clear_alert_type() {
  alert_type_ = 0u;
  clear_has_alert_type();
}
::google::protobuf::uint32 CMsgNotifyWatchdog::alert_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgNotifyWatchdog.alert_type)
  return alert_type_;
}
void CMsgNotifyWatchdog::set_alert_type(::google::protobuf::uint32 value) {
  set_has_alert_type();
  alert_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgNotifyWatchdog.alert_type)
}

// optional bool critical = 4;
bool CMsgNotifyWatchdog::has_critical() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgNotifyWatchdog::set_has_critical() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgNotifyWatchdog::clear_has_critical() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgNotifyWatchdog::clear_critical() {
  critical_ = false;
  clear_has_critical();
}
bool CMsgNotifyWatchdog::critical() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgNotifyWatchdog.critical)
  return critical_;
}
void CMsgNotifyWatchdog::set_critical(bool value) {
  set_has_critical();
  critical_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgNotifyWatchdog.critical)
}

// optional uint32 time = 5;
bool CMsgNotifyWatchdog::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgNotifyWatchdog::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgNotifyWatchdog::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgNotifyWatchdog::clear_time() {
  time_ = 0u;
  clear_has_time();
}
::google::protobuf::uint32 CMsgNotifyWatchdog::time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgNotifyWatchdog.time)
  return time_;
}
void CMsgNotifyWatchdog::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgNotifyWatchdog.time)
}

// optional uint32 appid = 6;
bool CMsgNotifyWatchdog::has_appid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgNotifyWatchdog::set_has_appid() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgNotifyWatchdog::clear_has_appid() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgNotifyWatchdog::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMsgNotifyWatchdog::appid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgNotifyWatchdog.appid)
  return appid_;
}
void CMsgNotifyWatchdog::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgNotifyWatchdog.appid)
}

// optional string text = 7;
bool CMsgNotifyWatchdog::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgNotifyWatchdog::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgNotifyWatchdog::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgNotifyWatchdog::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& CMsgNotifyWatchdog::text() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgNotifyWatchdog.text)
  return text_.GetNoArena();
}
void CMsgNotifyWatchdog::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgNotifyWatchdog.text)
}
#if LANG_CXX11
void CMsgNotifyWatchdog::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgNotifyWatchdog.text)
}
#endif
void CMsgNotifyWatchdog::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgNotifyWatchdog.text)
}
void CMsgNotifyWatchdog::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgNotifyWatchdog.text)
}
::std::string* CMsgNotifyWatchdog::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgNotifyWatchdog.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgNotifyWatchdog::release_text() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgNotifyWatchdog.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgNotifyWatchdog::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgNotifyWatchdog.text)
}

// optional string recipient = 12;
bool CMsgNotifyWatchdog::has_recipient() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgNotifyWatchdog::set_has_recipient() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgNotifyWatchdog::clear_has_recipient() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgNotifyWatchdog::clear_recipient() {
  recipient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recipient();
}
const ::std::string& CMsgNotifyWatchdog::recipient() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgNotifyWatchdog.recipient)
  return recipient_.GetNoArena();
}
void CMsgNotifyWatchdog::set_recipient(const ::std::string& value) {
  set_has_recipient();
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgNotifyWatchdog.recipient)
}
#if LANG_CXX11
void CMsgNotifyWatchdog::set_recipient(::std::string&& value) {
  set_has_recipient();
  recipient_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgNotifyWatchdog.recipient)
}
#endif
void CMsgNotifyWatchdog::set_recipient(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_recipient();
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgNotifyWatchdog.recipient)
}
void CMsgNotifyWatchdog::set_recipient(const char* value, size_t size) {
  set_has_recipient();
  recipient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgNotifyWatchdog.recipient)
}
::std::string* CMsgNotifyWatchdog::mutable_recipient() {
  set_has_recipient();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgNotifyWatchdog.recipient)
  return recipient_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgNotifyWatchdog::release_recipient() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgNotifyWatchdog.recipient)
  clear_has_recipient();
  return recipient_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgNotifyWatchdog::set_allocated_recipient(::std::string* recipient) {
  if (recipient != NULL) {
    set_has_recipient();
  } else {
    clear_has_recipient();
  }
  recipient_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recipient);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgNotifyWatchdog.recipient)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMGetLicenses::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMGetLicenses::CMsgAMGetLicenses()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMGetLicenses)
}
CMsgAMGetLicenses::CMsgAMGetLicenses(const CMsgAMGetLicenses& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMGetLicenses)
}

void CMsgAMGetLicenses::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
}

CMsgAMGetLicenses::~CMsgAMGetLicenses() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMGetLicenses)
  SharedDtor();
}

void CMsgAMGetLicenses::SharedDtor() {
}

void CMsgAMGetLicenses::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMGetLicenses::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAMGetLicenses& CMsgAMGetLicenses::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAMGetLicenses* CMsgAMGetLicenses::New(::google::protobuf::Arena* arena) const {
  CMsgAMGetLicenses* n = new CMsgAMGetLicenses;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAMGetLicenses::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMGetLicenses)
  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAMGetLicenses::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMGetLicenses)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMGetLicenses)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMGetLicenses)
  return false;
#undef DO_
}

void CMsgAMGetLicenses::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMGetLicenses)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMGetLicenses)
}

::google::protobuf::uint8* CMsgAMGetLicenses::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMGetLicenses)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMGetLicenses)
  return target;
}

size_t CMsgAMGetLicenses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMGetLicenses)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMGetLicenses::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMGetLicenses)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMGetLicenses* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAMGetLicenses>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMGetLicenses)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMGetLicenses)
    MergeFrom(*source);
  }
}

void CMsgAMGetLicenses::MergeFrom(const CMsgAMGetLicenses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMGetLicenses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CMsgAMGetLicenses::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMGetLicenses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGetLicenses::CopyFrom(const CMsgAMGetLicenses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMGetLicenses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetLicenses::IsInitialized() const {
  return true;
}

void CMsgAMGetLicenses::Swap(CMsgAMGetLicenses* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMGetLicenses::InternalSwap(CMsgAMGetLicenses* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAMGetLicenses::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAMGetLicenses

// optional fixed64 steamid = 1;
bool CMsgAMGetLicenses::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAMGetLicenses::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAMGetLicenses::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAMGetLicenses::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgAMGetLicenses::steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGetLicenses.steamid)
  return steamid_;
}
void CMsgAMGetLicenses::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGetLicenses.steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPackageLicense::kPackageIdFieldNumber;
const int CMsgPackageLicense::kTimeCreatedFieldNumber;
const int CMsgPackageLicense::kOwnerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPackageLicense::CMsgPackageLicense()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPackageLicense)
}
CMsgPackageLicense::CMsgPackageLicense(const CMsgPackageLicense& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&package_id_, &from.package_id_,
    reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&package_id_) + sizeof(owner_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPackageLicense)
}

void CMsgPackageLicense::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&package_id_, 0, reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&package_id_) + sizeof(owner_id_));
}

CMsgPackageLicense::~CMsgPackageLicense() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPackageLicense)
  SharedDtor();
}

void CMsgPackageLicense::SharedDtor() {
}

void CMsgPackageLicense::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPackageLicense::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPackageLicense& CMsgPackageLicense::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPackageLicense* CMsgPackageLicense::New(::google::protobuf::Arena* arena) const {
  CMsgPackageLicense* n = new CMsgPackageLicense;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPackageLicense::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPackageLicense)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&package_id_, 0, reinterpret_cast<char*>(&owner_id_) -
      reinterpret_cast<char*>(&package_id_) + sizeof(owner_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPackageLicense::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPackageLicense)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 package_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_package_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_time_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_owner_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPackageLicense)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPackageLicense)
  return false;
#undef DO_
}

void CMsgPackageLicense::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPackageLicense)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->package_id(), output);
  }

  // optional uint32 time_created = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_created(), output);
  }

  // optional uint32 owner_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->owner_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPackageLicense)
}

::google::protobuf::uint8* CMsgPackageLicense::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPackageLicense)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->package_id(), target);
  }

  // optional uint32 time_created = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_created(), target);
  }

  // optional uint32 owner_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->owner_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPackageLicense)
  return target;
}

size_t CMsgPackageLicense::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPackageLicense)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 package_id = 1;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_id());
    }

    // optional uint32 time_created = 2;
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional uint32 owner_id = 3;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPackageLicense::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPackageLicense)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPackageLicense* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPackageLicense>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPackageLicense)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPackageLicense)
    MergeFrom(*source);
  }
}

void CMsgPackageLicense::MergeFrom(const CMsgPackageLicense& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPackageLicense)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      package_id_ = from.package_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_id_ = from.owner_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPackageLicense::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPackageLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPackageLicense::CopyFrom(const CMsgPackageLicense& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPackageLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPackageLicense::IsInitialized() const {
  return true;
}

void CMsgPackageLicense::Swap(CMsgPackageLicense* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPackageLicense::InternalSwap(CMsgPackageLicense* other) {
  std::swap(package_id_, other->package_id_);
  std::swap(time_created_, other->time_created_);
  std::swap(owner_id_, other->owner_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPackageLicense::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPackageLicense

// optional uint32 package_id = 1;
bool CMsgPackageLicense::has_package_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPackageLicense::set_has_package_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPackageLicense::clear_has_package_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPackageLicense::clear_package_id() {
  package_id_ = 0u;
  clear_has_package_id();
}
::google::protobuf::uint32 CMsgPackageLicense::package_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPackageLicense.package_id)
  return package_id_;
}
void CMsgPackageLicense::set_package_id(::google::protobuf::uint32 value) {
  set_has_package_id();
  package_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPackageLicense.package_id)
}

// optional uint32 time_created = 2;
bool CMsgPackageLicense::has_time_created() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPackageLicense::set_has_time_created() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPackageLicense::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPackageLicense::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
::google::protobuf::uint32 CMsgPackageLicense::time_created() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPackageLicense.time_created)
  return time_created_;
}
void CMsgPackageLicense::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPackageLicense.time_created)
}

// optional uint32 owner_id = 3;
bool CMsgPackageLicense::has_owner_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgPackageLicense::set_has_owner_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgPackageLicense::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgPackageLicense::clear_owner_id() {
  owner_id_ = 0u;
  clear_has_owner_id();
}
::google::protobuf::uint32 CMsgPackageLicense::owner_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPackageLicense.owner_id)
  return owner_id_;
}
void CMsgPackageLicense::set_owner_id(::google::protobuf::uint32 value) {
  set_has_owner_id();
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPackageLicense.owner_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMGetLicensesResponse::kLicenseFieldNumber;
const int CMsgAMGetLicensesResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMGetLicensesResponse::CMsgAMGetLicensesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMGetLicensesResponse)
}
CMsgAMGetLicensesResponse::CMsgAMGetLicensesResponse(const CMsgAMGetLicensesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      license_(from.license_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMGetLicensesResponse)
}

void CMsgAMGetLicensesResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
}

CMsgAMGetLicensesResponse::~CMsgAMGetLicensesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMGetLicensesResponse)
  SharedDtor();
}

void CMsgAMGetLicensesResponse::SharedDtor() {
}

void CMsgAMGetLicensesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMGetLicensesResponse::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAMGetLicensesResponse& CMsgAMGetLicensesResponse::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAMGetLicensesResponse* CMsgAMGetLicensesResponse::New(::google::protobuf::Arena* arena) const {
  CMsgAMGetLicensesResponse* n = new CMsgAMGetLicensesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAMGetLicensesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMGetLicensesResponse)
  license_.Clear();
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAMGetLicensesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMGetLicensesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgPackageLicense license = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_license()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMGetLicensesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMGetLicensesResponse)
  return false;
#undef DO_
}

void CMsgAMGetLicensesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMGetLicensesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPackageLicense license = 1;
  for (unsigned int i = 0, n = this->license_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->license(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMGetLicensesResponse)
}

::google::protobuf::uint8* CMsgAMGetLicensesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMGetLicensesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPackageLicense license = 1;
  for (unsigned int i = 0, n = this->license_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->license(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMGetLicensesResponse)
  return target;
}

size_t CMsgAMGetLicensesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMGetLicensesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgPackageLicense license = 1;
  {
    unsigned int count = this->license_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->license(i));
    }
  }

  // optional uint32 result = 2;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMGetLicensesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMGetLicensesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMGetLicensesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAMGetLicensesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMGetLicensesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMGetLicensesResponse)
    MergeFrom(*source);
  }
}

void CMsgAMGetLicensesResponse::MergeFrom(const CMsgAMGetLicensesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMGetLicensesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  license_.MergeFrom(from.license_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgAMGetLicensesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMGetLicensesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGetLicensesResponse::CopyFrom(const CMsgAMGetLicensesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMGetLicensesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetLicensesResponse::IsInitialized() const {
  return true;
}

void CMsgAMGetLicensesResponse::Swap(CMsgAMGetLicensesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMGetLicensesResponse::InternalSwap(CMsgAMGetLicensesResponse* other) {
  license_.InternalSwap(&other->license_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAMGetLicensesResponse::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAMGetLicensesResponse

// repeated .proto.dota.CMsgPackageLicense license = 1;
int CMsgAMGetLicensesResponse::license_size() const {
  return license_.size();
}
void CMsgAMGetLicensesResponse::clear_license() {
  license_.Clear();
}
const ::proto::dota::CMsgPackageLicense& CMsgAMGetLicensesResponse::license(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGetLicensesResponse.license)
  return license_.Get(index);
}
::proto::dota::CMsgPackageLicense* CMsgAMGetLicensesResponse::mutable_license(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgAMGetLicensesResponse.license)
  return license_.Mutable(index);
}
::proto::dota::CMsgPackageLicense* CMsgAMGetLicensesResponse::add_license() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgAMGetLicensesResponse.license)
  return license_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPackageLicense >*
CMsgAMGetLicensesResponse::mutable_license() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgAMGetLicensesResponse.license)
  return &license_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPackageLicense >&
CMsgAMGetLicensesResponse::license() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgAMGetLicensesResponse.license)
  return license_;
}

// optional uint32 result = 2;
bool CMsgAMGetLicensesResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAMGetLicensesResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAMGetLicensesResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAMGetLicensesResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 CMsgAMGetLicensesResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGetLicensesResponse.result)
  return result_;
}
void CMsgAMGetLicensesResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGetLicensesResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMGetUserGameStats::kSteamIdFieldNumber;
const int CMsgAMGetUserGameStats::kGameIdFieldNumber;
const int CMsgAMGetUserGameStats::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMGetUserGameStats::CMsgAMGetUserGameStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMGetUserGameStats)
}
CMsgAMGetUserGameStats::CMsgAMGetUserGameStats(const CMsgAMGetUserGameStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMGetUserGameStats)
}

void CMsgAMGetUserGameStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(game_id_));
}

CMsgAMGetUserGameStats::~CMsgAMGetUserGameStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMGetUserGameStats)
  SharedDtor();
}

void CMsgAMGetUserGameStats::SharedDtor() {
}

void CMsgAMGetUserGameStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMGetUserGameStats::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAMGetUserGameStats& CMsgAMGetUserGameStats::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAMGetUserGameStats* CMsgAMGetUserGameStats::New(::google::protobuf::Arena* arena) const {
  CMsgAMGetUserGameStats* n = new CMsgAMGetUserGameStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAMGetUserGameStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMGetUserGameStats)
  stats_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(game_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAMGetUserGameStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMGetUserGameStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 stats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_stats())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stats())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMGetUserGameStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMGetUserGameStats)
  return false;
#undef DO_
}

void CMsgAMGetUserGameStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMGetUserGameStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->game_id(), output);
  }

  // repeated uint32 stats = 3;
  for (int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMGetUserGameStats)
}

::google::protobuf::uint8* CMsgAMGetUserGameStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMGetUserGameStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->game_id(), target);
  }

  // repeated uint32 stats = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->stats_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMGetUserGameStats)
  return target;
}

size_t CMsgAMGetUserGameStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMGetUserGameStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 stats = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->stats_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->stats_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 2;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMGetUserGameStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMGetUserGameStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMGetUserGameStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAMGetUserGameStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMGetUserGameStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMGetUserGameStats)
    MergeFrom(*source);
  }
}

void CMsgAMGetUserGameStats::MergeFrom(const CMsgAMGetUserGameStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMGetUserGameStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMGetUserGameStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMGetUserGameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGetUserGameStats::CopyFrom(const CMsgAMGetUserGameStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMGetUserGameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStats::IsInitialized() const {
  return true;
}

void CMsgAMGetUserGameStats::Swap(CMsgAMGetUserGameStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMGetUserGameStats::InternalSwap(CMsgAMGetUserGameStats* other) {
  stats_.InternalSwap(&other->stats_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(game_id_, other->game_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAMGetUserGameStats::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAMGetUserGameStats

// optional fixed64 steam_id = 1;
bool CMsgAMGetUserGameStats::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAMGetUserGameStats::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAMGetUserGameStats::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAMGetUserGameStats::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgAMGetUserGameStats::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGetUserGameStats.steam_id)
  return steam_id_;
}
void CMsgAMGetUserGameStats::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGetUserGameStats.steam_id)
}

// optional fixed64 game_id = 2;
bool CMsgAMGetUserGameStats::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgAMGetUserGameStats::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgAMGetUserGameStats::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgAMGetUserGameStats::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
::google::protobuf::uint64 CMsgAMGetUserGameStats::game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGetUserGameStats.game_id)
  return game_id_;
}
void CMsgAMGetUserGameStats::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGetUserGameStats.game_id)
}

// repeated uint32 stats = 3;
int CMsgAMGetUserGameStats::stats_size() const {
  return stats_.size();
}
void CMsgAMGetUserGameStats::clear_stats() {
  stats_.Clear();
}
::google::protobuf::uint32 CMsgAMGetUserGameStats::stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGetUserGameStats.stats)
  return stats_.Get(index);
}
void CMsgAMGetUserGameStats::set_stats(int index, ::google::protobuf::uint32 value) {
  stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGetUserGameStats.stats)
}
void CMsgAMGetUserGameStats::add_stats(::google::protobuf::uint32 value) {
  stats_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgAMGetUserGameStats.stats)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgAMGetUserGameStats::stats() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgAMGetUserGameStats.stats)
  return stats_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgAMGetUserGameStats::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgAMGetUserGameStats.stats)
  return &stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMGetUserGameStatsResponse_Stats::kStatIdFieldNumber;
const int CMsgAMGetUserGameStatsResponse_Stats::kStatValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMGetUserGameStatsResponse_Stats::CMsgAMGetUserGameStatsResponse_Stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
}
CMsgAMGetUserGameStatsResponse_Stats::CMsgAMGetUserGameStatsResponse_Stats(const CMsgAMGetUserGameStatsResponse_Stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stat_id_, &from.stat_id_,
    reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_) + sizeof(stat_value_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
}

void CMsgAMGetUserGameStatsResponse_Stats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stat_id_, 0, reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_) + sizeof(stat_value_));
}

CMsgAMGetUserGameStatsResponse_Stats::~CMsgAMGetUserGameStatsResponse_Stats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  SharedDtor();
}

void CMsgAMGetUserGameStatsResponse_Stats::SharedDtor() {
}

void CMsgAMGetUserGameStatsResponse_Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMGetUserGameStatsResponse_Stats::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAMGetUserGameStatsResponse_Stats& CMsgAMGetUserGameStatsResponse_Stats::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAMGetUserGameStatsResponse_Stats* CMsgAMGetUserGameStatsResponse_Stats::New(::google::protobuf::Arena* arena) const {
  CMsgAMGetUserGameStatsResponse_Stats* n = new CMsgAMGetUserGameStatsResponse_Stats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAMGetUserGameStatsResponse_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&stat_id_, 0, reinterpret_cast<char*>(&stat_value_) -
      reinterpret_cast<char*>(&stat_id_) + sizeof(stat_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAMGetUserGameStatsResponse_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_stat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stat_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_stat_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  return false;
#undef DO_
}

void CMsgAMGetUserGameStatsResponse_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat_id(), output);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
}

::google::protobuf::uint8* CMsgAMGetUserGameStatsResponse_Stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stat_id(), target);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  return target;
}

size_t CMsgAMGetUserGameStatsResponse_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 stat_id = 1;
    if (has_stat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_id());
    }

    // optional uint32 stat_value = 2;
    if (has_stat_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMGetUserGameStatsResponse_Stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMGetUserGameStatsResponse_Stats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAMGetUserGameStatsResponse_Stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
    MergeFrom(*source);
  }
}

void CMsgAMGetUserGameStatsResponse_Stats::MergeFrom(const CMsgAMGetUserGameStatsResponse_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      stat_id_ = from.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_value_ = from.stat_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMGetUserGameStatsResponse_Stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGetUserGameStatsResponse_Stats::CopyFrom(const CMsgAMGetUserGameStatsResponse_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMGetUserGameStatsResponse.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStatsResponse_Stats::IsInitialized() const {
  return true;
}

void CMsgAMGetUserGameStatsResponse_Stats::Swap(CMsgAMGetUserGameStatsResponse_Stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMGetUserGameStatsResponse_Stats::InternalSwap(CMsgAMGetUserGameStatsResponse_Stats* other) {
  std::swap(stat_id_, other->stat_id_);
  std::swap(stat_value_, other->stat_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAMGetUserGameStatsResponse_Stats::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAMGetUserGameStatsResponse_Stats

// optional uint32 stat_id = 1;
bool CMsgAMGetUserGameStatsResponse_Stats::has_stat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAMGetUserGameStatsResponse_Stats::set_has_stat_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAMGetUserGameStatsResponse_Stats::clear_has_stat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAMGetUserGameStatsResponse_Stats::clear_stat_id() {
  stat_id_ = 0u;
  clear_has_stat_id();
}
::google::protobuf::uint32 CMsgAMGetUserGameStatsResponse_Stats::stat_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGetUserGameStatsResponse.Stats.stat_id)
  return stat_id_;
}
void CMsgAMGetUserGameStatsResponse_Stats::set_stat_id(::google::protobuf::uint32 value) {
  set_has_stat_id();
  stat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGetUserGameStatsResponse.Stats.stat_id)
}

// optional uint32 stat_value = 2;
bool CMsgAMGetUserGameStatsResponse_Stats::has_stat_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgAMGetUserGameStatsResponse_Stats::set_has_stat_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgAMGetUserGameStatsResponse_Stats::clear_has_stat_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgAMGetUserGameStatsResponse_Stats::clear_stat_value() {
  stat_value_ = 0u;
  clear_has_stat_value();
}
::google::protobuf::uint32 CMsgAMGetUserGameStatsResponse_Stats::stat_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGetUserGameStatsResponse.Stats.stat_value)
  return stat_value_;
}
void CMsgAMGetUserGameStatsResponse_Stats::set_stat_value(::google::protobuf::uint32 value) {
  set_has_stat_value();
  stat_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGetUserGameStatsResponse.Stats.stat_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMGetUserGameStatsResponse_Achievement_Blocks::kAchievementIdFieldNumber;
const int CMsgAMGetUserGameStatsResponse_Achievement_Blocks::kAchievementBitIdFieldNumber;
const int CMsgAMGetUserGameStatsResponse_Achievement_Blocks::kUnlockTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CMsgAMGetUserGameStatsResponse_Achievement_Blocks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
}
CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CMsgAMGetUserGameStatsResponse_Achievement_Blocks(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&achievement_id_, &from.achievement_id_,
    reinterpret_cast<char*>(&unlock_time_) -
    reinterpret_cast<char*>(&achievement_id_) + sizeof(unlock_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&achievement_id_, 0, reinterpret_cast<char*>(&unlock_time_) -
    reinterpret_cast<char*>(&achievement_id_) + sizeof(unlock_time_));
}

CMsgAMGetUserGameStatsResponse_Achievement_Blocks::~CMsgAMGetUserGameStatsResponse_Achievement_Blocks() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  SharedDtor();
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SharedDtor() {
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMGetUserGameStatsResponse_Achievement_Blocks::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& CMsgAMGetUserGameStatsResponse_Achievement_Blocks::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAMGetUserGameStatsResponse_Achievement_Blocks* CMsgAMGetUserGameStatsResponse_Achievement_Blocks::New(::google::protobuf::Arena* arena) const {
  CMsgAMGetUserGameStatsResponse_Achievement_Blocks* n = new CMsgAMGetUserGameStatsResponse_Achievement_Blocks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&achievement_id_, 0, reinterpret_cast<char*>(&unlock_time_) -
      reinterpret_cast<char*>(&achievement_id_) + sizeof(unlock_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 achievement_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_achievement_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 achievement_bit_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_achievement_bit_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_bit_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 unlock_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_unlock_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &unlock_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  return false;
#undef DO_
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 achievement_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achievement_id(), output);
  }

  // optional uint32 achievement_bit_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->achievement_bit_id(), output);
  }

  // optional fixed32 unlock_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->unlock_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
}

::google::protobuf::uint8* CMsgAMGetUserGameStatsResponse_Achievement_Blocks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 achievement_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achievement_id(), target);
  }

  // optional uint32 achievement_bit_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->achievement_bit_id(), target);
  }

  // optional fixed32 unlock_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->unlock_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  return target;
}

size_t CMsgAMGetUserGameStatsResponse_Achievement_Blocks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 achievement_id = 1;
    if (has_achievement_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievement_id());
    }

    // optional uint32 achievement_bit_id = 2;
    if (has_achievement_bit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievement_bit_id());
    }

    // optional fixed32 unlock_time = 3;
    if (has_unlock_time()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMGetUserGameStatsResponse_Achievement_Blocks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAMGetUserGameStatsResponse_Achievement_Blocks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
    MergeFrom(*source);
  }
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::MergeFrom(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      achievement_id_ = from.achievement_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      achievement_bit_id_ = from.achievement_bit_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      unlock_time_ = from.unlock_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CopyFrom(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::IsInitialized() const {
  return true;
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::Swap(CMsgAMGetUserGameStatsResponse_Achievement_Blocks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::InternalSwap(CMsgAMGetUserGameStatsResponse_Achievement_Blocks* other) {
  std::swap(achievement_id_, other->achievement_id_);
  std::swap(achievement_bit_id_, other->achievement_bit_id_);
  std::swap(unlock_time_, other->unlock_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAMGetUserGameStatsResponse_Achievement_Blocks::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAMGetUserGameStatsResponse_Achievement_Blocks

// optional uint32 achievement_id = 1;
bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::has_achievement_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::set_has_achievement_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::clear_has_achievement_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::clear_achievement_id() {
  achievement_id_ = 0u;
  clear_has_achievement_id();
}
::google::protobuf::uint32 CMsgAMGetUserGameStatsResponse_Achievement_Blocks::achievement_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks.achievement_id)
  return achievement_id_;
}
void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::set_achievement_id(::google::protobuf::uint32 value) {
  set_has_achievement_id();
  achievement_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks.achievement_id)
}

// optional uint32 achievement_bit_id = 2;
bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::has_achievement_bit_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::set_has_achievement_bit_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::clear_has_achievement_bit_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::clear_achievement_bit_id() {
  achievement_bit_id_ = 0u;
  clear_has_achievement_bit_id();
}
::google::protobuf::uint32 CMsgAMGetUserGameStatsResponse_Achievement_Blocks::achievement_bit_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks.achievement_bit_id)
  return achievement_bit_id_;
}
void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::set_achievement_bit_id(::google::protobuf::uint32 value) {
  set_has_achievement_bit_id();
  achievement_bit_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks.achievement_bit_id)
}

// optional fixed32 unlock_time = 3;
bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::has_unlock_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::set_has_unlock_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::clear_has_unlock_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::clear_unlock_time() {
  unlock_time_ = 0u;
  clear_has_unlock_time();
}
::google::protobuf::uint32 CMsgAMGetUserGameStatsResponse_Achievement_Blocks::unlock_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks.unlock_time)
  return unlock_time_;
}
void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::set_unlock_time(::google::protobuf::uint32 value) {
  set_has_unlock_time();
  unlock_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks.unlock_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMGetUserGameStatsResponse::kSteamIdFieldNumber;
const int CMsgAMGetUserGameStatsResponse::kGameIdFieldNumber;
const int CMsgAMGetUserGameStatsResponse::kEresultFieldNumber;
const int CMsgAMGetUserGameStatsResponse::kStatsFieldNumber;
const int CMsgAMGetUserGameStatsResponse::kAchievementBlocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMGetUserGameStatsResponse::CMsgAMGetUserGameStatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMGetUserGameStatsResponse)
}
CMsgAMGetUserGameStatsResponse::CMsgAMGetUserGameStatsResponse(const CMsgAMGetUserGameStatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stats_(from.stats_),
      achievement_blocks_(from.achievement_blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMGetUserGameStatsResponse)
}

void CMsgAMGetUserGameStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(game_id_));
  eresult_ = 2;
}

CMsgAMGetUserGameStatsResponse::~CMsgAMGetUserGameStatsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMGetUserGameStatsResponse)
  SharedDtor();
}

void CMsgAMGetUserGameStatsResponse::SharedDtor() {
}

void CMsgAMGetUserGameStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMGetUserGameStatsResponse::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAMGetUserGameStatsResponse& CMsgAMGetUserGameStatsResponse::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAMGetUserGameStatsResponse* CMsgAMGetUserGameStatsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgAMGetUserGameStatsResponse* n = new CMsgAMGetUserGameStatsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAMGetUserGameStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMGetUserGameStatsResponse)
  stats_.Clear();
  achievement_blocks_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(game_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAMGetUserGameStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMGetUserGameStatsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Stats stats = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievement_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMGetUserGameStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMGetUserGameStatsResponse)
  return false;
#undef DO_
}

void CMsgAMGetUserGameStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMGetUserGameStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->game_id(), output);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eresult(), output);
  }

  // repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Stats stats = 4;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stats(i), output);
  }

  // repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
  for (unsigned int i = 0, n = this->achievement_blocks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->achievement_blocks(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMGetUserGameStatsResponse)
}

::google::protobuf::uint8* CMsgAMGetUserGameStatsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMGetUserGameStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->game_id(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->eresult(), target);
  }

  // repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Stats stats = 4;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->stats(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
  for (unsigned int i = 0, n = this->achievement_blocks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->achievement_blocks(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMGetUserGameStatsResponse)
  return target;
}

size_t CMsgAMGetUserGameStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMGetUserGameStatsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Stats stats = 4;
  {
    unsigned int count = this->stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats(i));
    }
  }

  // repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
  {
    unsigned int count = this->achievement_blocks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achievement_blocks(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 2;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 3 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMGetUserGameStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMGetUserGameStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMGetUserGameStatsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAMGetUserGameStatsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMGetUserGameStatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMGetUserGameStatsResponse)
    MergeFrom(*source);
  }
}

void CMsgAMGetUserGameStatsResponse::MergeFrom(const CMsgAMGetUserGameStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMGetUserGameStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  achievement_blocks_.MergeFrom(from.achievement_blocks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMGetUserGameStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMGetUserGameStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGetUserGameStatsResponse::CopyFrom(const CMsgAMGetUserGameStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMGetUserGameStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStatsResponse::IsInitialized() const {
  return true;
}

void CMsgAMGetUserGameStatsResponse::Swap(CMsgAMGetUserGameStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMGetUserGameStatsResponse::InternalSwap(CMsgAMGetUserGameStatsResponse* other) {
  stats_.InternalSwap(&other->stats_);
  achievement_blocks_.InternalSwap(&other->achievement_blocks_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(game_id_, other->game_id_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAMGetUserGameStatsResponse::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAMGetUserGameStatsResponse

// optional fixed64 steam_id = 1;
bool CMsgAMGetUserGameStatsResponse::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAMGetUserGameStatsResponse::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAMGetUserGameStatsResponse::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAMGetUserGameStatsResponse::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgAMGetUserGameStatsResponse::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGetUserGameStatsResponse.steam_id)
  return steam_id_;
}
void CMsgAMGetUserGameStatsResponse::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGetUserGameStatsResponse.steam_id)
}

// optional fixed64 game_id = 2;
bool CMsgAMGetUserGameStatsResponse::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgAMGetUserGameStatsResponse::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgAMGetUserGameStatsResponse::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgAMGetUserGameStatsResponse::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
::google::protobuf::uint64 CMsgAMGetUserGameStatsResponse::game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGetUserGameStatsResponse.game_id)
  return game_id_;
}
void CMsgAMGetUserGameStatsResponse::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGetUserGameStatsResponse.game_id)
}

// optional int32 eresult = 3 [default = 2];
bool CMsgAMGetUserGameStatsResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgAMGetUserGameStatsResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgAMGetUserGameStatsResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgAMGetUserGameStatsResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgAMGetUserGameStatsResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGetUserGameStatsResponse.eresult)
  return eresult_;
}
void CMsgAMGetUserGameStatsResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGetUserGameStatsResponse.eresult)
}

// repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Stats stats = 4;
int CMsgAMGetUserGameStatsResponse::stats_size() const {
  return stats_.size();
}
void CMsgAMGetUserGameStatsResponse::clear_stats() {
  stats_.Clear();
}
const ::proto::dota::CMsgAMGetUserGameStatsResponse_Stats& CMsgAMGetUserGameStatsResponse::stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGetUserGameStatsResponse.stats)
  return stats_.Get(index);
}
::proto::dota::CMsgAMGetUserGameStatsResponse_Stats* CMsgAMGetUserGameStatsResponse::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgAMGetUserGameStatsResponse.stats)
  return stats_.Mutable(index);
}
::proto::dota::CMsgAMGetUserGameStatsResponse_Stats* CMsgAMGetUserGameStatsResponse::add_stats() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgAMGetUserGameStatsResponse.stats)
  return stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgAMGetUserGameStatsResponse_Stats >*
CMsgAMGetUserGameStatsResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgAMGetUserGameStatsResponse.stats)
  return &stats_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgAMGetUserGameStatsResponse_Stats >&
CMsgAMGetUserGameStatsResponse::stats() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgAMGetUserGameStatsResponse.stats)
  return stats_;
}

// repeated .proto.dota.CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
int CMsgAMGetUserGameStatsResponse::achievement_blocks_size() const {
  return achievement_blocks_.size();
}
void CMsgAMGetUserGameStatsResponse::clear_achievement_blocks() {
  achievement_blocks_.Clear();
}
const ::proto::dota::CMsgAMGetUserGameStatsResponse_Achievement_Blocks& CMsgAMGetUserGameStatsResponse::achievement_blocks(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGetUserGameStatsResponse.achievement_blocks)
  return achievement_blocks_.Get(index);
}
::proto::dota::CMsgAMGetUserGameStatsResponse_Achievement_Blocks* CMsgAMGetUserGameStatsResponse::mutable_achievement_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgAMGetUserGameStatsResponse.achievement_blocks)
  return achievement_blocks_.Mutable(index);
}
::proto::dota::CMsgAMGetUserGameStatsResponse_Achievement_Blocks* CMsgAMGetUserGameStatsResponse::add_achievement_blocks() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgAMGetUserGameStatsResponse.achievement_blocks)
  return achievement_blocks_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgAMGetUserGameStatsResponse_Achievement_Blocks >*
CMsgAMGetUserGameStatsResponse::mutable_achievement_blocks() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgAMGetUserGameStatsResponse.achievement_blocks)
  return &achievement_blocks_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgAMGetUserGameStatsResponse_Achievement_Blocks >&
CMsgAMGetUserGameStatsResponse::achievement_blocks() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgAMGetUserGameStatsResponse.achievement_blocks)
  return achievement_blocks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetCommandList::kAppIdFieldNumber;
const int CMsgGCGetCommandList::kCommandPrefixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetCommandList::CMsgGCGetCommandList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetCommandList)
}
CMsgGCGetCommandList::CMsgGCGetCommandList(const CMsgGCGetCommandList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  command_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_command_prefix()) {
    command_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_prefix_);
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetCommandList)
}

void CMsgGCGetCommandList::SharedCtor() {
  _cached_size_ = 0;
  command_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_ = 0u;
}

CMsgGCGetCommandList::~CMsgGCGetCommandList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetCommandList)
  SharedDtor();
}

void CMsgGCGetCommandList::SharedDtor() {
  command_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCGetCommandList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetCommandList::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCGetCommandList& CMsgGCGetCommandList::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCGetCommandList* CMsgGCGetCommandList::New(::google::protobuf::Arena* arena) const {
  CMsgGCGetCommandList* n = new CMsgGCGetCommandList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCGetCommandList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetCommandList)
  if (has_command_prefix()) {
    GOOGLE_DCHECK(!command_prefix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*command_prefix_.UnsafeRawStringPointer())->clear();
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCGetCommandList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetCommandList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string command_prefix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command_prefix().data(), this->command_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCGetCommandList.command_prefix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetCommandList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetCommandList)
  return false;
#undef DO_
}

void CMsgGCGetCommandList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetCommandList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string command_prefix = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command_prefix().data(), this->command_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCGetCommandList.command_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->command_prefix(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetCommandList)
}

::google::protobuf::uint8* CMsgGCGetCommandList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetCommandList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional string command_prefix = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command_prefix().data(), this->command_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCGetCommandList.command_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->command_prefix(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetCommandList)
  return target;
}

size_t CMsgGCGetCommandList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetCommandList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string command_prefix = 2;
    if (has_command_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command_prefix());
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetCommandList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetCommandList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetCommandList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCGetCommandList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetCommandList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetCommandList)
    MergeFrom(*source);
  }
}

void CMsgGCGetCommandList::MergeFrom(const CMsgGCGetCommandList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetCommandList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_command_prefix();
      command_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_prefix_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCGetCommandList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetCommandList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetCommandList::CopyFrom(const CMsgGCGetCommandList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetCommandList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetCommandList::IsInitialized() const {
  return true;
}

void CMsgGCGetCommandList::Swap(CMsgGCGetCommandList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetCommandList::InternalSwap(CMsgGCGetCommandList* other) {
  command_prefix_.Swap(&other->command_prefix_);
  std::swap(app_id_, other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCGetCommandList::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCGetCommandList

// optional uint32 app_id = 1;
bool CMsgGCGetCommandList::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCGetCommandList::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCGetCommandList::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCGetCommandList::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgGCGetCommandList::app_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetCommandList.app_id)
  return app_id_;
}
void CMsgGCGetCommandList::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetCommandList.app_id)
}

// optional string command_prefix = 2;
bool CMsgGCGetCommandList::has_command_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCGetCommandList::set_has_command_prefix() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCGetCommandList::clear_has_command_prefix() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCGetCommandList::clear_command_prefix() {
  command_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command_prefix();
}
const ::std::string& CMsgGCGetCommandList::command_prefix() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetCommandList.command_prefix)
  return command_prefix_.GetNoArena();
}
void CMsgGCGetCommandList::set_command_prefix(const ::std::string& value) {
  set_has_command_prefix();
  command_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetCommandList.command_prefix)
}
#if LANG_CXX11
void CMsgGCGetCommandList::set_command_prefix(::std::string&& value) {
  set_has_command_prefix();
  command_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCGetCommandList.command_prefix)
}
#endif
void CMsgGCGetCommandList::set_command_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_command_prefix();
  command_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCGetCommandList.command_prefix)
}
void CMsgGCGetCommandList::set_command_prefix(const char* value, size_t size) {
  set_has_command_prefix();
  command_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCGetCommandList.command_prefix)
}
::std::string* CMsgGCGetCommandList::mutable_command_prefix() {
  set_has_command_prefix();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCGetCommandList.command_prefix)
  return command_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCGetCommandList::release_command_prefix() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCGetCommandList.command_prefix)
  clear_has_command_prefix();
  return command_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCGetCommandList::set_allocated_command_prefix(::std::string* command_prefix) {
  if (command_prefix != NULL) {
    set_has_command_prefix();
  } else {
    clear_has_command_prefix();
  }
  command_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command_prefix);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCGetCommandList.command_prefix)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetCommandListResponse::kCommandNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetCommandListResponse::CMsgGCGetCommandListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetCommandListResponse)
}
CMsgGCGetCommandListResponse::CMsgGCGetCommandListResponse(const CMsgGCGetCommandListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      command_name_(from.command_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetCommandListResponse)
}

void CMsgGCGetCommandListResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCGetCommandListResponse::~CMsgGCGetCommandListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetCommandListResponse)
  SharedDtor();
}

void CMsgGCGetCommandListResponse::SharedDtor() {
}

void CMsgGCGetCommandListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetCommandListResponse::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCGetCommandListResponse& CMsgGCGetCommandListResponse::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCGetCommandListResponse* CMsgGCGetCommandListResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCGetCommandListResponse* n = new CMsgGCGetCommandListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCGetCommandListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetCommandListResponse)
  command_name_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCGetCommandListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetCommandListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string command_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_command_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command_name(this->command_name_size() - 1).data(),
            this->command_name(this->command_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCGetCommandListResponse.command_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetCommandListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetCommandListResponse)
  return false;
#undef DO_
}

void CMsgGCGetCommandListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetCommandListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string command_name = 1;
  for (int i = 0, n = this->command_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command_name(i).data(), this->command_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCGetCommandListResponse.command_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command_name(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetCommandListResponse)
}

::google::protobuf::uint8* CMsgGCGetCommandListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetCommandListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string command_name = 1;
  for (int i = 0, n = this->command_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command_name(i).data(), this->command_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCGetCommandListResponse.command_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->command_name(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetCommandListResponse)
  return target;
}

size_t CMsgGCGetCommandListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetCommandListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string command_name = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->command_name_size());
  for (int i = 0, n = this->command_name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->command_name(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetCommandListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetCommandListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetCommandListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCGetCommandListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetCommandListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetCommandListResponse)
    MergeFrom(*source);
  }
}

void CMsgGCGetCommandListResponse::MergeFrom(const CMsgGCGetCommandListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetCommandListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_name_.MergeFrom(from.command_name_);
}

void CMsgGCGetCommandListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetCommandListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetCommandListResponse::CopyFrom(const CMsgGCGetCommandListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetCommandListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetCommandListResponse::IsInitialized() const {
  return true;
}

void CMsgGCGetCommandListResponse::Swap(CMsgGCGetCommandListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetCommandListResponse::InternalSwap(CMsgGCGetCommandListResponse* other) {
  command_name_.InternalSwap(&other->command_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCGetCommandListResponse::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCGetCommandListResponse

// repeated string command_name = 1;
int CMsgGCGetCommandListResponse::command_name_size() const {
  return command_name_.size();
}
void CMsgGCGetCommandListResponse::clear_command_name() {
  command_name_.Clear();
}
const ::std::string& CMsgGCGetCommandListResponse::command_name(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetCommandListResponse.command_name)
  return command_name_.Get(index);
}
::std::string* CMsgGCGetCommandListResponse::mutable_command_name(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCGetCommandListResponse.command_name)
  return command_name_.Mutable(index);
}
void CMsgGCGetCommandListResponse::set_command_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetCommandListResponse.command_name)
  command_name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CMsgGCGetCommandListResponse::set_command_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetCommandListResponse.command_name)
  command_name_.Mutable(index)->assign(std::move(value));
}
#endif
void CMsgGCGetCommandListResponse::set_command_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  command_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCGetCommandListResponse.command_name)
}
void CMsgGCGetCommandListResponse::set_command_name(int index, const char* value, size_t size) {
  command_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCGetCommandListResponse.command_name)
}
::std::string* CMsgGCGetCommandListResponse::add_command_name() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CMsgGCGetCommandListResponse.command_name)
  return command_name_.Add();
}
void CMsgGCGetCommandListResponse::add_command_name(const ::std::string& value) {
  command_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCGetCommandListResponse.command_name)
}
#if LANG_CXX11
void CMsgGCGetCommandListResponse::add_command_name(::std::string&& value) {
  command_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCGetCommandListResponse.command_name)
}
#endif
void CMsgGCGetCommandListResponse::add_command_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  command_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CMsgGCGetCommandListResponse.command_name)
}
void CMsgGCGetCommandListResponse::add_command_name(const char* value, size_t size) {
  command_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CMsgGCGetCommandListResponse.command_name)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgGCGetCommandListResponse::command_name() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCGetCommandListResponse.command_name)
  return command_name_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgGCGetCommandListResponse::mutable_command_name() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCGetCommandListResponse.command_name)
  return &command_name_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgMemCachedGet::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgMemCachedGet::CGCMsgMemCachedGet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgMemCachedGet)
}
CGCMsgMemCachedGet::CGCMsgMemCachedGet(const CGCMsgMemCachedGet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgMemCachedGet)
}

void CGCMsgMemCachedGet::SharedCtor() {
  _cached_size_ = 0;
}

CGCMsgMemCachedGet::~CGCMsgMemCachedGet() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgMemCachedGet)
  SharedDtor();
}

void CGCMsgMemCachedGet::SharedDtor() {
}

void CGCMsgMemCachedGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgMemCachedGet::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgMemCachedGet& CGCMsgMemCachedGet::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCMsgMemCachedGet* CGCMsgMemCachedGet::New(::google::protobuf::Arena* arena) const {
  CGCMsgMemCachedGet* n = new CGCMsgMemCachedGet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgMemCachedGet::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgMemCachedGet)
  keys_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgMemCachedGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgMemCachedGet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keys(this->keys_size() - 1).data(),
            this->keys(this->keys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGCMsgMemCachedGet.keys");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgMemCachedGet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgMemCachedGet)
  return false;
#undef DO_
}

void CGCMsgMemCachedGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgMemCachedGet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keys(i).data(), this->keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCMsgMemCachedGet.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgMemCachedGet)
}

::google::protobuf::uint8* CGCMsgMemCachedGet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgMemCachedGet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keys(i).data(), this->keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCMsgMemCachedGet.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgMemCachedGet)
  return target;
}

size_t CGCMsgMemCachedGet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgMemCachedGet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgMemCachedGet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgMemCachedGet)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgMemCachedGet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgMemCachedGet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgMemCachedGet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgMemCachedGet)
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedGet::MergeFrom(const CGCMsgMemCachedGet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgMemCachedGet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
}

void CGCMsgMemCachedGet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgMemCachedGet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedGet::CopyFrom(const CGCMsgMemCachedGet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgMemCachedGet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedGet::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedGet::Swap(CGCMsgMemCachedGet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgMemCachedGet::InternalSwap(CGCMsgMemCachedGet* other) {
  keys_.InternalSwap(&other->keys_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgMemCachedGet::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCMsgMemCachedGet

// repeated string keys = 1;
int CGCMsgMemCachedGet::keys_size() const {
  return keys_.size();
}
void CGCMsgMemCachedGet::clear_keys() {
  keys_.Clear();
}
const ::std::string& CGCMsgMemCachedGet::keys(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedGet.keys)
  return keys_.Get(index);
}
::std::string* CGCMsgMemCachedGet::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCMsgMemCachedGet.keys)
  return keys_.Mutable(index);
}
void CGCMsgMemCachedGet::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedGet.keys)
  keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CGCMsgMemCachedGet::set_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedGet.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
#endif
void CGCMsgMemCachedGet::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CGCMsgMemCachedGet.keys)
}
void CGCMsgMemCachedGet::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGCMsgMemCachedGet.keys)
}
::std::string* CGCMsgMemCachedGet::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CGCMsgMemCachedGet.keys)
  return keys_.Add();
}
void CGCMsgMemCachedGet::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CGCMsgMemCachedGet.keys)
}
#if LANG_CXX11
void CGCMsgMemCachedGet::add_keys(::std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CGCMsgMemCachedGet.keys)
}
#endif
void CGCMsgMemCachedGet::add_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CGCMsgMemCachedGet.keys)
}
void CGCMsgMemCachedGet::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CGCMsgMemCachedGet.keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CGCMsgMemCachedGet::keys() const {
  // @@protoc_insertion_point(field_list:proto.dota.CGCMsgMemCachedGet.keys)
  return keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CGCMsgMemCachedGet::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CGCMsgMemCachedGet.keys)
  return &keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgMemCachedGetResponse_ValueTag::kFoundFieldNumber;
const int CGCMsgMemCachedGetResponse_ValueTag::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgMemCachedGetResponse_ValueTag::CGCMsgMemCachedGetResponse_ValueTag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
}
CGCMsgMemCachedGetResponse_ValueTag::CGCMsgMemCachedGetResponse_ValueTag(const CGCMsgMemCachedGetResponse_ValueTag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  found_ = from.found_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
}

void CGCMsgMemCachedGetResponse_ValueTag::SharedCtor() {
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  found_ = false;
}

CGCMsgMemCachedGetResponse_ValueTag::~CGCMsgMemCachedGetResponse_ValueTag() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  SharedDtor();
}

void CGCMsgMemCachedGetResponse_ValueTag::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgMemCachedGetResponse_ValueTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgMemCachedGetResponse_ValueTag::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgMemCachedGetResponse_ValueTag& CGCMsgMemCachedGetResponse_ValueTag::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCMsgMemCachedGetResponse_ValueTag* CGCMsgMemCachedGetResponse_ValueTag::New(::google::protobuf::Arena* arena) const {
  CGCMsgMemCachedGetResponse_ValueTag* n = new CGCMsgMemCachedGetResponse_ValueTag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgMemCachedGetResponse_ValueTag::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  if (has_value()) {
    GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*value_.UnsafeRawStringPointer())->clear();
  }
  found_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgMemCachedGetResponse_ValueTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool found = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_found();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &found_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  return false;
#undef DO_
}

void CGCMsgMemCachedGetResponse_ValueTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool found = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->found(), output);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
}

::google::protobuf::uint8* CGCMsgMemCachedGetResponse_ValueTag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool found = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->found(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  return target;
}

size_t CGCMsgMemCachedGetResponse_ValueTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional bool found = 1;
    if (has_found()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgMemCachedGetResponse_ValueTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgMemCachedGetResponse_ValueTag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgMemCachedGetResponse_ValueTag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedGetResponse_ValueTag::MergeFrom(const CGCMsgMemCachedGetResponse_ValueTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      found_ = from.found_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgMemCachedGetResponse_ValueTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedGetResponse_ValueTag::CopyFrom(const CGCMsgMemCachedGetResponse_ValueTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgMemCachedGetResponse.ValueTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedGetResponse_ValueTag::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedGetResponse_ValueTag::Swap(CGCMsgMemCachedGetResponse_ValueTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgMemCachedGetResponse_ValueTag::InternalSwap(CGCMsgMemCachedGetResponse_ValueTag* other) {
  value_.Swap(&other->value_);
  std::swap(found_, other->found_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgMemCachedGetResponse_ValueTag::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCMsgMemCachedGetResponse_ValueTag

// optional bool found = 1;
bool CGCMsgMemCachedGetResponse_ValueTag::has_found() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGCMsgMemCachedGetResponse_ValueTag::set_has_found() {
  _has_bits_[0] |= 0x00000002u;
}
void CGCMsgMemCachedGetResponse_ValueTag::clear_has_found() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGCMsgMemCachedGetResponse_ValueTag::clear_found() {
  found_ = false;
  clear_has_found();
}
bool CGCMsgMemCachedGetResponse_ValueTag::found() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedGetResponse.ValueTag.found)
  return found_;
}
void CGCMsgMemCachedGetResponse_ValueTag::set_found(bool value) {
  set_has_found();
  found_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedGetResponse.ValueTag.found)
}

// optional bytes value = 2;
bool CGCMsgMemCachedGetResponse_ValueTag::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCMsgMemCachedGetResponse_ValueTag::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCMsgMemCachedGetResponse_ValueTag::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCMsgMemCachedGetResponse_ValueTag::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CGCMsgMemCachedGetResponse_ValueTag::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedGetResponse.ValueTag.value)
  return value_.GetNoArena();
}
void CGCMsgMemCachedGetResponse_ValueTag::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedGetResponse.ValueTag.value)
}
#if LANG_CXX11
void CGCMsgMemCachedGetResponse_ValueTag::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGCMsgMemCachedGetResponse.ValueTag.value)
}
#endif
void CGCMsgMemCachedGetResponse_ValueTag::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGCMsgMemCachedGetResponse.ValueTag.value)
}
void CGCMsgMemCachedGetResponse_ValueTag::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGCMsgMemCachedGetResponse.ValueTag.value)
}
::std::string* CGCMsgMemCachedGetResponse_ValueTag::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCMsgMemCachedGetResponse.ValueTag.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGCMsgMemCachedGetResponse_ValueTag::release_value() {
  // @@protoc_insertion_point(field_release:proto.dota.CGCMsgMemCachedGetResponse.ValueTag.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGCMsgMemCachedGetResponse_ValueTag::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGCMsgMemCachedGetResponse.ValueTag.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgMemCachedGetResponse::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgMemCachedGetResponse::CGCMsgMemCachedGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgMemCachedGetResponse)
}
CGCMsgMemCachedGetResponse::CGCMsgMemCachedGetResponse(const CGCMsgMemCachedGetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgMemCachedGetResponse)
}

void CGCMsgMemCachedGetResponse::SharedCtor() {
  _cached_size_ = 0;
}

CGCMsgMemCachedGetResponse::~CGCMsgMemCachedGetResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgMemCachedGetResponse)
  SharedDtor();
}

void CGCMsgMemCachedGetResponse::SharedDtor() {
}

void CGCMsgMemCachedGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgMemCachedGetResponse::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgMemCachedGetResponse& CGCMsgMemCachedGetResponse::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCMsgMemCachedGetResponse* CGCMsgMemCachedGetResponse::New(::google::protobuf::Arena* arena) const {
  CGCMsgMemCachedGetResponse* n = new CGCMsgMemCachedGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgMemCachedGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgMemCachedGetResponse)
  values_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgMemCachedGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgMemCachedGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CGCMsgMemCachedGetResponse.ValueTag values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgMemCachedGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgMemCachedGetResponse)
  return false;
#undef DO_
}

void CGCMsgMemCachedGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgMemCachedGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CGCMsgMemCachedGetResponse.ValueTag values = 1;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgMemCachedGetResponse)
}

::google::protobuf::uint8* CGCMsgMemCachedGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgMemCachedGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CGCMsgMemCachedGetResponse.ValueTag values = 1;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->values(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgMemCachedGetResponse)
  return target;
}

size_t CGCMsgMemCachedGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgMemCachedGetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CGCMsgMemCachedGetResponse.ValueTag values = 1;
  {
    unsigned int count = this->values_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->values(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgMemCachedGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgMemCachedGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgMemCachedGetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgMemCachedGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgMemCachedGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgMemCachedGetResponse)
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedGetResponse::MergeFrom(const CGCMsgMemCachedGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgMemCachedGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void CGCMsgMemCachedGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgMemCachedGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedGetResponse::CopyFrom(const CGCMsgMemCachedGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgMemCachedGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedGetResponse::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedGetResponse::Swap(CGCMsgMemCachedGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgMemCachedGetResponse::InternalSwap(CGCMsgMemCachedGetResponse* other) {
  values_.InternalSwap(&other->values_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgMemCachedGetResponse::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCMsgMemCachedGetResponse

// repeated .proto.dota.CGCMsgMemCachedGetResponse.ValueTag values = 1;
int CGCMsgMemCachedGetResponse::values_size() const {
  return values_.size();
}
void CGCMsgMemCachedGetResponse::clear_values() {
  values_.Clear();
}
const ::proto::dota::CGCMsgMemCachedGetResponse_ValueTag& CGCMsgMemCachedGetResponse::values(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedGetResponse.values)
  return values_.Get(index);
}
::proto::dota::CGCMsgMemCachedGetResponse_ValueTag* CGCMsgMemCachedGetResponse::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCMsgMemCachedGetResponse.values)
  return values_.Mutable(index);
}
::proto::dota::CGCMsgMemCachedGetResponse_ValueTag* CGCMsgMemCachedGetResponse::add_values() {
  // @@protoc_insertion_point(field_add:proto.dota.CGCMsgMemCachedGetResponse.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CGCMsgMemCachedGetResponse_ValueTag >*
CGCMsgMemCachedGetResponse::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CGCMsgMemCachedGetResponse.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CGCMsgMemCachedGetResponse_ValueTag >&
CGCMsgMemCachedGetResponse::values() const {
  // @@protoc_insertion_point(field_list:proto.dota.CGCMsgMemCachedGetResponse.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgMemCachedSet_KeyPair::kNameFieldNumber;
const int CGCMsgMemCachedSet_KeyPair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgMemCachedSet_KeyPair::CGCMsgMemCachedSet_KeyPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgMemCachedSet.KeyPair)
}
CGCMsgMemCachedSet_KeyPair::CGCMsgMemCachedSet_KeyPair(const CGCMsgMemCachedSet_KeyPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgMemCachedSet.KeyPair)
}

void CGCMsgMemCachedSet_KeyPair::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CGCMsgMemCachedSet_KeyPair::~CGCMsgMemCachedSet_KeyPair() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgMemCachedSet.KeyPair)
  SharedDtor();
}

void CGCMsgMemCachedSet_KeyPair::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgMemCachedSet_KeyPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgMemCachedSet_KeyPair::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgMemCachedSet_KeyPair& CGCMsgMemCachedSet_KeyPair::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCMsgMemCachedSet_KeyPair* CGCMsgMemCachedSet_KeyPair::New(::google::protobuf::Arena* arena) const {
  CGCMsgMemCachedSet_KeyPair* n = new CGCMsgMemCachedSet_KeyPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgMemCachedSet_KeyPair::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgMemCachedSet.KeyPair)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgMemCachedSet_KeyPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgMemCachedSet.KeyPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGCMsgMemCachedSet.KeyPair.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgMemCachedSet.KeyPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgMemCachedSet.KeyPair)
  return false;
#undef DO_
}

void CGCMsgMemCachedSet_KeyPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgMemCachedSet.KeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCMsgMemCachedSet.KeyPair.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgMemCachedSet.KeyPair)
}

::google::protobuf::uint8* CGCMsgMemCachedSet_KeyPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgMemCachedSet.KeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCMsgMemCachedSet.KeyPair.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgMemCachedSet.KeyPair)
  return target;
}

size_t CGCMsgMemCachedSet_KeyPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgMemCachedSet.KeyPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgMemCachedSet_KeyPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgMemCachedSet.KeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgMemCachedSet_KeyPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgMemCachedSet_KeyPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgMemCachedSet.KeyPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgMemCachedSet.KeyPair)
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedSet_KeyPair::MergeFrom(const CGCMsgMemCachedSet_KeyPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgMemCachedSet.KeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CGCMsgMemCachedSet_KeyPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgMemCachedSet.KeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedSet_KeyPair::CopyFrom(const CGCMsgMemCachedSet_KeyPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgMemCachedSet.KeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedSet_KeyPair::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedSet_KeyPair::Swap(CGCMsgMemCachedSet_KeyPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgMemCachedSet_KeyPair::InternalSwap(CGCMsgMemCachedSet_KeyPair* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgMemCachedSet_KeyPair::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCMsgMemCachedSet_KeyPair

// optional string name = 1;
bool CGCMsgMemCachedSet_KeyPair::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCMsgMemCachedSet_KeyPair::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCMsgMemCachedSet_KeyPair::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCMsgMemCachedSet_KeyPair::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CGCMsgMemCachedSet_KeyPair::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedSet.KeyPair.name)
  return name_.GetNoArena();
}
void CGCMsgMemCachedSet_KeyPair::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedSet.KeyPair.name)
}
#if LANG_CXX11
void CGCMsgMemCachedSet_KeyPair::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGCMsgMemCachedSet.KeyPair.name)
}
#endif
void CGCMsgMemCachedSet_KeyPair::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGCMsgMemCachedSet.KeyPair.name)
}
void CGCMsgMemCachedSet_KeyPair::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGCMsgMemCachedSet.KeyPair.name)
}
::std::string* CGCMsgMemCachedSet_KeyPair::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCMsgMemCachedSet.KeyPair.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGCMsgMemCachedSet_KeyPair::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CGCMsgMemCachedSet.KeyPair.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGCMsgMemCachedSet_KeyPair::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGCMsgMemCachedSet.KeyPair.name)
}

// optional bytes value = 2;
bool CGCMsgMemCachedSet_KeyPair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGCMsgMemCachedSet_KeyPair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CGCMsgMemCachedSet_KeyPair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGCMsgMemCachedSet_KeyPair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CGCMsgMemCachedSet_KeyPair::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedSet.KeyPair.value)
  return value_.GetNoArena();
}
void CGCMsgMemCachedSet_KeyPair::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedSet.KeyPair.value)
}
#if LANG_CXX11
void CGCMsgMemCachedSet_KeyPair::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGCMsgMemCachedSet.KeyPair.value)
}
#endif
void CGCMsgMemCachedSet_KeyPair::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGCMsgMemCachedSet.KeyPair.value)
}
void CGCMsgMemCachedSet_KeyPair::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGCMsgMemCachedSet.KeyPair.value)
}
::std::string* CGCMsgMemCachedSet_KeyPair::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCMsgMemCachedSet.KeyPair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGCMsgMemCachedSet_KeyPair::release_value() {
  // @@protoc_insertion_point(field_release:proto.dota.CGCMsgMemCachedSet.KeyPair.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGCMsgMemCachedSet_KeyPair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGCMsgMemCachedSet.KeyPair.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgMemCachedSet::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgMemCachedSet::CGCMsgMemCachedSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgMemCachedSet)
}
CGCMsgMemCachedSet::CGCMsgMemCachedSet(const CGCMsgMemCachedSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgMemCachedSet)
}

void CGCMsgMemCachedSet::SharedCtor() {
  _cached_size_ = 0;
}

CGCMsgMemCachedSet::~CGCMsgMemCachedSet() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgMemCachedSet)
  SharedDtor();
}

void CGCMsgMemCachedSet::SharedDtor() {
}

void CGCMsgMemCachedSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgMemCachedSet::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgMemCachedSet& CGCMsgMemCachedSet::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCMsgMemCachedSet* CGCMsgMemCachedSet::New(::google::protobuf::Arena* arena) const {
  CGCMsgMemCachedSet* n = new CGCMsgMemCachedSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgMemCachedSet::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgMemCachedSet)
  keys_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgMemCachedSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgMemCachedSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CGCMsgMemCachedSet.KeyPair keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgMemCachedSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgMemCachedSet)
  return false;
#undef DO_
}

void CGCMsgMemCachedSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgMemCachedSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CGCMsgMemCachedSet.KeyPair keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgMemCachedSet)
}

::google::protobuf::uint8* CGCMsgMemCachedSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgMemCachedSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CGCMsgMemCachedSet.KeyPair keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->keys(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgMemCachedSet)
  return target;
}

size_t CGCMsgMemCachedSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgMemCachedSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CGCMsgMemCachedSet.KeyPair keys = 1;
  {
    unsigned int count = this->keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgMemCachedSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgMemCachedSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgMemCachedSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgMemCachedSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgMemCachedSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgMemCachedSet)
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedSet::MergeFrom(const CGCMsgMemCachedSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgMemCachedSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
}

void CGCMsgMemCachedSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgMemCachedSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedSet::CopyFrom(const CGCMsgMemCachedSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgMemCachedSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedSet::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedSet::Swap(CGCMsgMemCachedSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgMemCachedSet::InternalSwap(CGCMsgMemCachedSet* other) {
  keys_.InternalSwap(&other->keys_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgMemCachedSet::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCMsgMemCachedSet

// repeated .proto.dota.CGCMsgMemCachedSet.KeyPair keys = 1;
int CGCMsgMemCachedSet::keys_size() const {
  return keys_.size();
}
void CGCMsgMemCachedSet::clear_keys() {
  keys_.Clear();
}
const ::proto::dota::CGCMsgMemCachedSet_KeyPair& CGCMsgMemCachedSet::keys(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedSet.keys)
  return keys_.Get(index);
}
::proto::dota::CGCMsgMemCachedSet_KeyPair* CGCMsgMemCachedSet::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCMsgMemCachedSet.keys)
  return keys_.Mutable(index);
}
::proto::dota::CGCMsgMemCachedSet_KeyPair* CGCMsgMemCachedSet::add_keys() {
  // @@protoc_insertion_point(field_add:proto.dota.CGCMsgMemCachedSet.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CGCMsgMemCachedSet_KeyPair >*
CGCMsgMemCachedSet::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CGCMsgMemCachedSet.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CGCMsgMemCachedSet_KeyPair >&
CGCMsgMemCachedSet::keys() const {
  // @@protoc_insertion_point(field_list:proto.dota.CGCMsgMemCachedSet.keys)
  return keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgMemCachedDelete::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgMemCachedDelete::CGCMsgMemCachedDelete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgMemCachedDelete)
}
CGCMsgMemCachedDelete::CGCMsgMemCachedDelete(const CGCMsgMemCachedDelete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgMemCachedDelete)
}

void CGCMsgMemCachedDelete::SharedCtor() {
  _cached_size_ = 0;
}

CGCMsgMemCachedDelete::~CGCMsgMemCachedDelete() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgMemCachedDelete)
  SharedDtor();
}

void CGCMsgMemCachedDelete::SharedDtor() {
}

void CGCMsgMemCachedDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgMemCachedDelete::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgMemCachedDelete& CGCMsgMemCachedDelete::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCMsgMemCachedDelete* CGCMsgMemCachedDelete::New(::google::protobuf::Arena* arena) const {
  CGCMsgMemCachedDelete* n = new CGCMsgMemCachedDelete;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgMemCachedDelete::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgMemCachedDelete)
  keys_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgMemCachedDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgMemCachedDelete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keys(this->keys_size() - 1).data(),
            this->keys(this->keys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGCMsgMemCachedDelete.keys");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgMemCachedDelete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgMemCachedDelete)
  return false;
#undef DO_
}

void CGCMsgMemCachedDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgMemCachedDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keys(i).data(), this->keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCMsgMemCachedDelete.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgMemCachedDelete)
}

::google::protobuf::uint8* CGCMsgMemCachedDelete::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgMemCachedDelete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keys(i).data(), this->keys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCMsgMemCachedDelete.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgMemCachedDelete)
  return target;
}

size_t CGCMsgMemCachedDelete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgMemCachedDelete)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgMemCachedDelete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgMemCachedDelete)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgMemCachedDelete* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgMemCachedDelete>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgMemCachedDelete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgMemCachedDelete)
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedDelete::MergeFrom(const CGCMsgMemCachedDelete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgMemCachedDelete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
}

void CGCMsgMemCachedDelete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgMemCachedDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedDelete::CopyFrom(const CGCMsgMemCachedDelete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgMemCachedDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedDelete::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedDelete::Swap(CGCMsgMemCachedDelete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgMemCachedDelete::InternalSwap(CGCMsgMemCachedDelete* other) {
  keys_.InternalSwap(&other->keys_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgMemCachedDelete::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCMsgMemCachedDelete

// repeated string keys = 1;
int CGCMsgMemCachedDelete::keys_size() const {
  return keys_.size();
}
void CGCMsgMemCachedDelete::clear_keys() {
  keys_.Clear();
}
const ::std::string& CGCMsgMemCachedDelete::keys(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedDelete.keys)
  return keys_.Get(index);
}
::std::string* CGCMsgMemCachedDelete::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCMsgMemCachedDelete.keys)
  return keys_.Mutable(index);
}
void CGCMsgMemCachedDelete::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedDelete.keys)
  keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CGCMsgMemCachedDelete::set_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedDelete.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
#endif
void CGCMsgMemCachedDelete::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CGCMsgMemCachedDelete.keys)
}
void CGCMsgMemCachedDelete::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGCMsgMemCachedDelete.keys)
}
::std::string* CGCMsgMemCachedDelete::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CGCMsgMemCachedDelete.keys)
  return keys_.Add();
}
void CGCMsgMemCachedDelete::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CGCMsgMemCachedDelete.keys)
}
#if LANG_CXX11
void CGCMsgMemCachedDelete::add_keys(::std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CGCMsgMemCachedDelete.keys)
}
#endif
void CGCMsgMemCachedDelete::add_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CGCMsgMemCachedDelete.keys)
}
void CGCMsgMemCachedDelete::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CGCMsgMemCachedDelete.keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CGCMsgMemCachedDelete::keys() const {
  // @@protoc_insertion_point(field_list:proto.dota.CGCMsgMemCachedDelete.keys)
  return keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CGCMsgMemCachedDelete::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CGCMsgMemCachedDelete.keys)
  return &keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgMemCachedStats::CGCMsgMemCachedStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgMemCachedStats)
}
CGCMsgMemCachedStats::CGCMsgMemCachedStats(const CGCMsgMemCachedStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgMemCachedStats)
}

void CGCMsgMemCachedStats::SharedCtor() {
  _cached_size_ = 0;
}

CGCMsgMemCachedStats::~CGCMsgMemCachedStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgMemCachedStats)
  SharedDtor();
}

void CGCMsgMemCachedStats::SharedDtor() {
}

void CGCMsgMemCachedStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgMemCachedStats::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgMemCachedStats& CGCMsgMemCachedStats::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCMsgMemCachedStats* CGCMsgMemCachedStats::New(::google::protobuf::Arena* arena) const {
  CGCMsgMemCachedStats* n = new CGCMsgMemCachedStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgMemCachedStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgMemCachedStats)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgMemCachedStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgMemCachedStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgMemCachedStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgMemCachedStats)
  return false;
#undef DO_
}

void CGCMsgMemCachedStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgMemCachedStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgMemCachedStats)
}

::google::protobuf::uint8* CGCMsgMemCachedStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgMemCachedStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgMemCachedStats)
  return target;
}

size_t CGCMsgMemCachedStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgMemCachedStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgMemCachedStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgMemCachedStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgMemCachedStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgMemCachedStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgMemCachedStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgMemCachedStats)
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedStats::MergeFrom(const CGCMsgMemCachedStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgMemCachedStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGCMsgMemCachedStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgMemCachedStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedStats::CopyFrom(const CGCMsgMemCachedStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgMemCachedStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedStats::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedStats::Swap(CGCMsgMemCachedStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgMemCachedStats::InternalSwap(CGCMsgMemCachedStats* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgMemCachedStats::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCMsgMemCachedStats

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgMemCachedStatsResponse::kCurrConnectionsFieldNumber;
const int CGCMsgMemCachedStatsResponse::kCmdGetFieldNumber;
const int CGCMsgMemCachedStatsResponse::kCmdSetFieldNumber;
const int CGCMsgMemCachedStatsResponse::kCmdFlushFieldNumber;
const int CGCMsgMemCachedStatsResponse::kGetHitsFieldNumber;
const int CGCMsgMemCachedStatsResponse::kGetMissesFieldNumber;
const int CGCMsgMemCachedStatsResponse::kDeleteHitsFieldNumber;
const int CGCMsgMemCachedStatsResponse::kDeleteMissesFieldNumber;
const int CGCMsgMemCachedStatsResponse::kBytesReadFieldNumber;
const int CGCMsgMemCachedStatsResponse::kBytesWrittenFieldNumber;
const int CGCMsgMemCachedStatsResponse::kLimitMaxbytesFieldNumber;
const int CGCMsgMemCachedStatsResponse::kCurrItemsFieldNumber;
const int CGCMsgMemCachedStatsResponse::kEvictionsFieldNumber;
const int CGCMsgMemCachedStatsResponse::kBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgMemCachedStatsResponse::CGCMsgMemCachedStatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgMemCachedStatsResponse)
}
CGCMsgMemCachedStatsResponse::CGCMsgMemCachedStatsResponse(const CGCMsgMemCachedStatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&curr_connections_, &from.curr_connections_,
    reinterpret_cast<char*>(&bytes_) -
    reinterpret_cast<char*>(&curr_connections_) + sizeof(bytes_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgMemCachedStatsResponse)
}

void CGCMsgMemCachedStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&curr_connections_, 0, reinterpret_cast<char*>(&bytes_) -
    reinterpret_cast<char*>(&curr_connections_) + sizeof(bytes_));
}

CGCMsgMemCachedStatsResponse::~CGCMsgMemCachedStatsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgMemCachedStatsResponse)
  SharedDtor();
}

void CGCMsgMemCachedStatsResponse::SharedDtor() {
}

void CGCMsgMemCachedStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgMemCachedStatsResponse::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgMemCachedStatsResponse& CGCMsgMemCachedStatsResponse::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCMsgMemCachedStatsResponse* CGCMsgMemCachedStatsResponse::New(::google::protobuf::Arena* arena) const {
  CGCMsgMemCachedStatsResponse* n = new CGCMsgMemCachedStatsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgMemCachedStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgMemCachedStatsResponse)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&curr_connections_, 0, reinterpret_cast<char*>(&delete_misses_) -
      reinterpret_cast<char*>(&curr_connections_) + sizeof(delete_misses_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&bytes_read_, 0, reinterpret_cast<char*>(&bytes_) -
      reinterpret_cast<char*>(&bytes_read_) + sizeof(bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgMemCachedStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgMemCachedStatsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 curr_connections = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_curr_connections();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curr_connections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cmd_get = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_cmd_get();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cmd_get_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cmd_set = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_cmd_set();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cmd_set_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cmd_flush = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_cmd_flush();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cmd_flush_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 get_hits = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_get_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &get_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 get_misses = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_get_misses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &get_misses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 delete_hits = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_delete_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &delete_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 delete_misses = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_delete_misses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &delete_misses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_read = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_bytes_read();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_written = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_bytes_written();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_written_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 limit_maxbytes = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_limit_maxbytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &limit_maxbytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 curr_items = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_curr_items();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curr_items_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 evictions = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_evictions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &evictions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgMemCachedStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgMemCachedStatsResponse)
  return false;
#undef DO_
}

void CGCMsgMemCachedStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgMemCachedStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 curr_connections = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->curr_connections(), output);
  }

  // optional uint64 cmd_get = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cmd_get(), output);
  }

  // optional uint64 cmd_set = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cmd_set(), output);
  }

  // optional uint64 cmd_flush = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->cmd_flush(), output);
  }

  // optional uint64 get_hits = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->get_hits(), output);
  }

  // optional uint64 get_misses = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->get_misses(), output);
  }

  // optional uint64 delete_hits = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->delete_hits(), output);
  }

  // optional uint64 delete_misses = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->delete_misses(), output);
  }

  // optional uint64 bytes_read = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->bytes_read(), output);
  }

  // optional uint64 bytes_written = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->bytes_written(), output);
  }

  // optional uint64 limit_maxbytes = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->limit_maxbytes(), output);
  }

  // optional uint64 curr_items = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->curr_items(), output);
  }

  // optional uint64 evictions = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->evictions(), output);
  }

  // optional uint64 bytes = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgMemCachedStatsResponse)
}

::google::protobuf::uint8* CGCMsgMemCachedStatsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgMemCachedStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 curr_connections = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->curr_connections(), target);
  }

  // optional uint64 cmd_get = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cmd_get(), target);
  }

  // optional uint64 cmd_set = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cmd_set(), target);
  }

  // optional uint64 cmd_flush = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->cmd_flush(), target);
  }

  // optional uint64 get_hits = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->get_hits(), target);
  }

  // optional uint64 get_misses = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->get_misses(), target);
  }

  // optional uint64 delete_hits = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->delete_hits(), target);
  }

  // optional uint64 delete_misses = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->delete_misses(), target);
  }

  // optional uint64 bytes_read = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->bytes_read(), target);
  }

  // optional uint64 bytes_written = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->bytes_written(), target);
  }

  // optional uint64 limit_maxbytes = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->limit_maxbytes(), target);
  }

  // optional uint64 curr_items = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->curr_items(), target);
  }

  // optional uint64 evictions = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->evictions(), target);
  }

  // optional uint64 bytes = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgMemCachedStatsResponse)
  return target;
}

size_t CGCMsgMemCachedStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgMemCachedStatsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 curr_connections = 1;
    if (has_curr_connections()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curr_connections());
    }

    // optional uint64 cmd_get = 2;
    if (has_cmd_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cmd_get());
    }

    // optional uint64 cmd_set = 3;
    if (has_cmd_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cmd_set());
    }

    // optional uint64 cmd_flush = 4;
    if (has_cmd_flush()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cmd_flush());
    }

    // optional uint64 get_hits = 5;
    if (has_get_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->get_hits());
    }

    // optional uint64 get_misses = 6;
    if (has_get_misses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->get_misses());
    }

    // optional uint64 delete_hits = 7;
    if (has_delete_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->delete_hits());
    }

    // optional uint64 delete_misses = 8;
    if (has_delete_misses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->delete_misses());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional uint64 bytes_read = 9;
    if (has_bytes_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_read());
    }

    // optional uint64 bytes_written = 10;
    if (has_bytes_written()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_written());
    }

    // optional uint64 limit_maxbytes = 11;
    if (has_limit_maxbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->limit_maxbytes());
    }

    // optional uint64 curr_items = 12;
    if (has_curr_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curr_items());
    }

    // optional uint64 evictions = 13;
    if (has_evictions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->evictions());
    }

    // optional uint64 bytes = 14;
    if (has_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgMemCachedStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgMemCachedStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgMemCachedStatsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgMemCachedStatsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgMemCachedStatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgMemCachedStatsResponse)
    MergeFrom(*source);
  }
}

void CGCMsgMemCachedStatsResponse::MergeFrom(const CGCMsgMemCachedStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgMemCachedStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      curr_connections_ = from.curr_connections_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_get_ = from.cmd_get_;
    }
    if (cached_has_bits & 0x00000004u) {
      cmd_set_ = from.cmd_set_;
    }
    if (cached_has_bits & 0x00000008u) {
      cmd_flush_ = from.cmd_flush_;
    }
    if (cached_has_bits & 0x00000010u) {
      get_hits_ = from.get_hits_;
    }
    if (cached_has_bits & 0x00000020u) {
      get_misses_ = from.get_misses_;
    }
    if (cached_has_bits & 0x00000040u) {
      delete_hits_ = from.delete_hits_;
    }
    if (cached_has_bits & 0x00000080u) {
      delete_misses_ = from.delete_misses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      bytes_read_ = from.bytes_read_;
    }
    if (cached_has_bits & 0x00000200u) {
      bytes_written_ = from.bytes_written_;
    }
    if (cached_has_bits & 0x00000400u) {
      limit_maxbytes_ = from.limit_maxbytes_;
    }
    if (cached_has_bits & 0x00000800u) {
      curr_items_ = from.curr_items_;
    }
    if (cached_has_bits & 0x00001000u) {
      evictions_ = from.evictions_;
    }
    if (cached_has_bits & 0x00002000u) {
      bytes_ = from.bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgMemCachedStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgMemCachedStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgMemCachedStatsResponse::CopyFrom(const CGCMsgMemCachedStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgMemCachedStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedStatsResponse::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedStatsResponse::Swap(CGCMsgMemCachedStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgMemCachedStatsResponse::InternalSwap(CGCMsgMemCachedStatsResponse* other) {
  std::swap(curr_connections_, other->curr_connections_);
  std::swap(cmd_get_, other->cmd_get_);
  std::swap(cmd_set_, other->cmd_set_);
  std::swap(cmd_flush_, other->cmd_flush_);
  std::swap(get_hits_, other->get_hits_);
  std::swap(get_misses_, other->get_misses_);
  std::swap(delete_hits_, other->delete_hits_);
  std::swap(delete_misses_, other->delete_misses_);
  std::swap(bytes_read_, other->bytes_read_);
  std::swap(bytes_written_, other->bytes_written_);
  std::swap(limit_maxbytes_, other->limit_maxbytes_);
  std::swap(curr_items_, other->curr_items_);
  std::swap(evictions_, other->evictions_);
  std::swap(bytes_, other->bytes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgMemCachedStatsResponse::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCMsgMemCachedStatsResponse

// optional uint64 curr_connections = 1;
bool CGCMsgMemCachedStatsResponse::has_curr_connections() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCMsgMemCachedStatsResponse::set_has_curr_connections() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCMsgMemCachedStatsResponse::clear_has_curr_connections() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCMsgMemCachedStatsResponse::clear_curr_connections() {
  curr_connections_ = GOOGLE_ULONGLONG(0);
  clear_has_curr_connections();
}
::google::protobuf::uint64 CGCMsgMemCachedStatsResponse::curr_connections() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedStatsResponse.curr_connections)
  return curr_connections_;
}
void CGCMsgMemCachedStatsResponse::set_curr_connections(::google::protobuf::uint64 value) {
  set_has_curr_connections();
  curr_connections_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedStatsResponse.curr_connections)
}

// optional uint64 cmd_get = 2;
bool CGCMsgMemCachedStatsResponse::has_cmd_get() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGCMsgMemCachedStatsResponse::set_has_cmd_get() {
  _has_bits_[0] |= 0x00000002u;
}
void CGCMsgMemCachedStatsResponse::clear_has_cmd_get() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGCMsgMemCachedStatsResponse::clear_cmd_get() {
  cmd_get_ = GOOGLE_ULONGLONG(0);
  clear_has_cmd_get();
}
::google::protobuf::uint64 CGCMsgMemCachedStatsResponse::cmd_get() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedStatsResponse.cmd_get)
  return cmd_get_;
}
void CGCMsgMemCachedStatsResponse::set_cmd_get(::google::protobuf::uint64 value) {
  set_has_cmd_get();
  cmd_get_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedStatsResponse.cmd_get)
}

// optional uint64 cmd_set = 3;
bool CGCMsgMemCachedStatsResponse::has_cmd_set() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGCMsgMemCachedStatsResponse::set_has_cmd_set() {
  _has_bits_[0] |= 0x00000004u;
}
void CGCMsgMemCachedStatsResponse::clear_has_cmd_set() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGCMsgMemCachedStatsResponse::clear_cmd_set() {
  cmd_set_ = GOOGLE_ULONGLONG(0);
  clear_has_cmd_set();
}
::google::protobuf::uint64 CGCMsgMemCachedStatsResponse::cmd_set() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedStatsResponse.cmd_set)
  return cmd_set_;
}
void CGCMsgMemCachedStatsResponse::set_cmd_set(::google::protobuf::uint64 value) {
  set_has_cmd_set();
  cmd_set_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedStatsResponse.cmd_set)
}

// optional uint64 cmd_flush = 4;
bool CGCMsgMemCachedStatsResponse::has_cmd_flush() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CGCMsgMemCachedStatsResponse::set_has_cmd_flush() {
  _has_bits_[0] |= 0x00000008u;
}
void CGCMsgMemCachedStatsResponse::clear_has_cmd_flush() {
  _has_bits_[0] &= ~0x00000008u;
}
void CGCMsgMemCachedStatsResponse::clear_cmd_flush() {
  cmd_flush_ = GOOGLE_ULONGLONG(0);
  clear_has_cmd_flush();
}
::google::protobuf::uint64 CGCMsgMemCachedStatsResponse::cmd_flush() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedStatsResponse.cmd_flush)
  return cmd_flush_;
}
void CGCMsgMemCachedStatsResponse::set_cmd_flush(::google::protobuf::uint64 value) {
  set_has_cmd_flush();
  cmd_flush_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedStatsResponse.cmd_flush)
}

// optional uint64 get_hits = 5;
bool CGCMsgMemCachedStatsResponse::has_get_hits() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CGCMsgMemCachedStatsResponse::set_has_get_hits() {
  _has_bits_[0] |= 0x00000010u;
}
void CGCMsgMemCachedStatsResponse::clear_has_get_hits() {
  _has_bits_[0] &= ~0x00000010u;
}
void CGCMsgMemCachedStatsResponse::clear_get_hits() {
  get_hits_ = GOOGLE_ULONGLONG(0);
  clear_has_get_hits();
}
::google::protobuf::uint64 CGCMsgMemCachedStatsResponse::get_hits() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedStatsResponse.get_hits)
  return get_hits_;
}
void CGCMsgMemCachedStatsResponse::set_get_hits(::google::protobuf::uint64 value) {
  set_has_get_hits();
  get_hits_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedStatsResponse.get_hits)
}

// optional uint64 get_misses = 6;
bool CGCMsgMemCachedStatsResponse::has_get_misses() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CGCMsgMemCachedStatsResponse::set_has_get_misses() {
  _has_bits_[0] |= 0x00000020u;
}
void CGCMsgMemCachedStatsResponse::clear_has_get_misses() {
  _has_bits_[0] &= ~0x00000020u;
}
void CGCMsgMemCachedStatsResponse::clear_get_misses() {
  get_misses_ = GOOGLE_ULONGLONG(0);
  clear_has_get_misses();
}
::google::protobuf::uint64 CGCMsgMemCachedStatsResponse::get_misses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedStatsResponse.get_misses)
  return get_misses_;
}
void CGCMsgMemCachedStatsResponse::set_get_misses(::google::protobuf::uint64 value) {
  set_has_get_misses();
  get_misses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedStatsResponse.get_misses)
}

// optional uint64 delete_hits = 7;
bool CGCMsgMemCachedStatsResponse::has_delete_hits() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CGCMsgMemCachedStatsResponse::set_has_delete_hits() {
  _has_bits_[0] |= 0x00000040u;
}
void CGCMsgMemCachedStatsResponse::clear_has_delete_hits() {
  _has_bits_[0] &= ~0x00000040u;
}
void CGCMsgMemCachedStatsResponse::clear_delete_hits() {
  delete_hits_ = GOOGLE_ULONGLONG(0);
  clear_has_delete_hits();
}
::google::protobuf::uint64 CGCMsgMemCachedStatsResponse::delete_hits() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedStatsResponse.delete_hits)
  return delete_hits_;
}
void CGCMsgMemCachedStatsResponse::set_delete_hits(::google::protobuf::uint64 value) {
  set_has_delete_hits();
  delete_hits_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedStatsResponse.delete_hits)
}

// optional uint64 delete_misses = 8;
bool CGCMsgMemCachedStatsResponse::has_delete_misses() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CGCMsgMemCachedStatsResponse::set_has_delete_misses() {
  _has_bits_[0] |= 0x00000080u;
}
void CGCMsgMemCachedStatsResponse::clear_has_delete_misses() {
  _has_bits_[0] &= ~0x00000080u;
}
void CGCMsgMemCachedStatsResponse::clear_delete_misses() {
  delete_misses_ = GOOGLE_ULONGLONG(0);
  clear_has_delete_misses();
}
::google::protobuf::uint64 CGCMsgMemCachedStatsResponse::delete_misses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedStatsResponse.delete_misses)
  return delete_misses_;
}
void CGCMsgMemCachedStatsResponse::set_delete_misses(::google::protobuf::uint64 value) {
  set_has_delete_misses();
  delete_misses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedStatsResponse.delete_misses)
}

// optional uint64 bytes_read = 9;
bool CGCMsgMemCachedStatsResponse::has_bytes_read() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CGCMsgMemCachedStatsResponse::set_has_bytes_read() {
  _has_bits_[0] |= 0x00000100u;
}
void CGCMsgMemCachedStatsResponse::clear_has_bytes_read() {
  _has_bits_[0] &= ~0x00000100u;
}
void CGCMsgMemCachedStatsResponse::clear_bytes_read() {
  bytes_read_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_read();
}
::google::protobuf::uint64 CGCMsgMemCachedStatsResponse::bytes_read() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedStatsResponse.bytes_read)
  return bytes_read_;
}
void CGCMsgMemCachedStatsResponse::set_bytes_read(::google::protobuf::uint64 value) {
  set_has_bytes_read();
  bytes_read_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedStatsResponse.bytes_read)
}

// optional uint64 bytes_written = 10;
bool CGCMsgMemCachedStatsResponse::has_bytes_written() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CGCMsgMemCachedStatsResponse::set_has_bytes_written() {
  _has_bits_[0] |= 0x00000200u;
}
void CGCMsgMemCachedStatsResponse::clear_has_bytes_written() {
  _has_bits_[0] &= ~0x00000200u;
}
void CGCMsgMemCachedStatsResponse::clear_bytes_written() {
  bytes_written_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_written();
}
::google::protobuf::uint64 CGCMsgMemCachedStatsResponse::bytes_written() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedStatsResponse.bytes_written)
  return bytes_written_;
}
void CGCMsgMemCachedStatsResponse::set_bytes_written(::google::protobuf::uint64 value) {
  set_has_bytes_written();
  bytes_written_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedStatsResponse.bytes_written)
}

// optional uint64 limit_maxbytes = 11;
bool CGCMsgMemCachedStatsResponse::has_limit_maxbytes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CGCMsgMemCachedStatsResponse::set_has_limit_maxbytes() {
  _has_bits_[0] |= 0x00000400u;
}
void CGCMsgMemCachedStatsResponse::clear_has_limit_maxbytes() {
  _has_bits_[0] &= ~0x00000400u;
}
void CGCMsgMemCachedStatsResponse::clear_limit_maxbytes() {
  limit_maxbytes_ = GOOGLE_ULONGLONG(0);
  clear_has_limit_maxbytes();
}
::google::protobuf::uint64 CGCMsgMemCachedStatsResponse::limit_maxbytes() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedStatsResponse.limit_maxbytes)
  return limit_maxbytes_;
}
void CGCMsgMemCachedStatsResponse::set_limit_maxbytes(::google::protobuf::uint64 value) {
  set_has_limit_maxbytes();
  limit_maxbytes_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedStatsResponse.limit_maxbytes)
}

// optional uint64 curr_items = 12;
bool CGCMsgMemCachedStatsResponse::has_curr_items() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CGCMsgMemCachedStatsResponse::set_has_curr_items() {
  _has_bits_[0] |= 0x00000800u;
}
void CGCMsgMemCachedStatsResponse::clear_has_curr_items() {
  _has_bits_[0] &= ~0x00000800u;
}
void CGCMsgMemCachedStatsResponse::clear_curr_items() {
  curr_items_ = GOOGLE_ULONGLONG(0);
  clear_has_curr_items();
}
::google::protobuf::uint64 CGCMsgMemCachedStatsResponse::curr_items() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedStatsResponse.curr_items)
  return curr_items_;
}
void CGCMsgMemCachedStatsResponse::set_curr_items(::google::protobuf::uint64 value) {
  set_has_curr_items();
  curr_items_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedStatsResponse.curr_items)
}

// optional uint64 evictions = 13;
bool CGCMsgMemCachedStatsResponse::has_evictions() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CGCMsgMemCachedStatsResponse::set_has_evictions() {
  _has_bits_[0] |= 0x00001000u;
}
void CGCMsgMemCachedStatsResponse::clear_has_evictions() {
  _has_bits_[0] &= ~0x00001000u;
}
void CGCMsgMemCachedStatsResponse::clear_evictions() {
  evictions_ = GOOGLE_ULONGLONG(0);
  clear_has_evictions();
}
::google::protobuf::uint64 CGCMsgMemCachedStatsResponse::evictions() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedStatsResponse.evictions)
  return evictions_;
}
void CGCMsgMemCachedStatsResponse::set_evictions(::google::protobuf::uint64 value) {
  set_has_evictions();
  evictions_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedStatsResponse.evictions)
}

// optional uint64 bytes = 14;
bool CGCMsgMemCachedStatsResponse::has_bytes() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CGCMsgMemCachedStatsResponse::set_has_bytes() {
  _has_bits_[0] |= 0x00002000u;
}
void CGCMsgMemCachedStatsResponse::clear_has_bytes() {
  _has_bits_[0] &= ~0x00002000u;
}
void CGCMsgMemCachedStatsResponse::clear_bytes() {
  bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes();
}
::google::protobuf::uint64 CGCMsgMemCachedStatsResponse::bytes() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgMemCachedStatsResponse.bytes)
  return bytes_;
}
void CGCMsgMemCachedStatsResponse::set_bytes(::google::protobuf::uint64 value) {
  set_has_bytes();
  bytes_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgMemCachedStatsResponse.bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgSQLStats::kSchemaCatalogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgSQLStats::CGCMsgSQLStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgSQLStats)
}
CGCMsgSQLStats::CGCMsgSQLStats(const CGCMsgSQLStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  schema_catalog_ = from.schema_catalog_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgSQLStats)
}

void CGCMsgSQLStats::SharedCtor() {
  _cached_size_ = 0;
  schema_catalog_ = 0u;
}

CGCMsgSQLStats::~CGCMsgSQLStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgSQLStats)
  SharedDtor();
}

void CGCMsgSQLStats::SharedDtor() {
}

void CGCMsgSQLStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgSQLStats::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgSQLStats& CGCMsgSQLStats::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCMsgSQLStats* CGCMsgSQLStats::New(::google::protobuf::Arena* arena) const {
  CGCMsgSQLStats* n = new CGCMsgSQLStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgSQLStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgSQLStats)
  schema_catalog_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgSQLStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgSQLStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 schema_catalog = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_schema_catalog();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schema_catalog_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgSQLStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgSQLStats)
  return false;
#undef DO_
}

void CGCMsgSQLStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgSQLStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 schema_catalog = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->schema_catalog(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgSQLStats)
}

::google::protobuf::uint8* CGCMsgSQLStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgSQLStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 schema_catalog = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->schema_catalog(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgSQLStats)
  return target;
}

size_t CGCMsgSQLStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgSQLStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 schema_catalog = 1;
  if (has_schema_catalog()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->schema_catalog());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgSQLStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgSQLStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgSQLStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgSQLStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgSQLStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgSQLStats)
    MergeFrom(*source);
  }
}

void CGCMsgSQLStats::MergeFrom(const CGCMsgSQLStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgSQLStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_schema_catalog()) {
    set_schema_catalog(from.schema_catalog());
  }
}

void CGCMsgSQLStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgSQLStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgSQLStats::CopyFrom(const CGCMsgSQLStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgSQLStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgSQLStats::IsInitialized() const {
  return true;
}

void CGCMsgSQLStats::Swap(CGCMsgSQLStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgSQLStats::InternalSwap(CGCMsgSQLStats* other) {
  std::swap(schema_catalog_, other->schema_catalog_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgSQLStats::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCMsgSQLStats

// optional uint32 schema_catalog = 1;
bool CGCMsgSQLStats::has_schema_catalog() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCMsgSQLStats::set_has_schema_catalog() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCMsgSQLStats::clear_has_schema_catalog() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCMsgSQLStats::clear_schema_catalog() {
  schema_catalog_ = 0u;
  clear_has_schema_catalog();
}
::google::protobuf::uint32 CGCMsgSQLStats::schema_catalog() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgSQLStats.schema_catalog)
  return schema_catalog_;
}
void CGCMsgSQLStats::set_schema_catalog(::google::protobuf::uint32 value) {
  set_has_schema_catalog();
  schema_catalog_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgSQLStats.schema_catalog)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgSQLStatsResponse::kThreadsFieldNumber;
const int CGCMsgSQLStatsResponse::kThreadsConnectedFieldNumber;
const int CGCMsgSQLStatsResponse::kThreadsActiveFieldNumber;
const int CGCMsgSQLStatsResponse::kOperationsSubmittedFieldNumber;
const int CGCMsgSQLStatsResponse::kPreparedStatementsExecutedFieldNumber;
const int CGCMsgSQLStatsResponse::kNonPreparedStatementsExecutedFieldNumber;
const int CGCMsgSQLStatsResponse::kDeadlockRetriesFieldNumber;
const int CGCMsgSQLStatsResponse::kOperationsTimedOutInQueueFieldNumber;
const int CGCMsgSQLStatsResponse::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgSQLStatsResponse::CGCMsgSQLStatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgSQLStatsResponse)
}
CGCMsgSQLStatsResponse::CGCMsgSQLStatsResponse(const CGCMsgSQLStatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&threads_, &from.threads_,
    reinterpret_cast<char*>(&errors_) -
    reinterpret_cast<char*>(&threads_) + sizeof(errors_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgSQLStatsResponse)
}

void CGCMsgSQLStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&threads_, 0, reinterpret_cast<char*>(&errors_) -
    reinterpret_cast<char*>(&threads_) + sizeof(errors_));
}

CGCMsgSQLStatsResponse::~CGCMsgSQLStatsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgSQLStatsResponse)
  SharedDtor();
}

void CGCMsgSQLStatsResponse::SharedDtor() {
}

void CGCMsgSQLStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgSQLStatsResponse::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgSQLStatsResponse& CGCMsgSQLStatsResponse::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCMsgSQLStatsResponse* CGCMsgSQLStatsResponse::New(::google::protobuf::Arena* arena) const {
  CGCMsgSQLStatsResponse* n = new CGCMsgSQLStatsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgSQLStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgSQLStatsResponse)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&threads_, 0, reinterpret_cast<char*>(&operations_timed_out_in_queue_) -
      reinterpret_cast<char*>(&threads_) + sizeof(operations_timed_out_in_queue_));
  }
  errors_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgSQLStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgSQLStatsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 threads = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_threads();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 threads_connected = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_threads_connected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &threads_connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 threads_active = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_threads_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &threads_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 operations_submitted = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_operations_submitted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operations_submitted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prepared_statements_executed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_prepared_statements_executed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prepared_statements_executed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 non_prepared_statements_executed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_non_prepared_statements_executed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &non_prepared_statements_executed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deadlock_retries = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_deadlock_retries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deadlock_retries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 operations_timed_out_in_queue = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_operations_timed_out_in_queue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operations_timed_out_in_queue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 errors = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_errors();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgSQLStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgSQLStatsResponse)
  return false;
#undef DO_
}

void CGCMsgSQLStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgSQLStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 threads = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->threads(), output);
  }

  // optional uint32 threads_connected = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->threads_connected(), output);
  }

  // optional uint32 threads_active = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->threads_active(), output);
  }

  // optional uint32 operations_submitted = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->operations_submitted(), output);
  }

  // optional uint32 prepared_statements_executed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->prepared_statements_executed(), output);
  }

  // optional uint32 non_prepared_statements_executed = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->non_prepared_statements_executed(), output);
  }

  // optional uint32 deadlock_retries = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->deadlock_retries(), output);
  }

  // optional uint32 operations_timed_out_in_queue = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->operations_timed_out_in_queue(), output);
  }

  // optional uint32 errors = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->errors(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgSQLStatsResponse)
}

::google::protobuf::uint8* CGCMsgSQLStatsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgSQLStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 threads = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->threads(), target);
  }

  // optional uint32 threads_connected = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->threads_connected(), target);
  }

  // optional uint32 threads_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->threads_active(), target);
  }

  // optional uint32 operations_submitted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->operations_submitted(), target);
  }

  // optional uint32 prepared_statements_executed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->prepared_statements_executed(), target);
  }

  // optional uint32 non_prepared_statements_executed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->non_prepared_statements_executed(), target);
  }

  // optional uint32 deadlock_retries = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->deadlock_retries(), target);
  }

  // optional uint32 operations_timed_out_in_queue = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->operations_timed_out_in_queue(), target);
  }

  // optional uint32 errors = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->errors(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgSQLStatsResponse)
  return target;
}

size_t CGCMsgSQLStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgSQLStatsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 threads = 1;
    if (has_threads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->threads());
    }

    // optional uint32 threads_connected = 2;
    if (has_threads_connected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->threads_connected());
    }

    // optional uint32 threads_active = 3;
    if (has_threads_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->threads_active());
    }

    // optional uint32 operations_submitted = 4;
    if (has_operations_submitted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operations_submitted());
    }

    // optional uint32 prepared_statements_executed = 5;
    if (has_prepared_statements_executed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prepared_statements_executed());
    }

    // optional uint32 non_prepared_statements_executed = 6;
    if (has_non_prepared_statements_executed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->non_prepared_statements_executed());
    }

    // optional uint32 deadlock_retries = 7;
    if (has_deadlock_retries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deadlock_retries());
    }

    // optional uint32 operations_timed_out_in_queue = 8;
    if (has_operations_timed_out_in_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operations_timed_out_in_queue());
    }

  }
  // optional uint32 errors = 9;
  if (has_errors()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->errors());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgSQLStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgSQLStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgSQLStatsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgSQLStatsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgSQLStatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgSQLStatsResponse)
    MergeFrom(*source);
  }
}

void CGCMsgSQLStatsResponse::MergeFrom(const CGCMsgSQLStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgSQLStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      threads_ = from.threads_;
    }
    if (cached_has_bits & 0x00000002u) {
      threads_connected_ = from.threads_connected_;
    }
    if (cached_has_bits & 0x00000004u) {
      threads_active_ = from.threads_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      operations_submitted_ = from.operations_submitted_;
    }
    if (cached_has_bits & 0x00000010u) {
      prepared_statements_executed_ = from.prepared_statements_executed_;
    }
    if (cached_has_bits & 0x00000020u) {
      non_prepared_statements_executed_ = from.non_prepared_statements_executed_;
    }
    if (cached_has_bits & 0x00000040u) {
      deadlock_retries_ = from.deadlock_retries_;
    }
    if (cached_has_bits & 0x00000080u) {
      operations_timed_out_in_queue_ = from.operations_timed_out_in_queue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_errors(from.errors());
  }
}

void CGCMsgSQLStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgSQLStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgSQLStatsResponse::CopyFrom(const CGCMsgSQLStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgSQLStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgSQLStatsResponse::IsInitialized() const {
  return true;
}

void CGCMsgSQLStatsResponse::Swap(CGCMsgSQLStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgSQLStatsResponse::InternalSwap(CGCMsgSQLStatsResponse* other) {
  std::swap(threads_, other->threads_);
  std::swap(threads_connected_, other->threads_connected_);
  std::swap(threads_active_, other->threads_active_);
  std::swap(operations_submitted_, other->operations_submitted_);
  std::swap(prepared_statements_executed_, other->prepared_statements_executed_);
  std::swap(non_prepared_statements_executed_, other->non_prepared_statements_executed_);
  std::swap(deadlock_retries_, other->deadlock_retries_);
  std::swap(operations_timed_out_in_queue_, other->operations_timed_out_in_queue_);
  std::swap(errors_, other->errors_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgSQLStatsResponse::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCMsgSQLStatsResponse

// optional uint32 threads = 1;
bool CGCMsgSQLStatsResponse::has_threads() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCMsgSQLStatsResponse::set_has_threads() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCMsgSQLStatsResponse::clear_has_threads() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCMsgSQLStatsResponse::clear_threads() {
  threads_ = 0u;
  clear_has_threads();
}
::google::protobuf::uint32 CGCMsgSQLStatsResponse::threads() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgSQLStatsResponse.threads)
  return threads_;
}
void CGCMsgSQLStatsResponse::set_threads(::google::protobuf::uint32 value) {
  set_has_threads();
  threads_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgSQLStatsResponse.threads)
}

// optional uint32 threads_connected = 2;
bool CGCMsgSQLStatsResponse::has_threads_connected() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGCMsgSQLStatsResponse::set_has_threads_connected() {
  _has_bits_[0] |= 0x00000002u;
}
void CGCMsgSQLStatsResponse::clear_has_threads_connected() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGCMsgSQLStatsResponse::clear_threads_connected() {
  threads_connected_ = 0u;
  clear_has_threads_connected();
}
::google::protobuf::uint32 CGCMsgSQLStatsResponse::threads_connected() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgSQLStatsResponse.threads_connected)
  return threads_connected_;
}
void CGCMsgSQLStatsResponse::set_threads_connected(::google::protobuf::uint32 value) {
  set_has_threads_connected();
  threads_connected_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgSQLStatsResponse.threads_connected)
}

// optional uint32 threads_active = 3;
bool CGCMsgSQLStatsResponse::has_threads_active() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGCMsgSQLStatsResponse::set_has_threads_active() {
  _has_bits_[0] |= 0x00000004u;
}
void CGCMsgSQLStatsResponse::clear_has_threads_active() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGCMsgSQLStatsResponse::clear_threads_active() {
  threads_active_ = 0u;
  clear_has_threads_active();
}
::google::protobuf::uint32 CGCMsgSQLStatsResponse::threads_active() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgSQLStatsResponse.threads_active)
  return threads_active_;
}
void CGCMsgSQLStatsResponse::set_threads_active(::google::protobuf::uint32 value) {
  set_has_threads_active();
  threads_active_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgSQLStatsResponse.threads_active)
}

// optional uint32 operations_submitted = 4;
bool CGCMsgSQLStatsResponse::has_operations_submitted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CGCMsgSQLStatsResponse::set_has_operations_submitted() {
  _has_bits_[0] |= 0x00000008u;
}
void CGCMsgSQLStatsResponse::clear_has_operations_submitted() {
  _has_bits_[0] &= ~0x00000008u;
}
void CGCMsgSQLStatsResponse::clear_operations_submitted() {
  operations_submitted_ = 0u;
  clear_has_operations_submitted();
}
::google::protobuf::uint32 CGCMsgSQLStatsResponse::operations_submitted() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgSQLStatsResponse.operations_submitted)
  return operations_submitted_;
}
void CGCMsgSQLStatsResponse::set_operations_submitted(::google::protobuf::uint32 value) {
  set_has_operations_submitted();
  operations_submitted_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgSQLStatsResponse.operations_submitted)
}

// optional uint32 prepared_statements_executed = 5;
bool CGCMsgSQLStatsResponse::has_prepared_statements_executed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CGCMsgSQLStatsResponse::set_has_prepared_statements_executed() {
  _has_bits_[0] |= 0x00000010u;
}
void CGCMsgSQLStatsResponse::clear_has_prepared_statements_executed() {
  _has_bits_[0] &= ~0x00000010u;
}
void CGCMsgSQLStatsResponse::clear_prepared_statements_executed() {
  prepared_statements_executed_ = 0u;
  clear_has_prepared_statements_executed();
}
::google::protobuf::uint32 CGCMsgSQLStatsResponse::prepared_statements_executed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgSQLStatsResponse.prepared_statements_executed)
  return prepared_statements_executed_;
}
void CGCMsgSQLStatsResponse::set_prepared_statements_executed(::google::protobuf::uint32 value) {
  set_has_prepared_statements_executed();
  prepared_statements_executed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgSQLStatsResponse.prepared_statements_executed)
}

// optional uint32 non_prepared_statements_executed = 6;
bool CGCMsgSQLStatsResponse::has_non_prepared_statements_executed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CGCMsgSQLStatsResponse::set_has_non_prepared_statements_executed() {
  _has_bits_[0] |= 0x00000020u;
}
void CGCMsgSQLStatsResponse::clear_has_non_prepared_statements_executed() {
  _has_bits_[0] &= ~0x00000020u;
}
void CGCMsgSQLStatsResponse::clear_non_prepared_statements_executed() {
  non_prepared_statements_executed_ = 0u;
  clear_has_non_prepared_statements_executed();
}
::google::protobuf::uint32 CGCMsgSQLStatsResponse::non_prepared_statements_executed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgSQLStatsResponse.non_prepared_statements_executed)
  return non_prepared_statements_executed_;
}
void CGCMsgSQLStatsResponse::set_non_prepared_statements_executed(::google::protobuf::uint32 value) {
  set_has_non_prepared_statements_executed();
  non_prepared_statements_executed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgSQLStatsResponse.non_prepared_statements_executed)
}

// optional uint32 deadlock_retries = 7;
bool CGCMsgSQLStatsResponse::has_deadlock_retries() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CGCMsgSQLStatsResponse::set_has_deadlock_retries() {
  _has_bits_[0] |= 0x00000040u;
}
void CGCMsgSQLStatsResponse::clear_has_deadlock_retries() {
  _has_bits_[0] &= ~0x00000040u;
}
void CGCMsgSQLStatsResponse::clear_deadlock_retries() {
  deadlock_retries_ = 0u;
  clear_has_deadlock_retries();
}
::google::protobuf::uint32 CGCMsgSQLStatsResponse::deadlock_retries() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgSQLStatsResponse.deadlock_retries)
  return deadlock_retries_;
}
void CGCMsgSQLStatsResponse::set_deadlock_retries(::google::protobuf::uint32 value) {
  set_has_deadlock_retries();
  deadlock_retries_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgSQLStatsResponse.deadlock_retries)
}

// optional uint32 operations_timed_out_in_queue = 8;
bool CGCMsgSQLStatsResponse::has_operations_timed_out_in_queue() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CGCMsgSQLStatsResponse::set_has_operations_timed_out_in_queue() {
  _has_bits_[0] |= 0x00000080u;
}
void CGCMsgSQLStatsResponse::clear_has_operations_timed_out_in_queue() {
  _has_bits_[0] &= ~0x00000080u;
}
void CGCMsgSQLStatsResponse::clear_operations_timed_out_in_queue() {
  operations_timed_out_in_queue_ = 0u;
  clear_has_operations_timed_out_in_queue();
}
::google::protobuf::uint32 CGCMsgSQLStatsResponse::operations_timed_out_in_queue() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgSQLStatsResponse.operations_timed_out_in_queue)
  return operations_timed_out_in_queue_;
}
void CGCMsgSQLStatsResponse::set_operations_timed_out_in_queue(::google::protobuf::uint32 value) {
  set_has_operations_timed_out_in_queue();
  operations_timed_out_in_queue_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgSQLStatsResponse.operations_timed_out_in_queue)
}

// optional uint32 errors = 9;
bool CGCMsgSQLStatsResponse::has_errors() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CGCMsgSQLStatsResponse::set_has_errors() {
  _has_bits_[0] |= 0x00000100u;
}
void CGCMsgSQLStatsResponse::clear_has_errors() {
  _has_bits_[0] &= ~0x00000100u;
}
void CGCMsgSQLStatsResponse::clear_errors() {
  errors_ = 0u;
  clear_has_errors();
}
::google::protobuf::uint32 CGCMsgSQLStatsResponse::errors() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgSQLStatsResponse.errors)
  return errors_;
}
void CGCMsgSQLStatsResponse::set_errors(::google::protobuf::uint32 value) {
  set_has_errors();
  errors_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgSQLStatsResponse.errors)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMAddFreeLicense::kSteamidFieldNumber;
const int CMsgAMAddFreeLicense::kIpPublicFieldNumber;
const int CMsgAMAddFreeLicense::kPackageidFieldNumber;
const int CMsgAMAddFreeLicense::kStoreCountryCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMAddFreeLicense::CMsgAMAddFreeLicense()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMAddFreeLicense)
}
CMsgAMAddFreeLicense::CMsgAMAddFreeLicense(const CMsgAMAddFreeLicense& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  store_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_store_country_code()) {
    store_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.store_country_code_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&packageid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(packageid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMAddFreeLicense)
}

void CMsgAMAddFreeLicense::SharedCtor() {
  _cached_size_ = 0;
  store_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&packageid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(packageid_));
}

CMsgAMAddFreeLicense::~CMsgAMAddFreeLicense() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMAddFreeLicense)
  SharedDtor();
}

void CMsgAMAddFreeLicense::SharedDtor() {
  store_country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgAMAddFreeLicense::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMAddFreeLicense::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAMAddFreeLicense& CMsgAMAddFreeLicense::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAMAddFreeLicense* CMsgAMAddFreeLicense::New(::google::protobuf::Arena* arena) const {
  CMsgAMAddFreeLicense* n = new CMsgAMAddFreeLicense;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAMAddFreeLicense::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMAddFreeLicense)
  if (has_store_country_code()) {
    GOOGLE_DCHECK(!store_country_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*store_country_code_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&packageid_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(packageid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAMAddFreeLicense::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMAddFreeLicense)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ip_public = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ip_public();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_public_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 packageid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_packageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string store_country_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_store_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->store_country_code().data(), this->store_country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgAMAddFreeLicense.store_country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMAddFreeLicense)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMAddFreeLicense)
  return false;
#undef DO_
}

void CMsgAMAddFreeLicense::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMAddFreeLicense)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 ip_public = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ip_public(), output);
  }

  // optional uint32 packageid = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->packageid(), output);
  }

  // optional string store_country_code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->store_country_code().data(), this->store_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMAddFreeLicense.store_country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->store_country_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMAddFreeLicense)
}

::google::protobuf::uint8* CMsgAMAddFreeLicense::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMAddFreeLicense)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 ip_public = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ip_public(), target);
  }

  // optional uint32 packageid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->packageid(), target);
  }

  // optional string store_country_code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->store_country_code().data(), this->store_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMAddFreeLicense.store_country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->store_country_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMAddFreeLicense)
  return target;
}

size_t CMsgAMAddFreeLicense::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMAddFreeLicense)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string store_country_code = 4;
    if (has_store_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->store_country_code());
    }

    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 ip_public = 2;
    if (has_ip_public()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip_public());
    }

    // optional uint32 packageid = 3;
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMAddFreeLicense::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMAddFreeLicense)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMAddFreeLicense* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAMAddFreeLicense>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMAddFreeLicense)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMAddFreeLicense)
    MergeFrom(*source);
  }
}

void CMsgAMAddFreeLicense::MergeFrom(const CMsgAMAddFreeLicense& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMAddFreeLicense)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_store_country_code();
      store_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.store_country_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      ip_public_ = from.ip_public_;
    }
    if (cached_has_bits & 0x00000008u) {
      packageid_ = from.packageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMAddFreeLicense::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMAddFreeLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMAddFreeLicense::CopyFrom(const CMsgAMAddFreeLicense& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMAddFreeLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMAddFreeLicense::IsInitialized() const {
  return true;
}

void CMsgAMAddFreeLicense::Swap(CMsgAMAddFreeLicense* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMAddFreeLicense::InternalSwap(CMsgAMAddFreeLicense* other) {
  store_country_code_.Swap(&other->store_country_code_);
  std::swap(steamid_, other->steamid_);
  std::swap(ip_public_, other->ip_public_);
  std::swap(packageid_, other->packageid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAMAddFreeLicense::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAMAddFreeLicense

// optional fixed64 steamid = 1;
bool CMsgAMAddFreeLicense::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgAMAddFreeLicense::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgAMAddFreeLicense::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgAMAddFreeLicense::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgAMAddFreeLicense::steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMAddFreeLicense.steamid)
  return steamid_;
}
void CMsgAMAddFreeLicense::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMAddFreeLicense.steamid)
}

// optional uint32 ip_public = 2;
bool CMsgAMAddFreeLicense::has_ip_public() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgAMAddFreeLicense::set_has_ip_public() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgAMAddFreeLicense::clear_has_ip_public() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgAMAddFreeLicense::clear_ip_public() {
  ip_public_ = 0u;
  clear_has_ip_public();
}
::google::protobuf::uint32 CMsgAMAddFreeLicense::ip_public() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMAddFreeLicense.ip_public)
  return ip_public_;
}
void CMsgAMAddFreeLicense::set_ip_public(::google::protobuf::uint32 value) {
  set_has_ip_public();
  ip_public_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMAddFreeLicense.ip_public)
}

// optional uint32 packageid = 3;
bool CMsgAMAddFreeLicense::has_packageid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgAMAddFreeLicense::set_has_packageid() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgAMAddFreeLicense::clear_has_packageid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgAMAddFreeLicense::clear_packageid() {
  packageid_ = 0u;
  clear_has_packageid();
}
::google::protobuf::uint32 CMsgAMAddFreeLicense::packageid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMAddFreeLicense.packageid)
  return packageid_;
}
void CMsgAMAddFreeLicense::set_packageid(::google::protobuf::uint32 value) {
  set_has_packageid();
  packageid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMAddFreeLicense.packageid)
}

// optional string store_country_code = 4;
bool CMsgAMAddFreeLicense::has_store_country_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAMAddFreeLicense::set_has_store_country_code() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAMAddFreeLicense::clear_has_store_country_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAMAddFreeLicense::clear_store_country_code() {
  store_country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_store_country_code();
}
const ::std::string& CMsgAMAddFreeLicense::store_country_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMAddFreeLicense.store_country_code)
  return store_country_code_.GetNoArena();
}
void CMsgAMAddFreeLicense::set_store_country_code(const ::std::string& value) {
  set_has_store_country_code();
  store_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMAddFreeLicense.store_country_code)
}
#if LANG_CXX11
void CMsgAMAddFreeLicense::set_store_country_code(::std::string&& value) {
  set_has_store_country_code();
  store_country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgAMAddFreeLicense.store_country_code)
}
#endif
void CMsgAMAddFreeLicense::set_store_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_store_country_code();
  store_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgAMAddFreeLicense.store_country_code)
}
void CMsgAMAddFreeLicense::set_store_country_code(const char* value, size_t size) {
  set_has_store_country_code();
  store_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgAMAddFreeLicense.store_country_code)
}
::std::string* CMsgAMAddFreeLicense::mutable_store_country_code() {
  set_has_store_country_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgAMAddFreeLicense.store_country_code)
  return store_country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgAMAddFreeLicense::release_store_country_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgAMAddFreeLicense.store_country_code)
  clear_has_store_country_code();
  return store_country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgAMAddFreeLicense::set_allocated_store_country_code(::std::string* store_country_code) {
  if (store_country_code != NULL) {
    set_has_store_country_code();
  } else {
    clear_has_store_country_code();
  }
  store_country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), store_country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgAMAddFreeLicense.store_country_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMAddFreeLicenseResponse::kEresultFieldNumber;
const int CMsgAMAddFreeLicenseResponse::kPurchaseResultDetailFieldNumber;
const int CMsgAMAddFreeLicenseResponse::kTransidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMAddFreeLicenseResponse::CMsgAMAddFreeLicenseResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMAddFreeLicenseResponse)
}
CMsgAMAddFreeLicenseResponse::CMsgAMAddFreeLicenseResponse(const CMsgAMAddFreeLicenseResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transid_, &from.transid_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&transid_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMAddFreeLicenseResponse)
}

void CMsgAMAddFreeLicenseResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&transid_, 0, reinterpret_cast<char*>(&purchase_result_detail_) -
    reinterpret_cast<char*>(&transid_) + sizeof(purchase_result_detail_));
  eresult_ = 2;
}

CMsgAMAddFreeLicenseResponse::~CMsgAMAddFreeLicenseResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMAddFreeLicenseResponse)
  SharedDtor();
}

void CMsgAMAddFreeLicenseResponse::SharedDtor() {
}

void CMsgAMAddFreeLicenseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMAddFreeLicenseResponse::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAMAddFreeLicenseResponse& CMsgAMAddFreeLicenseResponse::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAMAddFreeLicenseResponse* CMsgAMAddFreeLicenseResponse::New(::google::protobuf::Arena* arena) const {
  CMsgAMAddFreeLicenseResponse* n = new CMsgAMAddFreeLicenseResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAMAddFreeLicenseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMAddFreeLicenseResponse)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&transid_, 0, reinterpret_cast<char*>(&purchase_result_detail_) -
      reinterpret_cast<char*>(&transid_) + sizeof(purchase_result_detail_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAMAddFreeLicenseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMAddFreeLicenseResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 purchase_result_detail = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_purchase_result_detail();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purchase_result_detail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 transid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_transid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &transid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMAddFreeLicenseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMAddFreeLicenseResponse)
  return false;
#undef DO_
}

void CMsgAMAddFreeLicenseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMAddFreeLicenseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 purchase_result_detail = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->purchase_result_detail(), output);
  }

  // optional fixed64 transid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->transid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMAddFreeLicenseResponse)
}

::google::protobuf::uint8* CMsgAMAddFreeLicenseResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMAddFreeLicenseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 purchase_result_detail = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->purchase_result_detail(), target);
  }

  // optional fixed64 transid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->transid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMAddFreeLicenseResponse)
  return target;
}

size_t CMsgAMAddFreeLicenseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMAddFreeLicenseResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 transid = 3;
    if (has_transid()) {
      total_size += 1 + 8;
    }

    // optional int32 purchase_result_detail = 2;
    if (has_purchase_result_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purchase_result_detail());
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMAddFreeLicenseResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMAddFreeLicenseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMAddFreeLicenseResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAMAddFreeLicenseResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMAddFreeLicenseResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMAddFreeLicenseResponse)
    MergeFrom(*source);
  }
}

void CMsgAMAddFreeLicenseResponse::MergeFrom(const CMsgAMAddFreeLicenseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMAddFreeLicenseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      transid_ = from.transid_;
    }
    if (cached_has_bits & 0x00000002u) {
      purchase_result_detail_ = from.purchase_result_detail_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMAddFreeLicenseResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMAddFreeLicenseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMAddFreeLicenseResponse::CopyFrom(const CMsgAMAddFreeLicenseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMAddFreeLicenseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMAddFreeLicenseResponse::IsInitialized() const {
  return true;
}

void CMsgAMAddFreeLicenseResponse::Swap(CMsgAMAddFreeLicenseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMAddFreeLicenseResponse::InternalSwap(CMsgAMAddFreeLicenseResponse* other) {
  std::swap(transid_, other->transid_);
  std::swap(purchase_result_detail_, other->purchase_result_detail_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAMAddFreeLicenseResponse::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAMAddFreeLicenseResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgAMAddFreeLicenseResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgAMAddFreeLicenseResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgAMAddFreeLicenseResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgAMAddFreeLicenseResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgAMAddFreeLicenseResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMAddFreeLicenseResponse.eresult)
  return eresult_;
}
void CMsgAMAddFreeLicenseResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMAddFreeLicenseResponse.eresult)
}

// optional int32 purchase_result_detail = 2;
bool CMsgAMAddFreeLicenseResponse::has_purchase_result_detail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgAMAddFreeLicenseResponse::set_has_purchase_result_detail() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgAMAddFreeLicenseResponse::clear_has_purchase_result_detail() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgAMAddFreeLicenseResponse::clear_purchase_result_detail() {
  purchase_result_detail_ = 0;
  clear_has_purchase_result_detail();
}
::google::protobuf::int32 CMsgAMAddFreeLicenseResponse::purchase_result_detail() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMAddFreeLicenseResponse.purchase_result_detail)
  return purchase_result_detail_;
}
void CMsgAMAddFreeLicenseResponse::set_purchase_result_detail(::google::protobuf::int32 value) {
  set_has_purchase_result_detail();
  purchase_result_detail_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMAddFreeLicenseResponse.purchase_result_detail)
}

// optional fixed64 transid = 3;
bool CMsgAMAddFreeLicenseResponse::has_transid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAMAddFreeLicenseResponse::set_has_transid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAMAddFreeLicenseResponse::clear_has_transid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAMAddFreeLicenseResponse::clear_transid() {
  transid_ = GOOGLE_ULONGLONG(0);
  clear_has_transid();
}
::google::protobuf::uint64 CMsgAMAddFreeLicenseResponse::transid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMAddFreeLicenseResponse.transid)
  return transid_;
}
void CMsgAMAddFreeLicenseResponse::set_transid(::google::protobuf::uint64 value) {
  set_has_transid();
  transid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMAddFreeLicenseResponse.transid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgGetIPLocation::kIpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgGetIPLocation::CGCMsgGetIPLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgGetIPLocation)
}
CGCMsgGetIPLocation::CGCMsgGetIPLocation(const CGCMsgGetIPLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ips_(from.ips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgGetIPLocation)
}

void CGCMsgGetIPLocation::SharedCtor() {
  _cached_size_ = 0;
}

CGCMsgGetIPLocation::~CGCMsgGetIPLocation() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgGetIPLocation)
  SharedDtor();
}

void CGCMsgGetIPLocation::SharedDtor() {
}

void CGCMsgGetIPLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGetIPLocation::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgGetIPLocation& CGCMsgGetIPLocation::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCMsgGetIPLocation* CGCMsgGetIPLocation::New(::google::protobuf::Arena* arena) const {
  CGCMsgGetIPLocation* n = new CGCMsgGetIPLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgGetIPLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgGetIPLocation)
  ips_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgGetIPLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgGetIPLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 ips = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 13u, input, this->mutable_ips())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ips())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgGetIPLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgGetIPLocation)
  return false;
#undef DO_
}

void CGCMsgGetIPLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgGetIPLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 ips = 1;
  for (int i = 0, n = this->ips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      1, this->ips(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgGetIPLocation)
}

::google::protobuf::uint8* CGCMsgGetIPLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgGetIPLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 ips = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(1, this->ips_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgGetIPLocation)
  return target;
}

size_t CGCMsgGetIPLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgGetIPLocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed32 ips = 1;
  {
    unsigned int count = this->ips_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ips_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGetIPLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgGetIPLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGetIPLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgGetIPLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgGetIPLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgGetIPLocation)
    MergeFrom(*source);
  }
}

void CGCMsgGetIPLocation::MergeFrom(const CGCMsgGetIPLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgGetIPLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ips_.MergeFrom(from.ips_);
}

void CGCMsgGetIPLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgGetIPLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGetIPLocation::CopyFrom(const CGCMsgGetIPLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgGetIPLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetIPLocation::IsInitialized() const {
  return true;
}

void CGCMsgGetIPLocation::Swap(CGCMsgGetIPLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgGetIPLocation::InternalSwap(CGCMsgGetIPLocation* other) {
  ips_.InternalSwap(&other->ips_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgGetIPLocation::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCMsgGetIPLocation

// repeated fixed32 ips = 1;
int CGCMsgGetIPLocation::ips_size() const {
  return ips_.size();
}
void CGCMsgGetIPLocation::clear_ips() {
  ips_.Clear();
}
::google::protobuf::uint32 CGCMsgGetIPLocation::ips(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgGetIPLocation.ips)
  return ips_.Get(index);
}
void CGCMsgGetIPLocation::set_ips(int index, ::google::protobuf::uint32 value) {
  ips_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgGetIPLocation.ips)
}
void CGCMsgGetIPLocation::add_ips(::google::protobuf::uint32 value) {
  ips_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CGCMsgGetIPLocation.ips)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CGCMsgGetIPLocation::ips() const {
  // @@protoc_insertion_point(field_list:proto.dota.CGCMsgGetIPLocation.ips)
  return ips_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CGCMsgGetIPLocation::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CGCMsgGetIPLocation.ips)
  return &ips_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CIPLocationInfo::kIpFieldNumber;
const int CIPLocationInfo::kLatitudeFieldNumber;
const int CIPLocationInfo::kLongitudeFieldNumber;
const int CIPLocationInfo::kCountryFieldNumber;
const int CIPLocationInfo::kStateFieldNumber;
const int CIPLocationInfo::kCityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CIPLocationInfo::CIPLocationInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CIPLocationInfo)
}
CIPLocationInfo::CIPLocationInfo(const CIPLocationInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_state()) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_city()) {
    city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  ::memcpy(&ip_, &from.ip_,
    reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&ip_) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CIPLocationInfo)
}

void CIPLocationInfo::SharedCtor() {
  _cached_size_ = 0;
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ip_, 0, reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&ip_) + sizeof(longitude_));
}

CIPLocationInfo::~CIPLocationInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CIPLocationInfo)
  SharedDtor();
}

void CIPLocationInfo::SharedDtor() {
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CIPLocationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CIPLocationInfo::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CIPLocationInfo& CIPLocationInfo::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CIPLocationInfo* CIPLocationInfo::New(::google::protobuf::Arena* arena) const {
  CIPLocationInfo* n = new CIPLocationInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CIPLocationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CIPLocationInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_country()) {
      GOOGLE_DCHECK(!country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_.UnsafeRawStringPointer())->clear();
    }
    if (has_state()) {
      GOOGLE_DCHECK(!state_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*state_.UnsafeRawStringPointer())->clear();
    }
    if (has_city()) {
      GOOGLE_DCHECK(!city_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*city_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&ip_, 0, reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&ip_) + sizeof(longitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CIPLocationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CIPLocationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CIPLocationInfo.country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CIPLocationInfo.state");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string city = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CIPLocationInfo.city");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CIPLocationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CIPLocationInfo)
  return false;
#undef DO_
}

void CIPLocationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CIPLocationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ip = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }

  // optional float latitude = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->latitude(), output);
  }

  // optional float longitude = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->longitude(), output);
  }

  // optional string country = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CIPLocationInfo.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->country(), output);
  }

  // optional string state = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CIPLocationInfo.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->state(), output);
  }

  // optional string city = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CIPLocationInfo.city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->city(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CIPLocationInfo)
}

::google::protobuf::uint8* CIPLocationInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CIPLocationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ip = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }

  // optional float latitude = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->latitude(), target);
  }

  // optional float longitude = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->longitude(), target);
  }

  // optional string country = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CIPLocationInfo.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->country(), target);
  }

  // optional string state = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CIPLocationInfo.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->state(), target);
  }

  // optional string city = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CIPLocationInfo.city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->city(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CIPLocationInfo)
  return target;
}

size_t CIPLocationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CIPLocationInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string country = 4;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional string city = 6;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional uint32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional float latitude = 2;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 3;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CIPLocationInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CIPLocationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CIPLocationInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CIPLocationInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CIPLocationInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CIPLocationInfo)
    MergeFrom(*source);
  }
}

void CIPLocationInfo::MergeFrom(const CIPLocationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CIPLocationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_state();
      state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_city();
      city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
    }
    if (cached_has_bits & 0x00000008u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000010u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      longitude_ = from.longitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CIPLocationInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CIPLocationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CIPLocationInfo::CopyFrom(const CIPLocationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CIPLocationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIPLocationInfo::IsInitialized() const {
  return true;
}

void CIPLocationInfo::Swap(CIPLocationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CIPLocationInfo::InternalSwap(CIPLocationInfo* other) {
  country_.Swap(&other->country_);
  state_.Swap(&other->state_);
  city_.Swap(&other->city_);
  std::swap(ip_, other->ip_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CIPLocationInfo::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CIPLocationInfo

// optional uint32 ip = 1;
bool CIPLocationInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CIPLocationInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
void CIPLocationInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
void CIPLocationInfo::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
::google::protobuf::uint32 CIPLocationInfo::ip() const {
  // @@protoc_insertion_point(field_get:proto.dota.CIPLocationInfo.ip)
  return ip_;
}
void CIPLocationInfo::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CIPLocationInfo.ip)
}

// optional float latitude = 2;
bool CIPLocationInfo::has_latitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CIPLocationInfo::set_has_latitude() {
  _has_bits_[0] |= 0x00000010u;
}
void CIPLocationInfo::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000010u;
}
void CIPLocationInfo::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
float CIPLocationInfo::latitude() const {
  // @@protoc_insertion_point(field_get:proto.dota.CIPLocationInfo.latitude)
  return latitude_;
}
void CIPLocationInfo::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CIPLocationInfo.latitude)
}

// optional float longitude = 3;
bool CIPLocationInfo::has_longitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CIPLocationInfo::set_has_longitude() {
  _has_bits_[0] |= 0x00000020u;
}
void CIPLocationInfo::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000020u;
}
void CIPLocationInfo::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
float CIPLocationInfo::longitude() const {
  // @@protoc_insertion_point(field_get:proto.dota.CIPLocationInfo.longitude)
  return longitude_;
}
void CIPLocationInfo::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CIPLocationInfo.longitude)
}

// optional string country = 4;
bool CIPLocationInfo::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CIPLocationInfo::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
void CIPLocationInfo::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
void CIPLocationInfo::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
const ::std::string& CIPLocationInfo::country() const {
  // @@protoc_insertion_point(field_get:proto.dota.CIPLocationInfo.country)
  return country_.GetNoArena();
}
void CIPLocationInfo::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CIPLocationInfo.country)
}
#if LANG_CXX11
void CIPLocationInfo::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CIPLocationInfo.country)
}
#endif
void CIPLocationInfo::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CIPLocationInfo.country)
}
void CIPLocationInfo::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CIPLocationInfo.country)
}
::std::string* CIPLocationInfo::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:proto.dota.CIPLocationInfo.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CIPLocationInfo::release_country() {
  // @@protoc_insertion_point(field_release:proto.dota.CIPLocationInfo.country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CIPLocationInfo::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CIPLocationInfo.country)
}

// optional string state = 5;
bool CIPLocationInfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CIPLocationInfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
void CIPLocationInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void CIPLocationInfo::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_state();
}
const ::std::string& CIPLocationInfo::state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CIPLocationInfo.state)
  return state_.GetNoArena();
}
void CIPLocationInfo::set_state(const ::std::string& value) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CIPLocationInfo.state)
}
#if LANG_CXX11
void CIPLocationInfo::set_state(::std::string&& value) {
  set_has_state();
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CIPLocationInfo.state)
}
#endif
void CIPLocationInfo::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CIPLocationInfo.state)
}
void CIPLocationInfo::set_state(const char* value, size_t size) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CIPLocationInfo.state)
}
::std::string* CIPLocationInfo::mutable_state() {
  set_has_state();
  // @@protoc_insertion_point(field_mutable:proto.dota.CIPLocationInfo.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CIPLocationInfo::release_state() {
  // @@protoc_insertion_point(field_release:proto.dota.CIPLocationInfo.state)
  clear_has_state();
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CIPLocationInfo::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    set_has_state();
  } else {
    clear_has_state();
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CIPLocationInfo.state)
}

// optional string city = 6;
bool CIPLocationInfo::has_city() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CIPLocationInfo::set_has_city() {
  _has_bits_[0] |= 0x00000004u;
}
void CIPLocationInfo::clear_has_city() {
  _has_bits_[0] &= ~0x00000004u;
}
void CIPLocationInfo::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
const ::std::string& CIPLocationInfo::city() const {
  // @@protoc_insertion_point(field_get:proto.dota.CIPLocationInfo.city)
  return city_.GetNoArena();
}
void CIPLocationInfo::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CIPLocationInfo.city)
}
#if LANG_CXX11
void CIPLocationInfo::set_city(::std::string&& value) {
  set_has_city();
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CIPLocationInfo.city)
}
#endif
void CIPLocationInfo::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CIPLocationInfo.city)
}
void CIPLocationInfo::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CIPLocationInfo.city)
}
::std::string* CIPLocationInfo::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:proto.dota.CIPLocationInfo.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CIPLocationInfo::release_city() {
  // @@protoc_insertion_point(field_release:proto.dota.CIPLocationInfo.city)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CIPLocationInfo::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CIPLocationInfo.city)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgGetIPLocationResponse::kInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgGetIPLocationResponse::CGCMsgGetIPLocationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgGetIPLocationResponse)
}
CGCMsgGetIPLocationResponse::CGCMsgGetIPLocationResponse(const CGCMsgGetIPLocationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgGetIPLocationResponse)
}

void CGCMsgGetIPLocationResponse::SharedCtor() {
  _cached_size_ = 0;
}

CGCMsgGetIPLocationResponse::~CGCMsgGetIPLocationResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgGetIPLocationResponse)
  SharedDtor();
}

void CGCMsgGetIPLocationResponse::SharedDtor() {
}

void CGCMsgGetIPLocationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGetIPLocationResponse::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgGetIPLocationResponse& CGCMsgGetIPLocationResponse::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCMsgGetIPLocationResponse* CGCMsgGetIPLocationResponse::New(::google::protobuf::Arena* arena) const {
  CGCMsgGetIPLocationResponse* n = new CGCMsgGetIPLocationResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgGetIPLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgGetIPLocationResponse)
  infos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgGetIPLocationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgGetIPLocationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CIPLocationInfo infos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgGetIPLocationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgGetIPLocationResponse)
  return false;
#undef DO_
}

void CGCMsgGetIPLocationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgGetIPLocationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CIPLocationInfo infos = 1;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgGetIPLocationResponse)
}

::google::protobuf::uint8* CGCMsgGetIPLocationResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgGetIPLocationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CIPLocationInfo infos = 1;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->infos(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgGetIPLocationResponse)
  return target;
}

size_t CGCMsgGetIPLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgGetIPLocationResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CIPLocationInfo infos = 1;
  {
    unsigned int count = this->infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGetIPLocationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgGetIPLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGetIPLocationResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgGetIPLocationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgGetIPLocationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgGetIPLocationResponse)
    MergeFrom(*source);
  }
}

void CGCMsgGetIPLocationResponse::MergeFrom(const CGCMsgGetIPLocationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgGetIPLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void CGCMsgGetIPLocationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgGetIPLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGetIPLocationResponse::CopyFrom(const CGCMsgGetIPLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgGetIPLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetIPLocationResponse::IsInitialized() const {
  return true;
}

void CGCMsgGetIPLocationResponse::Swap(CGCMsgGetIPLocationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgGetIPLocationResponse::InternalSwap(CGCMsgGetIPLocationResponse* other) {
  infos_.InternalSwap(&other->infos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgGetIPLocationResponse::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCMsgGetIPLocationResponse

// repeated .proto.dota.CIPLocationInfo infos = 1;
int CGCMsgGetIPLocationResponse::infos_size() const {
  return infos_.size();
}
void CGCMsgGetIPLocationResponse::clear_infos() {
  infos_.Clear();
}
const ::proto::dota::CIPLocationInfo& CGCMsgGetIPLocationResponse::infos(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgGetIPLocationResponse.infos)
  return infos_.Get(index);
}
::proto::dota::CIPLocationInfo* CGCMsgGetIPLocationResponse::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCMsgGetIPLocationResponse.infos)
  return infos_.Mutable(index);
}
::proto::dota::CIPLocationInfo* CGCMsgGetIPLocationResponse::add_infos() {
  // @@protoc_insertion_point(field_add:proto.dota.CGCMsgGetIPLocationResponse.infos)
  return infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CIPLocationInfo >*
CGCMsgGetIPLocationResponse::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CGCMsgGetIPLocationResponse.infos)
  return &infos_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CIPLocationInfo >&
CGCMsgGetIPLocationResponse::infos() const {
  // @@protoc_insertion_point(field_list:proto.dota.CGCMsgGetIPLocationResponse.infos)
  return infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgGetIPASN::kIpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgGetIPASN::CGCMsgGetIPASN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgGetIPASN)
}
CGCMsgGetIPASN::CGCMsgGetIPASN(const CGCMsgGetIPASN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ips_(from.ips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgGetIPASN)
}

void CGCMsgGetIPASN::SharedCtor() {
  _cached_size_ = 0;
}

CGCMsgGetIPASN::~CGCMsgGetIPASN() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgGetIPASN)
  SharedDtor();
}

void CGCMsgGetIPASN::SharedDtor() {
}

void CGCMsgGetIPASN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGetIPASN::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgGetIPASN& CGCMsgGetIPASN::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCMsgGetIPASN* CGCMsgGetIPASN::New(::google::protobuf::Arena* arena) const {
  CGCMsgGetIPASN* n = new CGCMsgGetIPASN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgGetIPASN::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgGetIPASN)
  ips_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgGetIPASN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgGetIPASN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 ips = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 13u, input, this->mutable_ips())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ips())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgGetIPASN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgGetIPASN)
  return false;
#undef DO_
}

void CGCMsgGetIPASN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgGetIPASN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 ips = 1;
  for (int i = 0, n = this->ips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      1, this->ips(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgGetIPASN)
}

::google::protobuf::uint8* CGCMsgGetIPASN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgGetIPASN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 ips = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(1, this->ips_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgGetIPASN)
  return target;
}

size_t CGCMsgGetIPASN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgGetIPASN)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed32 ips = 1;
  {
    unsigned int count = this->ips_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ips_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGetIPASN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgGetIPASN)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGetIPASN* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgGetIPASN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgGetIPASN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgGetIPASN)
    MergeFrom(*source);
  }
}

void CGCMsgGetIPASN::MergeFrom(const CGCMsgGetIPASN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgGetIPASN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ips_.MergeFrom(from.ips_);
}

void CGCMsgGetIPASN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgGetIPASN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGetIPASN::CopyFrom(const CGCMsgGetIPASN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgGetIPASN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetIPASN::IsInitialized() const {
  return true;
}

void CGCMsgGetIPASN::Swap(CGCMsgGetIPASN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgGetIPASN::InternalSwap(CGCMsgGetIPASN* other) {
  ips_.InternalSwap(&other->ips_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgGetIPASN::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCMsgGetIPASN

// repeated fixed32 ips = 1;
int CGCMsgGetIPASN::ips_size() const {
  return ips_.size();
}
void CGCMsgGetIPASN::clear_ips() {
  ips_.Clear();
}
::google::protobuf::uint32 CGCMsgGetIPASN::ips(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgGetIPASN.ips)
  return ips_.Get(index);
}
void CGCMsgGetIPASN::set_ips(int index, ::google::protobuf::uint32 value) {
  ips_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgGetIPASN.ips)
}
void CGCMsgGetIPASN::add_ips(::google::protobuf::uint32 value) {
  ips_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CGCMsgGetIPASN.ips)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CGCMsgGetIPASN::ips() const {
  // @@protoc_insertion_point(field_list:proto.dota.CGCMsgGetIPASN.ips)
  return ips_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CGCMsgGetIPASN::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CGCMsgGetIPASN.ips)
  return &ips_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CIPASNInfo::kIpFieldNumber;
const int CIPASNInfo::kAsnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CIPASNInfo::CIPASNInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CIPASNInfo)
}
CIPASNInfo::CIPASNInfo(const CIPASNInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    reinterpret_cast<char*>(&asn_) -
    reinterpret_cast<char*>(&ip_) + sizeof(asn_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CIPASNInfo)
}

void CIPASNInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ip_, 0, reinterpret_cast<char*>(&asn_) -
    reinterpret_cast<char*>(&ip_) + sizeof(asn_));
}

CIPASNInfo::~CIPASNInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CIPASNInfo)
  SharedDtor();
}

void CIPASNInfo::SharedDtor() {
}

void CIPASNInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CIPASNInfo::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CIPASNInfo& CIPASNInfo::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CIPASNInfo* CIPASNInfo::New(::google::protobuf::Arena* arena) const {
  CIPASNInfo* n = new CIPASNInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CIPASNInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CIPASNInfo)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ip_, 0, reinterpret_cast<char*>(&asn_) -
      reinterpret_cast<char*>(&ip_) + sizeof(asn_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CIPASNInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CIPASNInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 asn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_asn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CIPASNInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CIPASNInfo)
  return false;
#undef DO_
}

void CIPASNInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CIPASNInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->ip(), output);
  }

  // optional uint32 asn = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->asn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CIPASNInfo)
}

::google::protobuf::uint8* CIPASNInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CIPASNInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->ip(), target);
  }

  // optional uint32 asn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->asn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CIPASNInfo)
  return target;
}

size_t CIPASNInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CIPASNInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed32 ip = 1;
    if (has_ip()) {
      total_size += 1 + 4;
    }

    // optional uint32 asn = 2;
    if (has_asn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->asn());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CIPASNInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CIPASNInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CIPASNInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CIPASNInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CIPASNInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CIPASNInfo)
    MergeFrom(*source);
  }
}

void CIPASNInfo::MergeFrom(const CIPASNInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CIPASNInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      asn_ = from.asn_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CIPASNInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CIPASNInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CIPASNInfo::CopyFrom(const CIPASNInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CIPASNInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIPASNInfo::IsInitialized() const {
  return true;
}

void CIPASNInfo::Swap(CIPASNInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CIPASNInfo::InternalSwap(CIPASNInfo* other) {
  std::swap(ip_, other->ip_);
  std::swap(asn_, other->asn_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CIPASNInfo::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CIPASNInfo

// optional fixed32 ip = 1;
bool CIPASNInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CIPASNInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void CIPASNInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void CIPASNInfo::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
::google::protobuf::uint32 CIPASNInfo::ip() const {
  // @@protoc_insertion_point(field_get:proto.dota.CIPASNInfo.ip)
  return ip_;
}
void CIPASNInfo::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CIPASNInfo.ip)
}

// optional uint32 asn = 2;
bool CIPASNInfo::has_asn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CIPASNInfo::set_has_asn() {
  _has_bits_[0] |= 0x00000002u;
}
void CIPASNInfo::clear_has_asn() {
  _has_bits_[0] &= ~0x00000002u;
}
void CIPASNInfo::clear_asn() {
  asn_ = 0u;
  clear_has_asn();
}
::google::protobuf::uint32 CIPASNInfo::asn() const {
  // @@protoc_insertion_point(field_get:proto.dota.CIPASNInfo.asn)
  return asn_;
}
void CIPASNInfo::set_asn(::google::protobuf::uint32 value) {
  set_has_asn();
  asn_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CIPASNInfo.asn)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgGetIPASNResponse::kInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgGetIPASNResponse::CGCMsgGetIPASNResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgGetIPASNResponse)
}
CGCMsgGetIPASNResponse::CGCMsgGetIPASNResponse(const CGCMsgGetIPASNResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgGetIPASNResponse)
}

void CGCMsgGetIPASNResponse::SharedCtor() {
  _cached_size_ = 0;
}

CGCMsgGetIPASNResponse::~CGCMsgGetIPASNResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgGetIPASNResponse)
  SharedDtor();
}

void CGCMsgGetIPASNResponse::SharedDtor() {
}

void CGCMsgGetIPASNResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGetIPASNResponse::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgGetIPASNResponse& CGCMsgGetIPASNResponse::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCMsgGetIPASNResponse* CGCMsgGetIPASNResponse::New(::google::protobuf::Arena* arena) const {
  CGCMsgGetIPASNResponse* n = new CGCMsgGetIPASNResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgGetIPASNResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgGetIPASNResponse)
  infos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgGetIPASNResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgGetIPASNResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CIPASNInfo infos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgGetIPASNResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgGetIPASNResponse)
  return false;
#undef DO_
}

void CGCMsgGetIPASNResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgGetIPASNResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CIPASNInfo infos = 1;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgGetIPASNResponse)
}

::google::protobuf::uint8* CGCMsgGetIPASNResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgGetIPASNResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CIPASNInfo infos = 1;
  for (unsigned int i = 0, n = this->infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->infos(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgGetIPASNResponse)
  return target;
}

size_t CGCMsgGetIPASNResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgGetIPASNResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CIPASNInfo infos = 1;
  {
    unsigned int count = this->infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGetIPASNResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgGetIPASNResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGetIPASNResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgGetIPASNResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgGetIPASNResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgGetIPASNResponse)
    MergeFrom(*source);
  }
}

void CGCMsgGetIPASNResponse::MergeFrom(const CGCMsgGetIPASNResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgGetIPASNResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void CGCMsgGetIPASNResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgGetIPASNResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGetIPASNResponse::CopyFrom(const CGCMsgGetIPASNResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgGetIPASNResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetIPASNResponse::IsInitialized() const {
  return true;
}

void CGCMsgGetIPASNResponse::Swap(CGCMsgGetIPASNResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgGetIPASNResponse::InternalSwap(CGCMsgGetIPASNResponse* other) {
  infos_.InternalSwap(&other->infos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgGetIPASNResponse::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCMsgGetIPASNResponse

// repeated .proto.dota.CIPASNInfo infos = 1;
int CGCMsgGetIPASNResponse::infos_size() const {
  return infos_.size();
}
void CGCMsgGetIPASNResponse::clear_infos() {
  infos_.Clear();
}
const ::proto::dota::CIPASNInfo& CGCMsgGetIPASNResponse::infos(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgGetIPASNResponse.infos)
  return infos_.Get(index);
}
::proto::dota::CIPASNInfo* CGCMsgGetIPASNResponse::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCMsgGetIPASNResponse.infos)
  return infos_.Mutable(index);
}
::proto::dota::CIPASNInfo* CGCMsgGetIPASNResponse::add_infos() {
  // @@protoc_insertion_point(field_add:proto.dota.CGCMsgGetIPASNResponse.infos)
  return infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CIPASNInfo >*
CGCMsgGetIPASNResponse::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CGCMsgGetIPASNResponse.infos)
  return &infos_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CIPASNInfo >&
CGCMsgGetIPASNResponse::infos() const {
  // @@protoc_insertion_point(field_list:proto.dota.CGCMsgGetIPASNResponse.infos)
  return infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgSystemStatsSchema::kGcAppIdFieldNumber;
const int CGCMsgSystemStatsSchema::kSchemaKvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgSystemStatsSchema::CGCMsgSystemStatsSchema()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgSystemStatsSchema)
}
CGCMsgSystemStatsSchema::CGCMsgSystemStatsSchema(const CGCMsgSystemStatsSchema& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  schema_kv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_schema_kv()) {
    schema_kv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_kv_);
  }
  gc_app_id_ = from.gc_app_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgSystemStatsSchema)
}

void CGCMsgSystemStatsSchema::SharedCtor() {
  _cached_size_ = 0;
  schema_kv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gc_app_id_ = 0u;
}

CGCMsgSystemStatsSchema::~CGCMsgSystemStatsSchema() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgSystemStatsSchema)
  SharedDtor();
}

void CGCMsgSystemStatsSchema::SharedDtor() {
  schema_kv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgSystemStatsSchema::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgSystemStatsSchema::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgSystemStatsSchema& CGCMsgSystemStatsSchema::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCMsgSystemStatsSchema* CGCMsgSystemStatsSchema::New(::google::protobuf::Arena* arena) const {
  CGCMsgSystemStatsSchema* n = new CGCMsgSystemStatsSchema;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgSystemStatsSchema::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgSystemStatsSchema)
  if (has_schema_kv()) {
    GOOGLE_DCHECK(!schema_kv_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*schema_kv_.UnsafeRawStringPointer())->clear();
  }
  gc_app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgSystemStatsSchema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgSystemStatsSchema)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gc_app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_gc_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gc_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes schema_kv = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_schema_kv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgSystemStatsSchema)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgSystemStatsSchema)
  return false;
#undef DO_
}

void CGCMsgSystemStatsSchema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgSystemStatsSchema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gc_app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gc_app_id(), output);
  }

  // optional bytes schema_kv = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->schema_kv(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgSystemStatsSchema)
}

::google::protobuf::uint8* CGCMsgSystemStatsSchema::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgSystemStatsSchema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gc_app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gc_app_id(), target);
  }

  // optional bytes schema_kv = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->schema_kv(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgSystemStatsSchema)
  return target;
}

size_t CGCMsgSystemStatsSchema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgSystemStatsSchema)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes schema_kv = 2;
    if (has_schema_kv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->schema_kv());
    }

    // optional uint32 gc_app_id = 1;
    if (has_gc_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gc_app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgSystemStatsSchema::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgSystemStatsSchema)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgSystemStatsSchema* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgSystemStatsSchema>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgSystemStatsSchema)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgSystemStatsSchema)
    MergeFrom(*source);
  }
}

void CGCMsgSystemStatsSchema::MergeFrom(const CGCMsgSystemStatsSchema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgSystemStatsSchema)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_schema_kv();
      schema_kv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema_kv_);
    }
    if (cached_has_bits & 0x00000002u) {
      gc_app_id_ = from.gc_app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgSystemStatsSchema::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgSystemStatsSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgSystemStatsSchema::CopyFrom(const CGCMsgSystemStatsSchema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgSystemStatsSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgSystemStatsSchema::IsInitialized() const {
  return true;
}

void CGCMsgSystemStatsSchema::Swap(CGCMsgSystemStatsSchema* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgSystemStatsSchema::InternalSwap(CGCMsgSystemStatsSchema* other) {
  schema_kv_.Swap(&other->schema_kv_);
  std::swap(gc_app_id_, other->gc_app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgSystemStatsSchema::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCMsgSystemStatsSchema

// optional uint32 gc_app_id = 1;
bool CGCMsgSystemStatsSchema::has_gc_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGCMsgSystemStatsSchema::set_has_gc_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CGCMsgSystemStatsSchema::clear_has_gc_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGCMsgSystemStatsSchema::clear_gc_app_id() {
  gc_app_id_ = 0u;
  clear_has_gc_app_id();
}
::google::protobuf::uint32 CGCMsgSystemStatsSchema::gc_app_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgSystemStatsSchema.gc_app_id)
  return gc_app_id_;
}
void CGCMsgSystemStatsSchema::set_gc_app_id(::google::protobuf::uint32 value) {
  set_has_gc_app_id();
  gc_app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgSystemStatsSchema.gc_app_id)
}

// optional bytes schema_kv = 2;
bool CGCMsgSystemStatsSchema::has_schema_kv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCMsgSystemStatsSchema::set_has_schema_kv() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCMsgSystemStatsSchema::clear_has_schema_kv() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCMsgSystemStatsSchema::clear_schema_kv() {
  schema_kv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_schema_kv();
}
const ::std::string& CGCMsgSystemStatsSchema::schema_kv() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgSystemStatsSchema.schema_kv)
  return schema_kv_.GetNoArena();
}
void CGCMsgSystemStatsSchema::set_schema_kv(const ::std::string& value) {
  set_has_schema_kv();
  schema_kv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgSystemStatsSchema.schema_kv)
}
#if LANG_CXX11
void CGCMsgSystemStatsSchema::set_schema_kv(::std::string&& value) {
  set_has_schema_kv();
  schema_kv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGCMsgSystemStatsSchema.schema_kv)
}
#endif
void CGCMsgSystemStatsSchema::set_schema_kv(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_schema_kv();
  schema_kv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGCMsgSystemStatsSchema.schema_kv)
}
void CGCMsgSystemStatsSchema::set_schema_kv(const void* value, size_t size) {
  set_has_schema_kv();
  schema_kv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGCMsgSystemStatsSchema.schema_kv)
}
::std::string* CGCMsgSystemStatsSchema::mutable_schema_kv() {
  set_has_schema_kv();
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCMsgSystemStatsSchema.schema_kv)
  return schema_kv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGCMsgSystemStatsSchema::release_schema_kv() {
  // @@protoc_insertion_point(field_release:proto.dota.CGCMsgSystemStatsSchema.schema_kv)
  clear_has_schema_kv();
  return schema_kv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGCMsgSystemStatsSchema::set_allocated_schema_kv(::std::string* schema_kv) {
  if (schema_kv != NULL) {
    set_has_schema_kv();
  } else {
    clear_has_schema_kv();
  }
  schema_kv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schema_kv);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGCMsgSystemStatsSchema.schema_kv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgGetSystemStats::CGCMsgGetSystemStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgGetSystemStats)
}
CGCMsgGetSystemStats::CGCMsgGetSystemStats(const CGCMsgGetSystemStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgGetSystemStats)
}

void CGCMsgGetSystemStats::SharedCtor() {
  _cached_size_ = 0;
}

CGCMsgGetSystemStats::~CGCMsgGetSystemStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgGetSystemStats)
  SharedDtor();
}

void CGCMsgGetSystemStats::SharedDtor() {
}

void CGCMsgGetSystemStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGetSystemStats::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgGetSystemStats& CGCMsgGetSystemStats::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCMsgGetSystemStats* CGCMsgGetSystemStats::New(::google::protobuf::Arena* arena) const {
  CGCMsgGetSystemStats* n = new CGCMsgGetSystemStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgGetSystemStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgGetSystemStats)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgGetSystemStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgGetSystemStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgGetSystemStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgGetSystemStats)
  return false;
#undef DO_
}

void CGCMsgGetSystemStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgGetSystemStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgGetSystemStats)
}

::google::protobuf::uint8* CGCMsgGetSystemStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgGetSystemStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgGetSystemStats)
  return target;
}

size_t CGCMsgGetSystemStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgGetSystemStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGetSystemStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgGetSystemStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGetSystemStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgGetSystemStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgGetSystemStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgGetSystemStats)
    MergeFrom(*source);
  }
}

void CGCMsgGetSystemStats::MergeFrom(const CGCMsgGetSystemStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgGetSystemStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGCMsgGetSystemStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgGetSystemStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGetSystemStats::CopyFrom(const CGCMsgGetSystemStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgGetSystemStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetSystemStats::IsInitialized() const {
  return true;
}

void CGCMsgGetSystemStats::Swap(CGCMsgGetSystemStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgGetSystemStats::InternalSwap(CGCMsgGetSystemStats* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgGetSystemStats::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCMsgGetSystemStats

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCMsgGetSystemStatsResponse::kGcAppIdFieldNumber;
const int CGCMsgGetSystemStatsResponse::kStatsKvFieldNumber;
const int CGCMsgGetSystemStatsResponse::kActiveJobsFieldNumber;
const int CGCMsgGetSystemStatsResponse::kYieldingJobsFieldNumber;
const int CGCMsgGetSystemStatsResponse::kUserSessionsFieldNumber;
const int CGCMsgGetSystemStatsResponse::kGameServerSessionsFieldNumber;
const int CGCMsgGetSystemStatsResponse::kSocachesFieldNumber;
const int CGCMsgGetSystemStatsResponse::kSocachesToUnloadFieldNumber;
const int CGCMsgGetSystemStatsResponse::kSocachesLoadingFieldNumber;
const int CGCMsgGetSystemStatsResponse::kWritebackQueueFieldNumber;
const int CGCMsgGetSystemStatsResponse::kSteamidLocksFieldNumber;
const int CGCMsgGetSystemStatsResponse::kLogonQueueFieldNumber;
const int CGCMsgGetSystemStatsResponse::kLogonJobsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCMsgGetSystemStatsResponse::CGCMsgGetSystemStatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCMsgGetSystemStatsResponse)
}
CGCMsgGetSystemStatsResponse::CGCMsgGetSystemStatsResponse(const CGCMsgGetSystemStatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stats_kv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stats_kv()) {
    stats_kv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stats_kv_);
  }
  ::memcpy(&gc_app_id_, &from.gc_app_id_,
    reinterpret_cast<char*>(&logon_jobs_) -
    reinterpret_cast<char*>(&gc_app_id_) + sizeof(logon_jobs_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCMsgGetSystemStatsResponse)
}

void CGCMsgGetSystemStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  stats_kv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gc_app_id_, 0, reinterpret_cast<char*>(&logon_jobs_) -
    reinterpret_cast<char*>(&gc_app_id_) + sizeof(logon_jobs_));
}

CGCMsgGetSystemStatsResponse::~CGCMsgGetSystemStatsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCMsgGetSystemStatsResponse)
  SharedDtor();
}

void CGCMsgGetSystemStatsResponse::SharedDtor() {
  stats_kv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgGetSystemStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCMsgGetSystemStatsResponse::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCMsgGetSystemStatsResponse& CGCMsgGetSystemStatsResponse::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCMsgGetSystemStatsResponse* CGCMsgGetSystemStatsResponse::New(::google::protobuf::Arena* arena) const {
  CGCMsgGetSystemStatsResponse* n = new CGCMsgGetSystemStatsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCMsgGetSystemStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCMsgGetSystemStatsResponse)
  if (has_stats_kv()) {
    GOOGLE_DCHECK(!stats_kv_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*stats_kv_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&gc_app_id_, 0, reinterpret_cast<char*>(&socaches_to_unload_) -
      reinterpret_cast<char*>(&gc_app_id_) + sizeof(socaches_to_unload_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&socaches_loading_, 0, reinterpret_cast<char*>(&logon_jobs_) -
      reinterpret_cast<char*>(&socaches_loading_) + sizeof(logon_jobs_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCMsgGetSystemStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCMsgGetSystemStatsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gc_app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_gc_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gc_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes stats_kv = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stats_kv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 active_jobs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_active_jobs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 yielding_jobs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_yielding_jobs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yielding_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 user_sessions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_user_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_server_sessions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_game_server_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 socaches = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_socaches();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socaches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 socaches_to_unload = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_socaches_to_unload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socaches_to_unload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 socaches_loading = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_socaches_loading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socaches_loading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 writeback_queue = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_writeback_queue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &writeback_queue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 steamid_locks = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_steamid_locks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steamid_locks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 logon_queue = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_logon_queue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logon_queue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 logon_jobs = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_logon_jobs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logon_jobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCMsgGetSystemStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCMsgGetSystemStatsResponse)
  return false;
#undef DO_
}

void CGCMsgGetSystemStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCMsgGetSystemStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gc_app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gc_app_id(), output);
  }

  // optional bytes stats_kv = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->stats_kv(), output);
  }

  // optional uint32 active_jobs = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->active_jobs(), output);
  }

  // optional uint32 yielding_jobs = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->yielding_jobs(), output);
  }

  // optional uint32 user_sessions = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->user_sessions(), output);
  }

  // optional uint32 game_server_sessions = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->game_server_sessions(), output);
  }

  // optional uint32 socaches = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->socaches(), output);
  }

  // optional uint32 socaches_to_unload = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->socaches_to_unload(), output);
  }

  // optional uint32 socaches_loading = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->socaches_loading(), output);
  }

  // optional uint32 writeback_queue = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->writeback_queue(), output);
  }

  // optional uint32 steamid_locks = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->steamid_locks(), output);
  }

  // optional uint32 logon_queue = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->logon_queue(), output);
  }

  // optional uint32 logon_jobs = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->logon_jobs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCMsgGetSystemStatsResponse)
}

::google::protobuf::uint8* CGCMsgGetSystemStatsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCMsgGetSystemStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gc_app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gc_app_id(), target);
  }

  // optional bytes stats_kv = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->stats_kv(), target);
  }

  // optional uint32 active_jobs = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->active_jobs(), target);
  }

  // optional uint32 yielding_jobs = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->yielding_jobs(), target);
  }

  // optional uint32 user_sessions = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->user_sessions(), target);
  }

  // optional uint32 game_server_sessions = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->game_server_sessions(), target);
  }

  // optional uint32 socaches = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->socaches(), target);
  }

  // optional uint32 socaches_to_unload = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->socaches_to_unload(), target);
  }

  // optional uint32 socaches_loading = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->socaches_loading(), target);
  }

  // optional uint32 writeback_queue = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->writeback_queue(), target);
  }

  // optional uint32 steamid_locks = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->steamid_locks(), target);
  }

  // optional uint32 logon_queue = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->logon_queue(), target);
  }

  // optional uint32 logon_jobs = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->logon_jobs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCMsgGetSystemStatsResponse)
  return target;
}

size_t CGCMsgGetSystemStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCMsgGetSystemStatsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes stats_kv = 2;
    if (has_stats_kv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stats_kv());
    }

    // optional uint32 gc_app_id = 1;
    if (has_gc_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gc_app_id());
    }

    // optional uint32 active_jobs = 3;
    if (has_active_jobs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_jobs());
    }

    // optional uint32 yielding_jobs = 4;
    if (has_yielding_jobs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yielding_jobs());
    }

    // optional uint32 user_sessions = 5;
    if (has_user_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_sessions());
    }

    // optional uint32 game_server_sessions = 6;
    if (has_game_server_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_sessions());
    }

    // optional uint32 socaches = 7;
    if (has_socaches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socaches());
    }

    // optional uint32 socaches_to_unload = 8;
    if (has_socaches_to_unload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socaches_to_unload());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint32 socaches_loading = 9;
    if (has_socaches_loading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socaches_loading());
    }

    // optional uint32 writeback_queue = 10;
    if (has_writeback_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->writeback_queue());
    }

    // optional uint32 steamid_locks = 11;
    if (has_steamid_locks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steamid_locks());
    }

    // optional uint32 logon_queue = 12;
    if (has_logon_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logon_queue());
    }

    // optional uint32 logon_jobs = 13;
    if (has_logon_jobs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logon_jobs());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCMsgGetSystemStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCMsgGetSystemStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgGetSystemStatsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCMsgGetSystemStatsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCMsgGetSystemStatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCMsgGetSystemStatsResponse)
    MergeFrom(*source);
  }
}

void CGCMsgGetSystemStatsResponse::MergeFrom(const CGCMsgGetSystemStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCMsgGetSystemStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_stats_kv();
      stats_kv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stats_kv_);
    }
    if (cached_has_bits & 0x00000002u) {
      gc_app_id_ = from.gc_app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      active_jobs_ = from.active_jobs_;
    }
    if (cached_has_bits & 0x00000008u) {
      yielding_jobs_ = from.yielding_jobs_;
    }
    if (cached_has_bits & 0x00000010u) {
      user_sessions_ = from.user_sessions_;
    }
    if (cached_has_bits & 0x00000020u) {
      game_server_sessions_ = from.game_server_sessions_;
    }
    if (cached_has_bits & 0x00000040u) {
      socaches_ = from.socaches_;
    }
    if (cached_has_bits & 0x00000080u) {
      socaches_to_unload_ = from.socaches_to_unload_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      socaches_loading_ = from.socaches_loading_;
    }
    if (cached_has_bits & 0x00000200u) {
      writeback_queue_ = from.writeback_queue_;
    }
    if (cached_has_bits & 0x00000400u) {
      steamid_locks_ = from.steamid_locks_;
    }
    if (cached_has_bits & 0x00000800u) {
      logon_queue_ = from.logon_queue_;
    }
    if (cached_has_bits & 0x00001000u) {
      logon_jobs_ = from.logon_jobs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgGetSystemStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCMsgGetSystemStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgGetSystemStatsResponse::CopyFrom(const CGCMsgGetSystemStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCMsgGetSystemStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetSystemStatsResponse::IsInitialized() const {
  return true;
}

void CGCMsgGetSystemStatsResponse::Swap(CGCMsgGetSystemStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCMsgGetSystemStatsResponse::InternalSwap(CGCMsgGetSystemStatsResponse* other) {
  stats_kv_.Swap(&other->stats_kv_);
  std::swap(gc_app_id_, other->gc_app_id_);
  std::swap(active_jobs_, other->active_jobs_);
  std::swap(yielding_jobs_, other->yielding_jobs_);
  std::swap(user_sessions_, other->user_sessions_);
  std::swap(game_server_sessions_, other->game_server_sessions_);
  std::swap(socaches_, other->socaches_);
  std::swap(socaches_to_unload_, other->socaches_to_unload_);
  std::swap(socaches_loading_, other->socaches_loading_);
  std::swap(writeback_queue_, other->writeback_queue_);
  std::swap(steamid_locks_, other->steamid_locks_);
  std::swap(logon_queue_, other->logon_queue_);
  std::swap(logon_jobs_, other->logon_jobs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCMsgGetSystemStatsResponse::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCMsgGetSystemStatsResponse

// optional uint32 gc_app_id = 1;
bool CGCMsgGetSystemStatsResponse::has_gc_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGCMsgGetSystemStatsResponse::set_has_gc_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CGCMsgGetSystemStatsResponse::clear_has_gc_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGCMsgGetSystemStatsResponse::clear_gc_app_id() {
  gc_app_id_ = 0u;
  clear_has_gc_app_id();
}
::google::protobuf::uint32 CGCMsgGetSystemStatsResponse::gc_app_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgGetSystemStatsResponse.gc_app_id)
  return gc_app_id_;
}
void CGCMsgGetSystemStatsResponse::set_gc_app_id(::google::protobuf::uint32 value) {
  set_has_gc_app_id();
  gc_app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgGetSystemStatsResponse.gc_app_id)
}

// optional bytes stats_kv = 2;
bool CGCMsgGetSystemStatsResponse::has_stats_kv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCMsgGetSystemStatsResponse::set_has_stats_kv() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCMsgGetSystemStatsResponse::clear_has_stats_kv() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCMsgGetSystemStatsResponse::clear_stats_kv() {
  stats_kv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stats_kv();
}
const ::std::string& CGCMsgGetSystemStatsResponse::stats_kv() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgGetSystemStatsResponse.stats_kv)
  return stats_kv_.GetNoArena();
}
void CGCMsgGetSystemStatsResponse::set_stats_kv(const ::std::string& value) {
  set_has_stats_kv();
  stats_kv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgGetSystemStatsResponse.stats_kv)
}
#if LANG_CXX11
void CGCMsgGetSystemStatsResponse::set_stats_kv(::std::string&& value) {
  set_has_stats_kv();
  stats_kv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGCMsgGetSystemStatsResponse.stats_kv)
}
#endif
void CGCMsgGetSystemStatsResponse::set_stats_kv(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stats_kv();
  stats_kv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGCMsgGetSystemStatsResponse.stats_kv)
}
void CGCMsgGetSystemStatsResponse::set_stats_kv(const void* value, size_t size) {
  set_has_stats_kv();
  stats_kv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGCMsgGetSystemStatsResponse.stats_kv)
}
::std::string* CGCMsgGetSystemStatsResponse::mutable_stats_kv() {
  set_has_stats_kv();
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCMsgGetSystemStatsResponse.stats_kv)
  return stats_kv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGCMsgGetSystemStatsResponse::release_stats_kv() {
  // @@protoc_insertion_point(field_release:proto.dota.CGCMsgGetSystemStatsResponse.stats_kv)
  clear_has_stats_kv();
  return stats_kv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGCMsgGetSystemStatsResponse::set_allocated_stats_kv(::std::string* stats_kv) {
  if (stats_kv != NULL) {
    set_has_stats_kv();
  } else {
    clear_has_stats_kv();
  }
  stats_kv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stats_kv);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGCMsgGetSystemStatsResponse.stats_kv)
}

// optional uint32 active_jobs = 3;
bool CGCMsgGetSystemStatsResponse::has_active_jobs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGCMsgGetSystemStatsResponse::set_has_active_jobs() {
  _has_bits_[0] |= 0x00000004u;
}
void CGCMsgGetSystemStatsResponse::clear_has_active_jobs() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGCMsgGetSystemStatsResponse::clear_active_jobs() {
  active_jobs_ = 0u;
  clear_has_active_jobs();
}
::google::protobuf::uint32 CGCMsgGetSystemStatsResponse::active_jobs() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgGetSystemStatsResponse.active_jobs)
  return active_jobs_;
}
void CGCMsgGetSystemStatsResponse::set_active_jobs(::google::protobuf::uint32 value) {
  set_has_active_jobs();
  active_jobs_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgGetSystemStatsResponse.active_jobs)
}

// optional uint32 yielding_jobs = 4;
bool CGCMsgGetSystemStatsResponse::has_yielding_jobs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CGCMsgGetSystemStatsResponse::set_has_yielding_jobs() {
  _has_bits_[0] |= 0x00000008u;
}
void CGCMsgGetSystemStatsResponse::clear_has_yielding_jobs() {
  _has_bits_[0] &= ~0x00000008u;
}
void CGCMsgGetSystemStatsResponse::clear_yielding_jobs() {
  yielding_jobs_ = 0u;
  clear_has_yielding_jobs();
}
::google::protobuf::uint32 CGCMsgGetSystemStatsResponse::yielding_jobs() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgGetSystemStatsResponse.yielding_jobs)
  return yielding_jobs_;
}
void CGCMsgGetSystemStatsResponse::set_yielding_jobs(::google::protobuf::uint32 value) {
  set_has_yielding_jobs();
  yielding_jobs_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgGetSystemStatsResponse.yielding_jobs)
}

// optional uint32 user_sessions = 5;
bool CGCMsgGetSystemStatsResponse::has_user_sessions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CGCMsgGetSystemStatsResponse::set_has_user_sessions() {
  _has_bits_[0] |= 0x00000010u;
}
void CGCMsgGetSystemStatsResponse::clear_has_user_sessions() {
  _has_bits_[0] &= ~0x00000010u;
}
void CGCMsgGetSystemStatsResponse::clear_user_sessions() {
  user_sessions_ = 0u;
  clear_has_user_sessions();
}
::google::protobuf::uint32 CGCMsgGetSystemStatsResponse::user_sessions() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgGetSystemStatsResponse.user_sessions)
  return user_sessions_;
}
void CGCMsgGetSystemStatsResponse::set_user_sessions(::google::protobuf::uint32 value) {
  set_has_user_sessions();
  user_sessions_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgGetSystemStatsResponse.user_sessions)
}

// optional uint32 game_server_sessions = 6;
bool CGCMsgGetSystemStatsResponse::has_game_server_sessions() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CGCMsgGetSystemStatsResponse::set_has_game_server_sessions() {
  _has_bits_[0] |= 0x00000020u;
}
void CGCMsgGetSystemStatsResponse::clear_has_game_server_sessions() {
  _has_bits_[0] &= ~0x00000020u;
}
void CGCMsgGetSystemStatsResponse::clear_game_server_sessions() {
  game_server_sessions_ = 0u;
  clear_has_game_server_sessions();
}
::google::protobuf::uint32 CGCMsgGetSystemStatsResponse::game_server_sessions() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgGetSystemStatsResponse.game_server_sessions)
  return game_server_sessions_;
}
void CGCMsgGetSystemStatsResponse::set_game_server_sessions(::google::protobuf::uint32 value) {
  set_has_game_server_sessions();
  game_server_sessions_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgGetSystemStatsResponse.game_server_sessions)
}

// optional uint32 socaches = 7;
bool CGCMsgGetSystemStatsResponse::has_socaches() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CGCMsgGetSystemStatsResponse::set_has_socaches() {
  _has_bits_[0] |= 0x00000040u;
}
void CGCMsgGetSystemStatsResponse::clear_has_socaches() {
  _has_bits_[0] &= ~0x00000040u;
}
void CGCMsgGetSystemStatsResponse::clear_socaches() {
  socaches_ = 0u;
  clear_has_socaches();
}
::google::protobuf::uint32 CGCMsgGetSystemStatsResponse::socaches() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgGetSystemStatsResponse.socaches)
  return socaches_;
}
void CGCMsgGetSystemStatsResponse::set_socaches(::google::protobuf::uint32 value) {
  set_has_socaches();
  socaches_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgGetSystemStatsResponse.socaches)
}

// optional uint32 socaches_to_unload = 8;
bool CGCMsgGetSystemStatsResponse::has_socaches_to_unload() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CGCMsgGetSystemStatsResponse::set_has_socaches_to_unload() {
  _has_bits_[0] |= 0x00000080u;
}
void CGCMsgGetSystemStatsResponse::clear_has_socaches_to_unload() {
  _has_bits_[0] &= ~0x00000080u;
}
void CGCMsgGetSystemStatsResponse::clear_socaches_to_unload() {
  socaches_to_unload_ = 0u;
  clear_has_socaches_to_unload();
}
::google::protobuf::uint32 CGCMsgGetSystemStatsResponse::socaches_to_unload() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgGetSystemStatsResponse.socaches_to_unload)
  return socaches_to_unload_;
}
void CGCMsgGetSystemStatsResponse::set_socaches_to_unload(::google::protobuf::uint32 value) {
  set_has_socaches_to_unload();
  socaches_to_unload_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgGetSystemStatsResponse.socaches_to_unload)
}

// optional uint32 socaches_loading = 9;
bool CGCMsgGetSystemStatsResponse::has_socaches_loading() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CGCMsgGetSystemStatsResponse::set_has_socaches_loading() {
  _has_bits_[0] |= 0x00000100u;
}
void CGCMsgGetSystemStatsResponse::clear_has_socaches_loading() {
  _has_bits_[0] &= ~0x00000100u;
}
void CGCMsgGetSystemStatsResponse::clear_socaches_loading() {
  socaches_loading_ = 0u;
  clear_has_socaches_loading();
}
::google::protobuf::uint32 CGCMsgGetSystemStatsResponse::socaches_loading() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgGetSystemStatsResponse.socaches_loading)
  return socaches_loading_;
}
void CGCMsgGetSystemStatsResponse::set_socaches_loading(::google::protobuf::uint32 value) {
  set_has_socaches_loading();
  socaches_loading_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgGetSystemStatsResponse.socaches_loading)
}

// optional uint32 writeback_queue = 10;
bool CGCMsgGetSystemStatsResponse::has_writeback_queue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CGCMsgGetSystemStatsResponse::set_has_writeback_queue() {
  _has_bits_[0] |= 0x00000200u;
}
void CGCMsgGetSystemStatsResponse::clear_has_writeback_queue() {
  _has_bits_[0] &= ~0x00000200u;
}
void CGCMsgGetSystemStatsResponse::clear_writeback_queue() {
  writeback_queue_ = 0u;
  clear_has_writeback_queue();
}
::google::protobuf::uint32 CGCMsgGetSystemStatsResponse::writeback_queue() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgGetSystemStatsResponse.writeback_queue)
  return writeback_queue_;
}
void CGCMsgGetSystemStatsResponse::set_writeback_queue(::google::protobuf::uint32 value) {
  set_has_writeback_queue();
  writeback_queue_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgGetSystemStatsResponse.writeback_queue)
}

// optional uint32 steamid_locks = 11;
bool CGCMsgGetSystemStatsResponse::has_steamid_locks() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CGCMsgGetSystemStatsResponse::set_has_steamid_locks() {
  _has_bits_[0] |= 0x00000400u;
}
void CGCMsgGetSystemStatsResponse::clear_has_steamid_locks() {
  _has_bits_[0] &= ~0x00000400u;
}
void CGCMsgGetSystemStatsResponse::clear_steamid_locks() {
  steamid_locks_ = 0u;
  clear_has_steamid_locks();
}
::google::protobuf::uint32 CGCMsgGetSystemStatsResponse::steamid_locks() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgGetSystemStatsResponse.steamid_locks)
  return steamid_locks_;
}
void CGCMsgGetSystemStatsResponse::set_steamid_locks(::google::protobuf::uint32 value) {
  set_has_steamid_locks();
  steamid_locks_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgGetSystemStatsResponse.steamid_locks)
}

// optional uint32 logon_queue = 12;
bool CGCMsgGetSystemStatsResponse::has_logon_queue() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CGCMsgGetSystemStatsResponse::set_has_logon_queue() {
  _has_bits_[0] |= 0x00000800u;
}
void CGCMsgGetSystemStatsResponse::clear_has_logon_queue() {
  _has_bits_[0] &= ~0x00000800u;
}
void CGCMsgGetSystemStatsResponse::clear_logon_queue() {
  logon_queue_ = 0u;
  clear_has_logon_queue();
}
::google::protobuf::uint32 CGCMsgGetSystemStatsResponse::logon_queue() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgGetSystemStatsResponse.logon_queue)
  return logon_queue_;
}
void CGCMsgGetSystemStatsResponse::set_logon_queue(::google::protobuf::uint32 value) {
  set_has_logon_queue();
  logon_queue_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgGetSystemStatsResponse.logon_queue)
}

// optional uint32 logon_jobs = 13;
bool CGCMsgGetSystemStatsResponse::has_logon_jobs() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CGCMsgGetSystemStatsResponse::set_has_logon_jobs() {
  _has_bits_[0] |= 0x00001000u;
}
void CGCMsgGetSystemStatsResponse::clear_has_logon_jobs() {
  _has_bits_[0] &= ~0x00001000u;
}
void CGCMsgGetSystemStatsResponse::clear_logon_jobs() {
  logon_jobs_ = 0u;
  clear_has_logon_jobs();
}
::google::protobuf::uint32 CGCMsgGetSystemStatsResponse::logon_jobs() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCMsgGetSystemStatsResponse.logon_jobs)
  return logon_jobs_;
}
void CGCMsgGetSystemStatsResponse::set_logon_jobs(::google::protobuf::uint32 value) {
  set_has_logon_jobs();
  logon_jobs_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCMsgGetSystemStatsResponse.logon_jobs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMSendEmail_ReplacementToken::kTokenNameFieldNumber;
const int CMsgAMSendEmail_ReplacementToken::kTokenValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMSendEmail_ReplacementToken::CMsgAMSendEmail_ReplacementToken()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMSendEmail.ReplacementToken)
}
CMsgAMSendEmail_ReplacementToken::CMsgAMSendEmail_ReplacementToken(const CMsgAMSendEmail_ReplacementToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token_name()) {
    token_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_name_);
  }
  token_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token_value()) {
    token_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMSendEmail.ReplacementToken)
}

void CMsgAMSendEmail_ReplacementToken::SharedCtor() {
  _cached_size_ = 0;
  token_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgAMSendEmail_ReplacementToken::~CMsgAMSendEmail_ReplacementToken() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMSendEmail.ReplacementToken)
  SharedDtor();
}

void CMsgAMSendEmail_ReplacementToken::SharedDtor() {
  token_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgAMSendEmail_ReplacementToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMSendEmail_ReplacementToken::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAMSendEmail_ReplacementToken& CMsgAMSendEmail_ReplacementToken::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAMSendEmail_ReplacementToken* CMsgAMSendEmail_ReplacementToken::New(::google::protobuf::Arena* arena) const {
  CMsgAMSendEmail_ReplacementToken* n = new CMsgAMSendEmail_ReplacementToken;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAMSendEmail_ReplacementToken::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMSendEmail.ReplacementToken)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_token_name()) {
      GOOGLE_DCHECK(!token_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_token_value()) {
      GOOGLE_DCHECK(!token_value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*token_value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAMSendEmail_ReplacementToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMSendEmail.ReplacementToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token_name().data(), this->token_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgAMSendEmail.ReplacementToken.token_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string token_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token_value().data(), this->token_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgAMSendEmail.ReplacementToken.token_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMSendEmail.ReplacementToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMSendEmail.ReplacementToken)
  return false;
#undef DO_
}

void CMsgAMSendEmail_ReplacementToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMSendEmail.ReplacementToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string token_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_name().data(), this->token_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMSendEmail.ReplacementToken.token_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token_name(), output);
  }

  // optional string token_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_value().data(), this->token_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMSendEmail.ReplacementToken.token_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMSendEmail.ReplacementToken)
}

::google::protobuf::uint8* CMsgAMSendEmail_ReplacementToken::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMSendEmail.ReplacementToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string token_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_name().data(), this->token_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMSendEmail.ReplacementToken.token_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token_name(), target);
  }

  // optional string token_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_value().data(), this->token_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMSendEmail.ReplacementToken.token_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMSendEmail.ReplacementToken)
  return target;
}

size_t CMsgAMSendEmail_ReplacementToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMSendEmail.ReplacementToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string token_name = 1;
    if (has_token_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token_name());
    }

    // optional string token_value = 2;
    if (has_token_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMSendEmail_ReplacementToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMSendEmail.ReplacementToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMSendEmail_ReplacementToken* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAMSendEmail_ReplacementToken>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMSendEmail.ReplacementToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMSendEmail.ReplacementToken)
    MergeFrom(*source);
  }
}

void CMsgAMSendEmail_ReplacementToken::MergeFrom(const CMsgAMSendEmail_ReplacementToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMSendEmail.ReplacementToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token_name();
      token_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_token_value();
      token_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_value_);
    }
  }
}

void CMsgAMSendEmail_ReplacementToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMSendEmail.ReplacementToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMSendEmail_ReplacementToken::CopyFrom(const CMsgAMSendEmail_ReplacementToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMSendEmail.ReplacementToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmail_ReplacementToken::IsInitialized() const {
  return true;
}

void CMsgAMSendEmail_ReplacementToken::Swap(CMsgAMSendEmail_ReplacementToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMSendEmail_ReplacementToken::InternalSwap(CMsgAMSendEmail_ReplacementToken* other) {
  token_name_.Swap(&other->token_name_);
  token_value_.Swap(&other->token_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAMSendEmail_ReplacementToken::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAMSendEmail_ReplacementToken

// optional string token_name = 1;
bool CMsgAMSendEmail_ReplacementToken::has_token_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAMSendEmail_ReplacementToken::set_has_token_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAMSendEmail_ReplacementToken::clear_has_token_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAMSendEmail_ReplacementToken::clear_token_name() {
  token_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token_name();
}
const ::std::string& CMsgAMSendEmail_ReplacementToken::token_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMSendEmail.ReplacementToken.token_name)
  return token_name_.GetNoArena();
}
void CMsgAMSendEmail_ReplacementToken::set_token_name(const ::std::string& value) {
  set_has_token_name();
  token_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMSendEmail.ReplacementToken.token_name)
}
#if LANG_CXX11
void CMsgAMSendEmail_ReplacementToken::set_token_name(::std::string&& value) {
  set_has_token_name();
  token_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgAMSendEmail.ReplacementToken.token_name)
}
#endif
void CMsgAMSendEmail_ReplacementToken::set_token_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token_name();
  token_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgAMSendEmail.ReplacementToken.token_name)
}
void CMsgAMSendEmail_ReplacementToken::set_token_name(const char* value, size_t size) {
  set_has_token_name();
  token_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgAMSendEmail.ReplacementToken.token_name)
}
::std::string* CMsgAMSendEmail_ReplacementToken::mutable_token_name() {
  set_has_token_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgAMSendEmail.ReplacementToken.token_name)
  return token_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgAMSendEmail_ReplacementToken::release_token_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgAMSendEmail.ReplacementToken.token_name)
  clear_has_token_name();
  return token_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgAMSendEmail_ReplacementToken::set_allocated_token_name(::std::string* token_name) {
  if (token_name != NULL) {
    set_has_token_name();
  } else {
    clear_has_token_name();
  }
  token_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgAMSendEmail.ReplacementToken.token_name)
}

// optional string token_value = 2;
bool CMsgAMSendEmail_ReplacementToken::has_token_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgAMSendEmail_ReplacementToken::set_has_token_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgAMSendEmail_ReplacementToken::clear_has_token_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgAMSendEmail_ReplacementToken::clear_token_value() {
  token_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token_value();
}
const ::std::string& CMsgAMSendEmail_ReplacementToken::token_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMSendEmail.ReplacementToken.token_value)
  return token_value_.GetNoArena();
}
void CMsgAMSendEmail_ReplacementToken::set_token_value(const ::std::string& value) {
  set_has_token_value();
  token_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMSendEmail.ReplacementToken.token_value)
}
#if LANG_CXX11
void CMsgAMSendEmail_ReplacementToken::set_token_value(::std::string&& value) {
  set_has_token_value();
  token_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgAMSendEmail.ReplacementToken.token_value)
}
#endif
void CMsgAMSendEmail_ReplacementToken::set_token_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token_value();
  token_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgAMSendEmail.ReplacementToken.token_value)
}
void CMsgAMSendEmail_ReplacementToken::set_token_value(const char* value, size_t size) {
  set_has_token_value();
  token_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgAMSendEmail.ReplacementToken.token_value)
}
::std::string* CMsgAMSendEmail_ReplacementToken::mutable_token_value() {
  set_has_token_value();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgAMSendEmail.ReplacementToken.token_value)
  return token_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgAMSendEmail_ReplacementToken::release_token_value() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgAMSendEmail.ReplacementToken.token_value)
  clear_has_token_value();
  return token_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgAMSendEmail_ReplacementToken::set_allocated_token_value(::std::string* token_value) {
  if (token_value != NULL) {
    set_has_token_value();
  } else {
    clear_has_token_value();
  }
  token_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token_value);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgAMSendEmail.ReplacementToken.token_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMSendEmail_PersonaNameReplacementToken::kSteamidFieldNumber;
const int CMsgAMSendEmail_PersonaNameReplacementToken::kTokenNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMSendEmail_PersonaNameReplacementToken::CMsgAMSendEmail_PersonaNameReplacementToken()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
}
CMsgAMSendEmail_PersonaNameReplacementToken::CMsgAMSendEmail_PersonaNameReplacementToken(const CMsgAMSendEmail_PersonaNameReplacementToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token_name()) {
    token_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_name_);
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
}

void CMsgAMSendEmail_PersonaNameReplacementToken::SharedCtor() {
  _cached_size_ = 0;
  token_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamid_ = GOOGLE_ULONGLONG(0);
}

CMsgAMSendEmail_PersonaNameReplacementToken::~CMsgAMSendEmail_PersonaNameReplacementToken() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  SharedDtor();
}

void CMsgAMSendEmail_PersonaNameReplacementToken::SharedDtor() {
  token_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgAMSendEmail_PersonaNameReplacementToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMSendEmail_PersonaNameReplacementToken::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAMSendEmail_PersonaNameReplacementToken& CMsgAMSendEmail_PersonaNameReplacementToken::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAMSendEmail_PersonaNameReplacementToken* CMsgAMSendEmail_PersonaNameReplacementToken::New(::google::protobuf::Arena* arena) const {
  CMsgAMSendEmail_PersonaNameReplacementToken* n = new CMsgAMSendEmail_PersonaNameReplacementToken;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAMSendEmail_PersonaNameReplacementToken::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  if (has_token_name()) {
    GOOGLE_DCHECK(!token_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*token_name_.UnsafeRawStringPointer())->clear();
  }
  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAMSendEmail_PersonaNameReplacementToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string token_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token_name().data(), this->token_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken.token_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  return false;
#undef DO_
}

void CMsgAMSendEmail_PersonaNameReplacementToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string token_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_name().data(), this->token_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken.token_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
}

::google::protobuf::uint8* CMsgAMSendEmail_PersonaNameReplacementToken::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string token_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token_name().data(), this->token_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken.token_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  return target;
}

size_t CMsgAMSendEmail_PersonaNameReplacementToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string token_name = 2;
    if (has_token_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token_name());
    }

    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMSendEmail_PersonaNameReplacementToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMSendEmail_PersonaNameReplacementToken* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAMSendEmail_PersonaNameReplacementToken>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
    MergeFrom(*source);
  }
}

void CMsgAMSendEmail_PersonaNameReplacementToken::MergeFrom(const CMsgAMSendEmail_PersonaNameReplacementToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_token_name();
      token_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMSendEmail_PersonaNameReplacementToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMSendEmail_PersonaNameReplacementToken::CopyFrom(const CMsgAMSendEmail_PersonaNameReplacementToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmail_PersonaNameReplacementToken::IsInitialized() const {
  return true;
}

void CMsgAMSendEmail_PersonaNameReplacementToken::Swap(CMsgAMSendEmail_PersonaNameReplacementToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMSendEmail_PersonaNameReplacementToken::InternalSwap(CMsgAMSendEmail_PersonaNameReplacementToken* other) {
  token_name_.Swap(&other->token_name_);
  std::swap(steamid_, other->steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAMSendEmail_PersonaNameReplacementToken::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAMSendEmail_PersonaNameReplacementToken

// optional fixed64 steamid = 1;
bool CMsgAMSendEmail_PersonaNameReplacementToken::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgAMSendEmail_PersonaNameReplacementToken::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgAMSendEmail_PersonaNameReplacementToken::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgAMSendEmail_PersonaNameReplacementToken::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgAMSendEmail_PersonaNameReplacementToken::steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken.steamid)
  return steamid_;
}
void CMsgAMSendEmail_PersonaNameReplacementToken::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken.steamid)
}

// optional string token_name = 2;
bool CMsgAMSendEmail_PersonaNameReplacementToken::has_token_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAMSendEmail_PersonaNameReplacementToken::set_has_token_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAMSendEmail_PersonaNameReplacementToken::clear_has_token_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAMSendEmail_PersonaNameReplacementToken::clear_token_name() {
  token_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token_name();
}
const ::std::string& CMsgAMSendEmail_PersonaNameReplacementToken::token_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken.token_name)
  return token_name_.GetNoArena();
}
void CMsgAMSendEmail_PersonaNameReplacementToken::set_token_name(const ::std::string& value) {
  set_has_token_name();
  token_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken.token_name)
}
#if LANG_CXX11
void CMsgAMSendEmail_PersonaNameReplacementToken::set_token_name(::std::string&& value) {
  set_has_token_name();
  token_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken.token_name)
}
#endif
void CMsgAMSendEmail_PersonaNameReplacementToken::set_token_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token_name();
  token_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken.token_name)
}
void CMsgAMSendEmail_PersonaNameReplacementToken::set_token_name(const char* value, size_t size) {
  set_has_token_name();
  token_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken.token_name)
}
::std::string* CMsgAMSendEmail_PersonaNameReplacementToken::mutable_token_name() {
  set_has_token_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken.token_name)
  return token_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgAMSendEmail_PersonaNameReplacementToken::release_token_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken.token_name)
  clear_has_token_name();
  return token_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgAMSendEmail_PersonaNameReplacementToken::set_allocated_token_name(::std::string* token_name) {
  if (token_name != NULL) {
    set_has_token_name();
  } else {
    clear_has_token_name();
  }
  token_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken.token_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMSendEmail::kSteamidFieldNumber;
const int CMsgAMSendEmail::kEmailMsgTypeFieldNumber;
const int CMsgAMSendEmail::kEmailFormatFieldNumber;
const int CMsgAMSendEmail::kPersonaNameTokensFieldNumber;
const int CMsgAMSendEmail::kSourceGcFieldNumber;
const int CMsgAMSendEmail::kTokensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMSendEmail::CMsgAMSendEmail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMSendEmail)
}
CMsgAMSendEmail::CMsgAMSendEmail(const CMsgAMSendEmail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      persona_name_tokens_(from.persona_name_tokens_),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&source_gc_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(source_gc_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMSendEmail)
}

void CMsgAMSendEmail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&source_gc_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(source_gc_));
}

CMsgAMSendEmail::~CMsgAMSendEmail() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMSendEmail)
  SharedDtor();
}

void CMsgAMSendEmail::SharedDtor() {
}

void CMsgAMSendEmail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMSendEmail::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAMSendEmail& CMsgAMSendEmail::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAMSendEmail* CMsgAMSendEmail::New(::google::protobuf::Arena* arena) const {
  CMsgAMSendEmail* n = new CMsgAMSendEmail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAMSendEmail::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMSendEmail)
  persona_name_tokens_.Clear();
  tokens_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&source_gc_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(source_gc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAMSendEmail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMSendEmail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 email_msg_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_email_msg_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &email_msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 email_format = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_email_format();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &email_format_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_persona_name_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 source_gc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_source_gc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_gc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgAMSendEmail.ReplacementToken tokens = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMSendEmail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMSendEmail)
  return false;
#undef DO_
}

void CMsgAMSendEmail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMSendEmail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 email_msg_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->email_msg_type(), output);
  }

  // optional uint32 email_format = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->email_format(), output);
  }

  // repeated .proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
  for (unsigned int i = 0, n = this->persona_name_tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->persona_name_tokens(i), output);
  }

  // optional uint32 source_gc = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->source_gc(), output);
  }

  // repeated .proto.dota.CMsgAMSendEmail.ReplacementToken tokens = 7;
  for (unsigned int i = 0, n = this->tokens_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tokens(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMSendEmail)
}

::google::protobuf::uint8* CMsgAMSendEmail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMSendEmail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 email_msg_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->email_msg_type(), target);
  }

  // optional uint32 email_format = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->email_format(), target);
  }

  // repeated .proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
  for (unsigned int i = 0, n = this->persona_name_tokens_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->persona_name_tokens(i), deterministic, target);
  }

  // optional uint32 source_gc = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->source_gc(), target);
  }

  // repeated .proto.dota.CMsgAMSendEmail.ReplacementToken tokens = 7;
  for (unsigned int i = 0, n = this->tokens_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->tokens(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMSendEmail)
  return target;
}

size_t CMsgAMSendEmail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMSendEmail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
  {
    unsigned int count = this->persona_name_tokens_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->persona_name_tokens(i));
    }
  }

  // repeated .proto.dota.CMsgAMSendEmail.ReplacementToken tokens = 7;
  {
    unsigned int count = this->tokens_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tokens(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 email_msg_type = 2;
    if (has_email_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->email_msg_type());
    }

    // optional uint32 email_format = 3;
    if (has_email_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->email_format());
    }

    // optional uint32 source_gc = 6;
    if (has_source_gc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_gc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMSendEmail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMSendEmail)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMSendEmail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAMSendEmail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMSendEmail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMSendEmail)
    MergeFrom(*source);
  }
}

void CMsgAMSendEmail::MergeFrom(const CMsgAMSendEmail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMSendEmail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  persona_name_tokens_.MergeFrom(from.persona_name_tokens_);
  tokens_.MergeFrom(from.tokens_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      email_msg_type_ = from.email_msg_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      email_format_ = from.email_format_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_gc_ = from.source_gc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMSendEmail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMSendEmail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMSendEmail::CopyFrom(const CMsgAMSendEmail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMSendEmail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmail::IsInitialized() const {
  return true;
}

void CMsgAMSendEmail::Swap(CMsgAMSendEmail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMSendEmail::InternalSwap(CMsgAMSendEmail* other) {
  persona_name_tokens_.InternalSwap(&other->persona_name_tokens_);
  tokens_.InternalSwap(&other->tokens_);
  std::swap(steamid_, other->steamid_);
  std::swap(email_msg_type_, other->email_msg_type_);
  std::swap(email_format_, other->email_format_);
  std::swap(source_gc_, other->source_gc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAMSendEmail::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAMSendEmail

// optional fixed64 steamid = 1;
bool CMsgAMSendEmail::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAMSendEmail::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAMSendEmail::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAMSendEmail::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgAMSendEmail::steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMSendEmail.steamid)
  return steamid_;
}
void CMsgAMSendEmail::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMSendEmail.steamid)
}

// optional uint32 email_msg_type = 2;
bool CMsgAMSendEmail::has_email_msg_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgAMSendEmail::set_has_email_msg_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgAMSendEmail::clear_has_email_msg_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgAMSendEmail::clear_email_msg_type() {
  email_msg_type_ = 0u;
  clear_has_email_msg_type();
}
::google::protobuf::uint32 CMsgAMSendEmail::email_msg_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMSendEmail.email_msg_type)
  return email_msg_type_;
}
void CMsgAMSendEmail::set_email_msg_type(::google::protobuf::uint32 value) {
  set_has_email_msg_type();
  email_msg_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMSendEmail.email_msg_type)
}

// optional uint32 email_format = 3;
bool CMsgAMSendEmail::has_email_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgAMSendEmail::set_has_email_format() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgAMSendEmail::clear_has_email_format() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgAMSendEmail::clear_email_format() {
  email_format_ = 0u;
  clear_has_email_format();
}
::google::protobuf::uint32 CMsgAMSendEmail::email_format() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMSendEmail.email_format)
  return email_format_;
}
void CMsgAMSendEmail::set_email_format(::google::protobuf::uint32 value) {
  set_has_email_format();
  email_format_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMSendEmail.email_format)
}

// repeated .proto.dota.CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
int CMsgAMSendEmail::persona_name_tokens_size() const {
  return persona_name_tokens_.size();
}
void CMsgAMSendEmail::clear_persona_name_tokens() {
  persona_name_tokens_.Clear();
}
const ::proto::dota::CMsgAMSendEmail_PersonaNameReplacementToken& CMsgAMSendEmail::persona_name_tokens(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMSendEmail.persona_name_tokens)
  return persona_name_tokens_.Get(index);
}
::proto::dota::CMsgAMSendEmail_PersonaNameReplacementToken* CMsgAMSendEmail::mutable_persona_name_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgAMSendEmail.persona_name_tokens)
  return persona_name_tokens_.Mutable(index);
}
::proto::dota::CMsgAMSendEmail_PersonaNameReplacementToken* CMsgAMSendEmail::add_persona_name_tokens() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgAMSendEmail.persona_name_tokens)
  return persona_name_tokens_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgAMSendEmail_PersonaNameReplacementToken >*
CMsgAMSendEmail::mutable_persona_name_tokens() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgAMSendEmail.persona_name_tokens)
  return &persona_name_tokens_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgAMSendEmail_PersonaNameReplacementToken >&
CMsgAMSendEmail::persona_name_tokens() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgAMSendEmail.persona_name_tokens)
  return persona_name_tokens_;
}

// optional uint32 source_gc = 6;
bool CMsgAMSendEmail::has_source_gc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgAMSendEmail::set_has_source_gc() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgAMSendEmail::clear_has_source_gc() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgAMSendEmail::clear_source_gc() {
  source_gc_ = 0u;
  clear_has_source_gc();
}
::google::protobuf::uint32 CMsgAMSendEmail::source_gc() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMSendEmail.source_gc)
  return source_gc_;
}
void CMsgAMSendEmail::set_source_gc(::google::protobuf::uint32 value) {
  set_has_source_gc();
  source_gc_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMSendEmail.source_gc)
}

// repeated .proto.dota.CMsgAMSendEmail.ReplacementToken tokens = 7;
int CMsgAMSendEmail::tokens_size() const {
  return tokens_.size();
}
void CMsgAMSendEmail::clear_tokens() {
  tokens_.Clear();
}
const ::proto::dota::CMsgAMSendEmail_ReplacementToken& CMsgAMSendEmail::tokens(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMSendEmail.tokens)
  return tokens_.Get(index);
}
::proto::dota::CMsgAMSendEmail_ReplacementToken* CMsgAMSendEmail::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgAMSendEmail.tokens)
  return tokens_.Mutable(index);
}
::proto::dota::CMsgAMSendEmail_ReplacementToken* CMsgAMSendEmail::add_tokens() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgAMSendEmail.tokens)
  return tokens_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgAMSendEmail_ReplacementToken >*
CMsgAMSendEmail::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgAMSendEmail.tokens)
  return &tokens_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgAMSendEmail_ReplacementToken >&
CMsgAMSendEmail::tokens() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgAMSendEmail.tokens)
  return tokens_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMSendEmailResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMSendEmailResponse::CMsgAMSendEmailResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMSendEmailResponse)
}
CMsgAMSendEmailResponse::CMsgAMSendEmailResponse(const CMsgAMSendEmailResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMSendEmailResponse)
}

void CMsgAMSendEmailResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
}

CMsgAMSendEmailResponse::~CMsgAMSendEmailResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMSendEmailResponse)
  SharedDtor();
}

void CMsgAMSendEmailResponse::SharedDtor() {
}

void CMsgAMSendEmailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMSendEmailResponse::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAMSendEmailResponse& CMsgAMSendEmailResponse::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAMSendEmailResponse* CMsgAMSendEmailResponse::New(::google::protobuf::Arena* arena) const {
  CMsgAMSendEmailResponse* n = new CMsgAMSendEmailResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAMSendEmailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMSendEmailResponse)
  eresult_ = 2u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAMSendEmailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMSendEmailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMSendEmailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMSendEmailResponse)
  return false;
#undef DO_
}

void CMsgAMSendEmailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMSendEmailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMSendEmailResponse)
}

::google::protobuf::uint8* CMsgAMSendEmailResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMSendEmailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMSendEmailResponse)
  return target;
}

size_t CMsgAMSendEmailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMSendEmailResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMSendEmailResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMSendEmailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMSendEmailResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAMSendEmailResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMSendEmailResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMSendEmailResponse)
    MergeFrom(*source);
  }
}

void CMsgAMSendEmailResponse::MergeFrom(const CMsgAMSendEmailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMSendEmailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgAMSendEmailResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMSendEmailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMSendEmailResponse::CopyFrom(const CMsgAMSendEmailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMSendEmailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmailResponse::IsInitialized() const {
  return true;
}

void CMsgAMSendEmailResponse::Swap(CMsgAMSendEmailResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMSendEmailResponse::InternalSwap(CMsgAMSendEmailResponse* other) {
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAMSendEmailResponse::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAMSendEmailResponse

// optional uint32 eresult = 1 [default = 2];
bool CMsgAMSendEmailResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAMSendEmailResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAMSendEmailResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAMSendEmailResponse::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
::google::protobuf::uint32 CMsgAMSendEmailResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMSendEmailResponse.eresult)
  return eresult_;
}
void CMsgAMSendEmailResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMSendEmailResponse.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetEmailTemplate::kAppIdFieldNumber;
const int CMsgGCGetEmailTemplate::kEmailMsgTypeFieldNumber;
const int CMsgGCGetEmailTemplate::kEmailLangFieldNumber;
const int CMsgGCGetEmailTemplate::kEmailFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetEmailTemplate::CMsgGCGetEmailTemplate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetEmailTemplate)
}
CMsgGCGetEmailTemplate::CMsgGCGetEmailTemplate(const CMsgGCGetEmailTemplate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&email_format_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(email_format_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetEmailTemplate)
}

void CMsgGCGetEmailTemplate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&email_format_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(email_format_));
}

CMsgGCGetEmailTemplate::~CMsgGCGetEmailTemplate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetEmailTemplate)
  SharedDtor();
}

void CMsgGCGetEmailTemplate::SharedDtor() {
}

void CMsgGCGetEmailTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetEmailTemplate::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCGetEmailTemplate& CMsgGCGetEmailTemplate::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCGetEmailTemplate* CMsgGCGetEmailTemplate::New(::google::protobuf::Arena* arena) const {
  CMsgGCGetEmailTemplate* n = new CMsgGCGetEmailTemplate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCGetEmailTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetEmailTemplate)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&email_format_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(email_format_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCGetEmailTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetEmailTemplate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 email_msg_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_email_msg_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &email_msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 email_lang = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_email_lang();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &email_lang_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 email_format = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_email_format();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &email_format_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetEmailTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetEmailTemplate)
  return false;
#undef DO_
}

void CMsgGCGetEmailTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetEmailTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 email_msg_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->email_msg_type(), output);
  }

  // optional int32 email_lang = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->email_lang(), output);
  }

  // optional int32 email_format = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->email_format(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetEmailTemplate)
}

::google::protobuf::uint8* CMsgGCGetEmailTemplate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetEmailTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional uint32 email_msg_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->email_msg_type(), target);
  }

  // optional int32 email_lang = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->email_lang(), target);
  }

  // optional int32 email_format = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->email_format(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetEmailTemplate)
  return target;
}

size_t CMsgGCGetEmailTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetEmailTemplate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 email_msg_type = 2;
    if (has_email_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->email_msg_type());
    }

    // optional int32 email_lang = 3;
    if (has_email_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->email_lang());
    }

    // optional int32 email_format = 4;
    if (has_email_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->email_format());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetEmailTemplate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetEmailTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetEmailTemplate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCGetEmailTemplate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetEmailTemplate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetEmailTemplate)
    MergeFrom(*source);
  }
}

void CMsgGCGetEmailTemplate::MergeFrom(const CMsgGCGetEmailTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetEmailTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      email_msg_type_ = from.email_msg_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      email_lang_ = from.email_lang_;
    }
    if (cached_has_bits & 0x00000008u) {
      email_format_ = from.email_format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCGetEmailTemplate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetEmailTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetEmailTemplate::CopyFrom(const CMsgGCGetEmailTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetEmailTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetEmailTemplate::IsInitialized() const {
  return true;
}

void CMsgGCGetEmailTemplate::Swap(CMsgGCGetEmailTemplate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetEmailTemplate::InternalSwap(CMsgGCGetEmailTemplate* other) {
  std::swap(app_id_, other->app_id_);
  std::swap(email_msg_type_, other->email_msg_type_);
  std::swap(email_lang_, other->email_lang_);
  std::swap(email_format_, other->email_format_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCGetEmailTemplate::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCGetEmailTemplate

// optional uint32 app_id = 1;
bool CMsgGCGetEmailTemplate::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCGetEmailTemplate::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCGetEmailTemplate::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCGetEmailTemplate::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgGCGetEmailTemplate::app_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetEmailTemplate.app_id)
  return app_id_;
}
void CMsgGCGetEmailTemplate::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetEmailTemplate.app_id)
}

// optional uint32 email_msg_type = 2;
bool CMsgGCGetEmailTemplate::has_email_msg_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCGetEmailTemplate::set_has_email_msg_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCGetEmailTemplate::clear_has_email_msg_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCGetEmailTemplate::clear_email_msg_type() {
  email_msg_type_ = 0u;
  clear_has_email_msg_type();
}
::google::protobuf::uint32 CMsgGCGetEmailTemplate::email_msg_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetEmailTemplate.email_msg_type)
  return email_msg_type_;
}
void CMsgGCGetEmailTemplate::set_email_msg_type(::google::protobuf::uint32 value) {
  set_has_email_msg_type();
  email_msg_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetEmailTemplate.email_msg_type)
}

// optional int32 email_lang = 3;
bool CMsgGCGetEmailTemplate::has_email_lang() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCGetEmailTemplate::set_has_email_lang() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCGetEmailTemplate::clear_has_email_lang() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCGetEmailTemplate::clear_email_lang() {
  email_lang_ = 0;
  clear_has_email_lang();
}
::google::protobuf::int32 CMsgGCGetEmailTemplate::email_lang() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetEmailTemplate.email_lang)
  return email_lang_;
}
void CMsgGCGetEmailTemplate::set_email_lang(::google::protobuf::int32 value) {
  set_has_email_lang();
  email_lang_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetEmailTemplate.email_lang)
}

// optional int32 email_format = 4;
bool CMsgGCGetEmailTemplate::has_email_format() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGCGetEmailTemplate::set_has_email_format() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGCGetEmailTemplate::clear_has_email_format() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGCGetEmailTemplate::clear_email_format() {
  email_format_ = 0;
  clear_has_email_format();
}
::google::protobuf::int32 CMsgGCGetEmailTemplate::email_format() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetEmailTemplate.email_format)
  return email_format_;
}
void CMsgGCGetEmailTemplate::set_email_format(::google::protobuf::int32 value) {
  set_has_email_format();
  email_format_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetEmailTemplate.email_format)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetEmailTemplateResponse::kEresultFieldNumber;
const int CMsgGCGetEmailTemplateResponse::kTemplateExistsFieldNumber;
const int CMsgGCGetEmailTemplateResponse::kTemplateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetEmailTemplateResponse::CMsgGCGetEmailTemplateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetEmailTemplateResponse)
}
CMsgGCGetEmailTemplateResponse::CMsgGCGetEmailTemplateResponse(const CMsgGCGetEmailTemplateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  template__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_template_()) {
    template__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.template__);
  }
  ::memcpy(&template_exists_, &from.template_exists_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&template_exists_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetEmailTemplateResponse)
}

void CMsgGCGetEmailTemplateResponse::SharedCtor() {
  _cached_size_ = 0;
  template__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template_exists_ = false;
  eresult_ = 2u;
}

CMsgGCGetEmailTemplateResponse::~CMsgGCGetEmailTemplateResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetEmailTemplateResponse)
  SharedDtor();
}

void CMsgGCGetEmailTemplateResponse::SharedDtor() {
  template__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCGetEmailTemplateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetEmailTemplateResponse::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCGetEmailTemplateResponse& CMsgGCGetEmailTemplateResponse::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCGetEmailTemplateResponse* CMsgGCGetEmailTemplateResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCGetEmailTemplateResponse* n = new CMsgGCGetEmailTemplateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCGetEmailTemplateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetEmailTemplateResponse)
  if (has_template_()) {
    GOOGLE_DCHECK(!template__.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*template__.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    template_exists_ = false;
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCGetEmailTemplateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetEmailTemplateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool template_exists = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_template_exists();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &template_exists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string template = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->template_().data(), this->template_().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCGetEmailTemplateResponse.template");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetEmailTemplateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetEmailTemplateResponse)
  return false;
#undef DO_
}

void CMsgGCGetEmailTemplateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetEmailTemplateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional bool template_exists = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->template_exists(), output);
  }

  // optional string template = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_().data(), this->template_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCGetEmailTemplateResponse.template");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->template_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetEmailTemplateResponse)
}

::google::protobuf::uint8* CMsgGCGetEmailTemplateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetEmailTemplateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional bool template_exists = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->template_exists(), target);
  }

  // optional string template = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_().data(), this->template_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCGetEmailTemplateResponse.template");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->template_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetEmailTemplateResponse)
  return target;
}

size_t CMsgGCGetEmailTemplateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetEmailTemplateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string template = 3;
    if (has_template_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->template_());
    }

    // optional bool template_exists = 2;
    if (has_template_exists()) {
      total_size += 1 + 1;
    }

    // optional uint32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetEmailTemplateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetEmailTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetEmailTemplateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCGetEmailTemplateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetEmailTemplateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetEmailTemplateResponse)
    MergeFrom(*source);
  }
}

void CMsgGCGetEmailTemplateResponse::MergeFrom(const CMsgGCGetEmailTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetEmailTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_template_();
      template__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.template__);
    }
    if (cached_has_bits & 0x00000002u) {
      template_exists_ = from.template_exists_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCGetEmailTemplateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetEmailTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetEmailTemplateResponse::CopyFrom(const CMsgGCGetEmailTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetEmailTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetEmailTemplateResponse::IsInitialized() const {
  return true;
}

void CMsgGCGetEmailTemplateResponse::Swap(CMsgGCGetEmailTemplateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetEmailTemplateResponse::InternalSwap(CMsgGCGetEmailTemplateResponse* other) {
  template__.Swap(&other->template__);
  std::swap(template_exists_, other->template_exists_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCGetEmailTemplateResponse::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCGetEmailTemplateResponse

// optional uint32 eresult = 1 [default = 2];
bool CMsgGCGetEmailTemplateResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCGetEmailTemplateResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCGetEmailTemplateResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCGetEmailTemplateResponse::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
::google::protobuf::uint32 CMsgGCGetEmailTemplateResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetEmailTemplateResponse.eresult)
  return eresult_;
}
void CMsgGCGetEmailTemplateResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetEmailTemplateResponse.eresult)
}

// optional bool template_exists = 2;
bool CMsgGCGetEmailTemplateResponse::has_template_exists() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCGetEmailTemplateResponse::set_has_template_exists() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCGetEmailTemplateResponse::clear_has_template_exists() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCGetEmailTemplateResponse::clear_template_exists() {
  template_exists_ = false;
  clear_has_template_exists();
}
bool CMsgGCGetEmailTemplateResponse::template_exists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetEmailTemplateResponse.template_exists)
  return template_exists_;
}
void CMsgGCGetEmailTemplateResponse::set_template_exists(bool value) {
  set_has_template_exists();
  template_exists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetEmailTemplateResponse.template_exists)
}

// optional string template = 3;
bool CMsgGCGetEmailTemplateResponse::has_template_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCGetEmailTemplateResponse::set_has_template_() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCGetEmailTemplateResponse::clear_has_template_() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCGetEmailTemplateResponse::clear_template_() {
  template__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_template_();
}
const ::std::string& CMsgGCGetEmailTemplateResponse::template_() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetEmailTemplateResponse.template)
  return template__.GetNoArena();
}
void CMsgGCGetEmailTemplateResponse::set_template_(const ::std::string& value) {
  set_has_template_();
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetEmailTemplateResponse.template)
}
#if LANG_CXX11
void CMsgGCGetEmailTemplateResponse::set_template_(::std::string&& value) {
  set_has_template_();
  template__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCGetEmailTemplateResponse.template)
}
#endif
void CMsgGCGetEmailTemplateResponse::set_template_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_template_();
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCGetEmailTemplateResponse.template)
}
void CMsgGCGetEmailTemplateResponse::set_template_(const char* value, size_t size) {
  set_has_template_();
  template__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCGetEmailTemplateResponse.template)
}
::std::string* CMsgGCGetEmailTemplateResponse::mutable_template_() {
  set_has_template_();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCGetEmailTemplateResponse.template)
  return template__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCGetEmailTemplateResponse::release_template_() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCGetEmailTemplateResponse.template)
  clear_has_template_();
  return template__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCGetEmailTemplateResponse::set_allocated_template_(::std::string* template_) {
  if (template_ != NULL) {
    set_has_template_();
  } else {
    clear_has_template_();
  }
  template__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), template_);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCGetEmailTemplateResponse.template)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMGrantGuestPasses2::kSteamIdFieldNumber;
const int CMsgAMGrantGuestPasses2::kPackageIdFieldNumber;
const int CMsgAMGrantGuestPasses2::kPassesToGrantFieldNumber;
const int CMsgAMGrantGuestPasses2::kDaysToExpirationFieldNumber;
const int CMsgAMGrantGuestPasses2::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMGrantGuestPasses2::CMsgAMGrantGuestPasses2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMGrantGuestPasses2)
}
CMsgAMGrantGuestPasses2::CMsgAMGrantGuestPasses2(const CMsgAMGrantGuestPasses2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMGrantGuestPasses2)
}

void CMsgAMGrantGuestPasses2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(action_));
}

CMsgAMGrantGuestPasses2::~CMsgAMGrantGuestPasses2() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMGrantGuestPasses2)
  SharedDtor();
}

void CMsgAMGrantGuestPasses2::SharedDtor() {
}

void CMsgAMGrantGuestPasses2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMGrantGuestPasses2::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAMGrantGuestPasses2& CMsgAMGrantGuestPasses2::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAMGrantGuestPasses2* CMsgAMGrantGuestPasses2::New(::google::protobuf::Arena* arena) const {
  CMsgAMGrantGuestPasses2* n = new CMsgAMGrantGuestPasses2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAMGrantGuestPasses2::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMGrantGuestPasses2)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAMGrantGuestPasses2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMGrantGuestPasses2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 package_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_package_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 passes_to_grant = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_passes_to_grant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passes_to_grant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 days_to_expiration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_days_to_expiration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &days_to_expiration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 action = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_action();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMGrantGuestPasses2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMGrantGuestPasses2)
  return false;
#undef DO_
}

void CMsgAMGrantGuestPasses2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMGrantGuestPasses2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 package_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->package_id(), output);
  }

  // optional int32 passes_to_grant = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->passes_to_grant(), output);
  }

  // optional int32 days_to_expiration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->days_to_expiration(), output);
  }

  // optional int32 action = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->action(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMGrantGuestPasses2)
}

::google::protobuf::uint8* CMsgAMGrantGuestPasses2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMGrantGuestPasses2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 package_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->package_id(), target);
  }

  // optional int32 passes_to_grant = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->passes_to_grant(), target);
  }

  // optional int32 days_to_expiration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->days_to_expiration(), target);
  }

  // optional int32 action = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->action(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMGrantGuestPasses2)
  return target;
}

size_t CMsgAMGrantGuestPasses2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMGrantGuestPasses2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 package_id = 2;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_id());
    }

    // optional int32 passes_to_grant = 3;
    if (has_passes_to_grant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passes_to_grant());
    }

    // optional int32 days_to_expiration = 4;
    if (has_days_to_expiration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->days_to_expiration());
    }

    // optional int32 action = 5;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMGrantGuestPasses2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMGrantGuestPasses2)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMGrantGuestPasses2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAMGrantGuestPasses2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMGrantGuestPasses2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMGrantGuestPasses2)
    MergeFrom(*source);
  }
}

void CMsgAMGrantGuestPasses2::MergeFrom(const CMsgAMGrantGuestPasses2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMGrantGuestPasses2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      package_id_ = from.package_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      passes_to_grant_ = from.passes_to_grant_;
    }
    if (cached_has_bits & 0x00000008u) {
      days_to_expiration_ = from.days_to_expiration_;
    }
    if (cached_has_bits & 0x00000010u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMGrantGuestPasses2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMGrantGuestPasses2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGrantGuestPasses2::CopyFrom(const CMsgAMGrantGuestPasses2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMGrantGuestPasses2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGrantGuestPasses2::IsInitialized() const {
  return true;
}

void CMsgAMGrantGuestPasses2::Swap(CMsgAMGrantGuestPasses2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMGrantGuestPasses2::InternalSwap(CMsgAMGrantGuestPasses2* other) {
  std::swap(steam_id_, other->steam_id_);
  std::swap(package_id_, other->package_id_);
  std::swap(passes_to_grant_, other->passes_to_grant_);
  std::swap(days_to_expiration_, other->days_to_expiration_);
  std::swap(action_, other->action_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAMGrantGuestPasses2::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAMGrantGuestPasses2

// optional fixed64 steam_id = 1;
bool CMsgAMGrantGuestPasses2::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAMGrantGuestPasses2::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAMGrantGuestPasses2::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAMGrantGuestPasses2::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgAMGrantGuestPasses2::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGrantGuestPasses2.steam_id)
  return steam_id_;
}
void CMsgAMGrantGuestPasses2::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGrantGuestPasses2.steam_id)
}

// optional uint32 package_id = 2;
bool CMsgAMGrantGuestPasses2::has_package_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgAMGrantGuestPasses2::set_has_package_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgAMGrantGuestPasses2::clear_has_package_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgAMGrantGuestPasses2::clear_package_id() {
  package_id_ = 0u;
  clear_has_package_id();
}
::google::protobuf::uint32 CMsgAMGrantGuestPasses2::package_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGrantGuestPasses2.package_id)
  return package_id_;
}
void CMsgAMGrantGuestPasses2::set_package_id(::google::protobuf::uint32 value) {
  set_has_package_id();
  package_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGrantGuestPasses2.package_id)
}

// optional int32 passes_to_grant = 3;
bool CMsgAMGrantGuestPasses2::has_passes_to_grant() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgAMGrantGuestPasses2::set_has_passes_to_grant() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgAMGrantGuestPasses2::clear_has_passes_to_grant() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgAMGrantGuestPasses2::clear_passes_to_grant() {
  passes_to_grant_ = 0;
  clear_has_passes_to_grant();
}
::google::protobuf::int32 CMsgAMGrantGuestPasses2::passes_to_grant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGrantGuestPasses2.passes_to_grant)
  return passes_to_grant_;
}
void CMsgAMGrantGuestPasses2::set_passes_to_grant(::google::protobuf::int32 value) {
  set_has_passes_to_grant();
  passes_to_grant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGrantGuestPasses2.passes_to_grant)
}

// optional int32 days_to_expiration = 4;
bool CMsgAMGrantGuestPasses2::has_days_to_expiration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgAMGrantGuestPasses2::set_has_days_to_expiration() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgAMGrantGuestPasses2::clear_has_days_to_expiration() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgAMGrantGuestPasses2::clear_days_to_expiration() {
  days_to_expiration_ = 0;
  clear_has_days_to_expiration();
}
::google::protobuf::int32 CMsgAMGrantGuestPasses2::days_to_expiration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGrantGuestPasses2.days_to_expiration)
  return days_to_expiration_;
}
void CMsgAMGrantGuestPasses2::set_days_to_expiration(::google::protobuf::int32 value) {
  set_has_days_to_expiration();
  days_to_expiration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGrantGuestPasses2.days_to_expiration)
}

// optional int32 action = 5;
bool CMsgAMGrantGuestPasses2::has_action() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgAMGrantGuestPasses2::set_has_action() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgAMGrantGuestPasses2::clear_has_action() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgAMGrantGuestPasses2::clear_action() {
  action_ = 0;
  clear_has_action();
}
::google::protobuf::int32 CMsgAMGrantGuestPasses2::action() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGrantGuestPasses2.action)
  return action_;
}
void CMsgAMGrantGuestPasses2::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGrantGuestPasses2.action)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAMGrantGuestPasses2Response::kEresultFieldNumber;
const int CMsgAMGrantGuestPasses2Response::kPassesGrantedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAMGrantGuestPasses2Response::CMsgAMGrantGuestPasses2Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAMGrantGuestPasses2Response)
}
CMsgAMGrantGuestPasses2Response::CMsgAMGrantGuestPasses2Response(const CMsgAMGrantGuestPasses2Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&passes_granted_, &from.passes_granted_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&passes_granted_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAMGrantGuestPasses2Response)
}

void CMsgAMGrantGuestPasses2Response::SharedCtor() {
  _cached_size_ = 0;
  passes_granted_ = 0;
  eresult_ = 2;
}

CMsgAMGrantGuestPasses2Response::~CMsgAMGrantGuestPasses2Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAMGrantGuestPasses2Response)
  SharedDtor();
}

void CMsgAMGrantGuestPasses2Response::SharedDtor() {
}

void CMsgAMGrantGuestPasses2Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAMGrantGuestPasses2Response::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAMGrantGuestPasses2Response& CMsgAMGrantGuestPasses2Response::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAMGrantGuestPasses2Response* CMsgAMGrantGuestPasses2Response::New(::google::protobuf::Arena* arena) const {
  CMsgAMGrantGuestPasses2Response* n = new CMsgAMGrantGuestPasses2Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAMGrantGuestPasses2Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAMGrantGuestPasses2Response)
  if (_has_bits_[0 / 32] & 3u) {
    passes_granted_ = 0;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAMGrantGuestPasses2Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAMGrantGuestPasses2Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 passes_granted = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_passes_granted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passes_granted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAMGrantGuestPasses2Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAMGrantGuestPasses2Response)
  return false;
#undef DO_
}

void CMsgAMGrantGuestPasses2Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAMGrantGuestPasses2Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 passes_granted = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->passes_granted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAMGrantGuestPasses2Response)
}

::google::protobuf::uint8* CMsgAMGrantGuestPasses2Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAMGrantGuestPasses2Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional int32 passes_granted = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->passes_granted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAMGrantGuestPasses2Response)
  return target;
}

size_t CMsgAMGrantGuestPasses2Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAMGrantGuestPasses2Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 passes_granted = 2 [default = 0];
    if (has_passes_granted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passes_granted());
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAMGrantGuestPasses2Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAMGrantGuestPasses2Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAMGrantGuestPasses2Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAMGrantGuestPasses2Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAMGrantGuestPasses2Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAMGrantGuestPasses2Response)
    MergeFrom(*source);
  }
}

void CMsgAMGrantGuestPasses2Response::MergeFrom(const CMsgAMGrantGuestPasses2Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAMGrantGuestPasses2Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      passes_granted_ = from.passes_granted_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAMGrantGuestPasses2Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAMGrantGuestPasses2Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAMGrantGuestPasses2Response::CopyFrom(const CMsgAMGrantGuestPasses2Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAMGrantGuestPasses2Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGrantGuestPasses2Response::IsInitialized() const {
  return true;
}

void CMsgAMGrantGuestPasses2Response::Swap(CMsgAMGrantGuestPasses2Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAMGrantGuestPasses2Response::InternalSwap(CMsgAMGrantGuestPasses2Response* other) {
  std::swap(passes_granted_, other->passes_granted_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAMGrantGuestPasses2Response::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAMGrantGuestPasses2Response

// optional int32 eresult = 1 [default = 2];
bool CMsgAMGrantGuestPasses2Response::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgAMGrantGuestPasses2Response::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgAMGrantGuestPasses2Response::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgAMGrantGuestPasses2Response::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgAMGrantGuestPasses2Response::eresult() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGrantGuestPasses2Response.eresult)
  return eresult_;
}
void CMsgAMGrantGuestPasses2Response::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGrantGuestPasses2Response.eresult)
}

// optional int32 passes_granted = 2 [default = 0];
bool CMsgAMGrantGuestPasses2Response::has_passes_granted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAMGrantGuestPasses2Response::set_has_passes_granted() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAMGrantGuestPasses2Response::clear_has_passes_granted() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAMGrantGuestPasses2Response::clear_passes_granted() {
  passes_granted_ = 0;
  clear_has_passes_granted();
}
::google::protobuf::int32 CMsgAMGrantGuestPasses2Response::passes_granted() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgAMGrantGuestPasses2Response.passes_granted)
  return passes_granted_;
}
void CMsgAMGrantGuestPasses2Response::set_passes_granted(::google::protobuf::int32 value) {
  set_has_passes_granted();
  passes_granted_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgAMGrantGuestPasses2Response.passes_granted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCSystemMsg_GetAccountDetails::kSteamidFieldNumber;
const int CGCSystemMsg_GetAccountDetails::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCSystemMsg_GetAccountDetails::CGCSystemMsg_GetAccountDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCSystemMsg_GetAccountDetails)
}
CGCSystemMsg_GetAccountDetails::CGCSystemMsg_GetAccountDetails(const CGCSystemMsg_GetAccountDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCSystemMsg_GetAccountDetails)
}

void CGCSystemMsg_GetAccountDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
}

CGCSystemMsg_GetAccountDetails::~CGCSystemMsg_GetAccountDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCSystemMsg_GetAccountDetails)
  SharedDtor();
}

void CGCSystemMsg_GetAccountDetails::SharedDtor() {
}

void CGCSystemMsg_GetAccountDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCSystemMsg_GetAccountDetails::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCSystemMsg_GetAccountDetails& CGCSystemMsg_GetAccountDetails::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCSystemMsg_GetAccountDetails* CGCSystemMsg_GetAccountDetails::New(::google::protobuf::Arena* arena) const {
  CGCSystemMsg_GetAccountDetails* n = new CGCSystemMsg_GetAccountDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCSystemMsg_GetAccountDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCSystemMsg_GetAccountDetails)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCSystemMsg_GetAccountDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCSystemMsg_GetAccountDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCSystemMsg_GetAccountDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCSystemMsg_GetAccountDetails)
  return false;
#undef DO_
}

void CGCSystemMsg_GetAccountDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCSystemMsg_GetAccountDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCSystemMsg_GetAccountDetails)
}

::google::protobuf::uint8* CGCSystemMsg_GetAccountDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCSystemMsg_GetAccountDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCSystemMsg_GetAccountDetails)
  return target;
}

size_t CGCSystemMsg_GetAccountDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCSystemMsg_GetAccountDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCSystemMsg_GetAccountDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCSystemMsg_GetAccountDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCSystemMsg_GetAccountDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCSystemMsg_GetAccountDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCSystemMsg_GetAccountDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCSystemMsg_GetAccountDetails)
    MergeFrom(*source);
  }
}

void CGCSystemMsg_GetAccountDetails::MergeFrom(const CGCSystemMsg_GetAccountDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCSystemMsg_GetAccountDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCSystemMsg_GetAccountDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCSystemMsg_GetAccountDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCSystemMsg_GetAccountDetails::CopyFrom(const CGCSystemMsg_GetAccountDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCSystemMsg_GetAccountDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetAccountDetails::IsInitialized() const {
  return true;
}

void CGCSystemMsg_GetAccountDetails::Swap(CGCSystemMsg_GetAccountDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCSystemMsg_GetAccountDetails::InternalSwap(CGCSystemMsg_GetAccountDetails* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCSystemMsg_GetAccountDetails::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCSystemMsg_GetAccountDetails

// optional fixed64 steamid = 1;
bool CGCSystemMsg_GetAccountDetails::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCSystemMsg_GetAccountDetails::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCSystemMsg_GetAccountDetails::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCSystemMsg_GetAccountDetails::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CGCSystemMsg_GetAccountDetails::steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails.steamid)
  return steamid_;
}
void CGCSystemMsg_GetAccountDetails::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails.steamid)
}

// optional uint32 appid = 2;
bool CGCSystemMsg_GetAccountDetails::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGCSystemMsg_GetAccountDetails::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CGCSystemMsg_GetAccountDetails::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGCSystemMsg_GetAccountDetails::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CGCSystemMsg_GetAccountDetails::appid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails.appid)
  return appid_;
}
void CGCSystemMsg_GetAccountDetails::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCSystemMsg_GetAccountDetails_Response::kEresultDeprecatedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kAccountNameFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kPersonaNameFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsProfileCreatedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsProfilePublicFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsInventoryPublicFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsVacBannedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsCyberCafeFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsSchoolAccountFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsLimitedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsSubscribedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kPackageFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsFreeTrialAccountFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kFreeTrialExpirationFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsLowViolenceFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsAccountLockedDownFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsCommunityBannedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsTradeBannedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kTradeBanExpirationFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kAccountidFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kSuspensionEndTimeFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kCurrencyFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kSteamLevelFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kFriendCountFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kAccountCreationTimeFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsSteamguardEnabledFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsPhoneVerifiedFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsTwoFactorAuthEnabledFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kTwoFactorEnabledTimeFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kPhoneVerificationTimeFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kPhoneIdFieldNumber;
const int CGCSystemMsg_GetAccountDetails_Response::kIsPhoneIdentifyingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCSystemMsg_GetAccountDetails_Response::CGCSystemMsg_GetAccountDetails_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
}
CGCSystemMsg_GetAccountDetails_Response::CGCSystemMsg_GetAccountDetails_Response(const CGCSystemMsg_GetAccountDetails_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency()) {
    currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  ::memcpy(&is_cyber_cafe_, &from.is_cyber_cafe_,
    reinterpret_cast<char*>(&eresult_deprecated_) -
    reinterpret_cast<char*>(&is_cyber_cafe_) + sizeof(eresult_deprecated_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
}

void CGCSystemMsg_GetAccountDetails_Response::SharedCtor() {
  _cached_size_ = 0;
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_cyber_cafe_, 0, reinterpret_cast<char*>(&is_phone_identifying_) -
    reinterpret_cast<char*>(&is_cyber_cafe_) + sizeof(is_phone_identifying_));
  eresult_deprecated_ = 2u;
}

CGCSystemMsg_GetAccountDetails_Response::~CGCSystemMsg_GetAccountDetails_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  SharedDtor();
}

void CGCSystemMsg_GetAccountDetails_Response::SharedDtor() {
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGCSystemMsg_GetAccountDetails_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCSystemMsg_GetAccountDetails_Response::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCSystemMsg_GetAccountDetails_Response& CGCSystemMsg_GetAccountDetails_Response::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCSystemMsg_GetAccountDetails_Response* CGCSystemMsg_GetAccountDetails_Response::New(::google::protobuf::Arena* arena) const {
  CGCSystemMsg_GetAccountDetails_Response* n = new CGCSystemMsg_GetAccountDetails_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCSystemMsg_GetAccountDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_account_name()) {
      GOOGLE_DCHECK(!account_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_persona_name()) {
      GOOGLE_DCHECK(!persona_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*persona_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_currency()) {
      GOOGLE_DCHECK(!currency_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*currency_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&is_cyber_cafe_, 0, reinterpret_cast<char*>(&is_profile_created_) -
      reinterpret_cast<char*>(&is_cyber_cafe_) + sizeof(is_profile_created_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&is_profile_public_, 0, reinterpret_cast<char*>(&is_account_locked_down_) -
      reinterpret_cast<char*>(&is_profile_public_) + sizeof(is_account_locked_down_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&is_community_banned_, 0, reinterpret_cast<char*>(&is_trade_banned_) -
      reinterpret_cast<char*>(&is_community_banned_) + sizeof(is_trade_banned_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&is_steamguard_enabled_, 0, reinterpret_cast<char*>(&is_phone_identifying_) -
      reinterpret_cast<char*>(&is_steamguard_enabled_) + sizeof(is_phone_identifying_));
    eresult_deprecated_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCSystemMsg_GetAccountDetails_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult_deprecated = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult_deprecated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_deprecated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGCSystemMsg_GetAccountDetails_Response.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGCSystemMsg_GetAccountDetails_Response.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_profile_public = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_profile_public();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_profile_public_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_inventory_public = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_inventory_public();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_inventory_public_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_vac_banned = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_vac_banned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vac_banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_cyber_cafe = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_is_cyber_cafe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_cyber_cafe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_school_account = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_is_school_account();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_school_account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_limited = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_is_limited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_limited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_subscribed = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_is_subscribed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_subscribed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 package = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_package();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_free_trial_account = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_is_free_trial_account();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_free_trial_account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 free_trial_expiration = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_free_trial_expiration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_trial_expiration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_low_violence = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_is_low_violence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_low_violence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_account_locked_down = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_is_account_locked_down();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_account_locked_down_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_community_banned = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_is_community_banned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_community_banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_trade_banned = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_is_trade_banned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trade_banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trade_ban_expiration = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_trade_ban_expiration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trade_ban_expiration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accountid = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 suspension_end_time = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_suspension_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suspension_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string currency = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CGCSystemMsg_GetAccountDetails_Response.currency");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 steam_level = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_steam_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steam_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 friend_count = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_friend_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_creation_time = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_account_creation_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_creation_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_profile_created = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_is_profile_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_profile_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_steamguard_enabled = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_is_steamguard_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_steamguard_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_phone_verified = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_is_phone_verified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_phone_verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_two_factor_auth_enabled = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_is_two_factor_auth_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_two_factor_auth_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 two_factor_enabled_time = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_two_factor_enabled_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &two_factor_enabled_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 phone_verification_time = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_phone_verification_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phone_verification_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 phone_id = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {
          set_has_phone_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_phone_identifying = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          set_has_is_phone_identifying();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_phone_identifying_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  return false;
#undef DO_
}

void CGCSystemMsg_GetAccountDetails_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult_deprecated = 1 [default = 2];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult_deprecated(), output);
  }

  // optional string account_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCSystemMsg_GetAccountDetails_Response.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account_name(), output);
  }

  // optional string persona_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCSystemMsg_GetAccountDetails_Response.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->persona_name(), output);
  }

  // optional bool is_profile_public = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_profile_public(), output);
  }

  // optional bool is_inventory_public = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_inventory_public(), output);
  }

  // optional bool is_vac_banned = 7;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_vac_banned(), output);
  }

  // optional bool is_cyber_cafe = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_cyber_cafe(), output);
  }

  // optional bool is_school_account = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_school_account(), output);
  }

  // optional bool is_limited = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_limited(), output);
  }

  // optional bool is_subscribed = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_subscribed(), output);
  }

  // optional uint32 package = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->package(), output);
  }

  // optional bool is_free_trial_account = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_free_trial_account(), output);
  }

  // optional uint32 free_trial_expiration = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->free_trial_expiration(), output);
  }

  // optional bool is_low_violence = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_low_violence(), output);
  }

  // optional bool is_account_locked_down = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_account_locked_down(), output);
  }

  // optional bool is_community_banned = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_community_banned(), output);
  }

  // optional bool is_trade_banned = 18;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_trade_banned(), output);
  }

  // optional uint32 trade_ban_expiration = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->trade_ban_expiration(), output);
  }

  // optional uint32 accountid = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->accountid(), output);
  }

  // optional uint32 suspension_end_time = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->suspension_end_time(), output);
  }

  // optional string currency = 22;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCSystemMsg_GetAccountDetails_Response.currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->currency(), output);
  }

  // optional uint32 steam_level = 23;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->steam_level(), output);
  }

  // optional uint32 friend_count = 24;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->friend_count(), output);
  }

  // optional uint32 account_creation_time = 25;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->account_creation_time(), output);
  }

  // optional bool is_profile_created = 26;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->is_profile_created(), output);
  }

  // optional bool is_steamguard_enabled = 27;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->is_steamguard_enabled(), output);
  }

  // optional bool is_phone_verified = 28;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->is_phone_verified(), output);
  }

  // optional bool is_two_factor_auth_enabled = 29;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->is_two_factor_auth_enabled(), output);
  }

  // optional uint32 two_factor_enabled_time = 30;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->two_factor_enabled_time(), output);
  }

  // optional uint32 phone_verification_time = 31;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->phone_verification_time(), output);
  }

  // optional uint64 phone_id = 33;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->phone_id(), output);
  }

  // optional bool is_phone_identifying = 34;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->is_phone_identifying(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
}

::google::protobuf::uint8* CGCSystemMsg_GetAccountDetails_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult_deprecated = 1 [default = 2];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult_deprecated(), target);
  }

  // optional string account_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCSystemMsg_GetAccountDetails_Response.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account_name(), target);
  }

  // optional string persona_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCSystemMsg_GetAccountDetails_Response.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->persona_name(), target);
  }

  // optional bool is_profile_public = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_profile_public(), target);
  }

  // optional bool is_inventory_public = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_inventory_public(), target);
  }

  // optional bool is_vac_banned = 7;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_vac_banned(), target);
  }

  // optional bool is_cyber_cafe = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_cyber_cafe(), target);
  }

  // optional bool is_school_account = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_school_account(), target);
  }

  // optional bool is_limited = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_limited(), target);
  }

  // optional bool is_subscribed = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_subscribed(), target);
  }

  // optional uint32 package = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->package(), target);
  }

  // optional bool is_free_trial_account = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_free_trial_account(), target);
  }

  // optional uint32 free_trial_expiration = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->free_trial_expiration(), target);
  }

  // optional bool is_low_violence = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_low_violence(), target);
  }

  // optional bool is_account_locked_down = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_account_locked_down(), target);
  }

  // optional bool is_community_banned = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_community_banned(), target);
  }

  // optional bool is_trade_banned = 18;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_trade_banned(), target);
  }

  // optional uint32 trade_ban_expiration = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->trade_ban_expiration(), target);
  }

  // optional uint32 accountid = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->accountid(), target);
  }

  // optional uint32 suspension_end_time = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->suspension_end_time(), target);
  }

  // optional string currency = 22;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CGCSystemMsg_GetAccountDetails_Response.currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->currency(), target);
  }

  // optional uint32 steam_level = 23;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->steam_level(), target);
  }

  // optional uint32 friend_count = 24;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->friend_count(), target);
  }

  // optional uint32 account_creation_time = 25;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->account_creation_time(), target);
  }

  // optional bool is_profile_created = 26;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->is_profile_created(), target);
  }

  // optional bool is_steamguard_enabled = 27;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->is_steamguard_enabled(), target);
  }

  // optional bool is_phone_verified = 28;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->is_phone_verified(), target);
  }

  // optional bool is_two_factor_auth_enabled = 29;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->is_two_factor_auth_enabled(), target);
  }

  // optional uint32 two_factor_enabled_time = 30;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->two_factor_enabled_time(), target);
  }

  // optional uint32 phone_verification_time = 31;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->phone_verification_time(), target);
  }

  // optional uint64 phone_id = 33;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(33, this->phone_id(), target);
  }

  // optional bool is_phone_identifying = 34;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->is_phone_identifying(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  return target;
}

size_t CGCSystemMsg_GetAccountDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string account_name = 2;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string persona_name = 3;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional string currency = 22;
    if (has_currency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional bool is_cyber_cafe = 8;
    if (has_is_cyber_cafe()) {
      total_size += 1 + 1;
    }

    // optional bool is_school_account = 9;
    if (has_is_school_account()) {
      total_size += 1 + 1;
    }

    // optional bool is_limited = 10;
    if (has_is_limited()) {
      total_size += 1 + 1;
    }

    // optional bool is_subscribed = 11;
    if (has_is_subscribed()) {
      total_size += 1 + 1;
    }

    // optional bool is_profile_created = 26;
    if (has_is_profile_created()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool is_profile_public = 4;
    if (has_is_profile_public()) {
      total_size += 1 + 1;
    }

    // optional bool is_inventory_public = 5;
    if (has_is_inventory_public()) {
      total_size += 1 + 1;
    }

    // optional bool is_vac_banned = 7;
    if (has_is_vac_banned()) {
      total_size += 1 + 1;
    }

    // optional uint32 package = 12;
    if (has_package()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package());
    }

    // optional uint32 free_trial_expiration = 14;
    if (has_free_trial_expiration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free_trial_expiration());
    }

    // optional bool is_free_trial_account = 13;
    if (has_is_free_trial_account()) {
      total_size += 1 + 1;
    }

    // optional bool is_low_violence = 15;
    if (has_is_low_violence()) {
      total_size += 1 + 1;
    }

    // optional bool is_account_locked_down = 16;
    if (has_is_account_locked_down()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool is_community_banned = 17;
    if (has_is_community_banned()) {
      total_size += 2 + 1;
    }

    // optional uint32 trade_ban_expiration = 19;
    if (has_trade_ban_expiration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trade_ban_expiration());
    }

    // optional uint32 accountid = 20;
    if (has_accountid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 suspension_end_time = 21;
    if (has_suspension_end_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suspension_end_time());
    }

    // optional uint32 steam_level = 23;
    if (has_steam_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steam_level());
    }

    // optional uint32 friend_count = 24;
    if (has_friend_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_count());
    }

    // optional uint32 account_creation_time = 25;
    if (has_account_creation_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_creation_time());
    }

    // optional bool is_trade_banned = 18;
    if (has_is_trade_banned()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional bool is_steamguard_enabled = 27;
    if (has_is_steamguard_enabled()) {
      total_size += 2 + 1;
    }

    // optional bool is_phone_verified = 28;
    if (has_is_phone_verified()) {
      total_size += 2 + 1;
    }

    // optional bool is_two_factor_auth_enabled = 29;
    if (has_is_two_factor_auth_enabled()) {
      total_size += 2 + 1;
    }

    // optional uint32 two_factor_enabled_time = 30;
    if (has_two_factor_enabled_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->two_factor_enabled_time());
    }

    // optional uint32 phone_verification_time = 31;
    if (has_phone_verification_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phone_verification_time());
    }

    // optional uint64 phone_id = 33;
    if (has_phone_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_id());
    }

    // optional bool is_phone_identifying = 34;
    if (has_is_phone_identifying()) {
      total_size += 2 + 1;
    }

    // optional uint32 eresult_deprecated = 1 [default = 2];
    if (has_eresult_deprecated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult_deprecated());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCSystemMsg_GetAccountDetails_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCSystemMsg_GetAccountDetails_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCSystemMsg_GetAccountDetails_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
    MergeFrom(*source);
  }
}

void CGCSystemMsg_GetAccountDetails_Response::MergeFrom(const CGCSystemMsg_GetAccountDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_account_name();
      account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_persona_name();
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_currency();
      currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_);
    }
    if (cached_has_bits & 0x00000008u) {
      is_cyber_cafe_ = from.is_cyber_cafe_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_school_account_ = from.is_school_account_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_limited_ = from.is_limited_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_subscribed_ = from.is_subscribed_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_profile_created_ = from.is_profile_created_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      is_profile_public_ = from.is_profile_public_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_inventory_public_ = from.is_inventory_public_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_vac_banned_ = from.is_vac_banned_;
    }
    if (cached_has_bits & 0x00000800u) {
      package_ = from.package_;
    }
    if (cached_has_bits & 0x00001000u) {
      free_trial_expiration_ = from.free_trial_expiration_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_free_trial_account_ = from.is_free_trial_account_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_low_violence_ = from.is_low_violence_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_account_locked_down_ = from.is_account_locked_down_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      is_community_banned_ = from.is_community_banned_;
    }
    if (cached_has_bits & 0x00020000u) {
      trade_ban_expiration_ = from.trade_ban_expiration_;
    }
    if (cached_has_bits & 0x00040000u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00080000u) {
      suspension_end_time_ = from.suspension_end_time_;
    }
    if (cached_has_bits & 0x00100000u) {
      steam_level_ = from.steam_level_;
    }
    if (cached_has_bits & 0x00200000u) {
      friend_count_ = from.friend_count_;
    }
    if (cached_has_bits & 0x00400000u) {
      account_creation_time_ = from.account_creation_time_;
    }
    if (cached_has_bits & 0x00800000u) {
      is_trade_banned_ = from.is_trade_banned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      is_steamguard_enabled_ = from.is_steamguard_enabled_;
    }
    if (cached_has_bits & 0x02000000u) {
      is_phone_verified_ = from.is_phone_verified_;
    }
    if (cached_has_bits & 0x04000000u) {
      is_two_factor_auth_enabled_ = from.is_two_factor_auth_enabled_;
    }
    if (cached_has_bits & 0x08000000u) {
      two_factor_enabled_time_ = from.two_factor_enabled_time_;
    }
    if (cached_has_bits & 0x10000000u) {
      phone_verification_time_ = from.phone_verification_time_;
    }
    if (cached_has_bits & 0x20000000u) {
      phone_id_ = from.phone_id_;
    }
    if (cached_has_bits & 0x40000000u) {
      is_phone_identifying_ = from.is_phone_identifying_;
    }
    if (cached_has_bits & 0x80000000u) {
      eresult_deprecated_ = from.eresult_deprecated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCSystemMsg_GetAccountDetails_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCSystemMsg_GetAccountDetails_Response::CopyFrom(const CGCSystemMsg_GetAccountDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCSystemMsg_GetAccountDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetAccountDetails_Response::IsInitialized() const {
  return true;
}

void CGCSystemMsg_GetAccountDetails_Response::Swap(CGCSystemMsg_GetAccountDetails_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCSystemMsg_GetAccountDetails_Response::InternalSwap(CGCSystemMsg_GetAccountDetails_Response* other) {
  account_name_.Swap(&other->account_name_);
  persona_name_.Swap(&other->persona_name_);
  currency_.Swap(&other->currency_);
  std::swap(is_cyber_cafe_, other->is_cyber_cafe_);
  std::swap(is_school_account_, other->is_school_account_);
  std::swap(is_limited_, other->is_limited_);
  std::swap(is_subscribed_, other->is_subscribed_);
  std::swap(is_profile_created_, other->is_profile_created_);
  std::swap(is_profile_public_, other->is_profile_public_);
  std::swap(is_inventory_public_, other->is_inventory_public_);
  std::swap(is_vac_banned_, other->is_vac_banned_);
  std::swap(package_, other->package_);
  std::swap(free_trial_expiration_, other->free_trial_expiration_);
  std::swap(is_free_trial_account_, other->is_free_trial_account_);
  std::swap(is_low_violence_, other->is_low_violence_);
  std::swap(is_account_locked_down_, other->is_account_locked_down_);
  std::swap(is_community_banned_, other->is_community_banned_);
  std::swap(trade_ban_expiration_, other->trade_ban_expiration_);
  std::swap(accountid_, other->accountid_);
  std::swap(suspension_end_time_, other->suspension_end_time_);
  std::swap(steam_level_, other->steam_level_);
  std::swap(friend_count_, other->friend_count_);
  std::swap(account_creation_time_, other->account_creation_time_);
  std::swap(is_trade_banned_, other->is_trade_banned_);
  std::swap(is_steamguard_enabled_, other->is_steamguard_enabled_);
  std::swap(is_phone_verified_, other->is_phone_verified_);
  std::swap(is_two_factor_auth_enabled_, other->is_two_factor_auth_enabled_);
  std::swap(two_factor_enabled_time_, other->two_factor_enabled_time_);
  std::swap(phone_verification_time_, other->phone_verification_time_);
  std::swap(phone_id_, other->phone_id_);
  std::swap(is_phone_identifying_, other->is_phone_identifying_);
  std::swap(eresult_deprecated_, other->eresult_deprecated_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCSystemMsg_GetAccountDetails_Response::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCSystemMsg_GetAccountDetails_Response

// optional uint32 eresult_deprecated = 1 [default = 2];
bool CGCSystemMsg_GetAccountDetails_Response::has_eresult_deprecated() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_eresult_deprecated() {
  _has_bits_[0] |= 0x80000000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_eresult_deprecated() {
  _has_bits_[0] &= ~0x80000000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_eresult_deprecated() {
  eresult_deprecated_ = 2u;
  clear_has_eresult_deprecated();
}
::google::protobuf::uint32 CGCSystemMsg_GetAccountDetails_Response::eresult_deprecated() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.eresult_deprecated)
  return eresult_deprecated_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_eresult_deprecated(::google::protobuf::uint32 value) {
  set_has_eresult_deprecated();
  eresult_deprecated_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.eresult_deprecated)
}

// optional string account_name = 2;
bool CGCSystemMsg_GetAccountDetails_Response::has_account_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_account_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_name();
}
const ::std::string& CGCSystemMsg_GetAccountDetails_Response::account_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.account_name)
  return account_name_.GetNoArena();
}
void CGCSystemMsg_GetAccountDetails_Response::set_account_name(const ::std::string& value) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.account_name)
}
#if LANG_CXX11
void CGCSystemMsg_GetAccountDetails_Response::set_account_name(::std::string&& value) {
  set_has_account_name();
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGCSystemMsg_GetAccountDetails_Response.account_name)
}
#endif
void CGCSystemMsg_GetAccountDetails_Response::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGCSystemMsg_GetAccountDetails_Response.account_name)
}
void CGCSystemMsg_GetAccountDetails_Response::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGCSystemMsg_GetAccountDetails_Response.account_name)
}
::std::string* CGCSystemMsg_GetAccountDetails_Response::mutable_account_name() {
  set_has_account_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCSystemMsg_GetAccountDetails_Response.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGCSystemMsg_GetAccountDetails_Response::release_account_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CGCSystemMsg_GetAccountDetails_Response.account_name)
  clear_has_account_name();
  return account_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGCSystemMsg_GetAccountDetails_Response::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    set_has_account_name();
  } else {
    clear_has_account_name();
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGCSystemMsg_GetAccountDetails_Response.account_name)
}

// optional string persona_name = 3;
bool CGCSystemMsg_GetAccountDetails_Response::has_persona_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_persona_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name();
}
const ::std::string& CGCSystemMsg_GetAccountDetails_Response::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.persona_name)
  return persona_name_.GetNoArena();
}
void CGCSystemMsg_GetAccountDetails_Response::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.persona_name)
}
#if LANG_CXX11
void CGCSystemMsg_GetAccountDetails_Response::set_persona_name(::std::string&& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGCSystemMsg_GetAccountDetails_Response.persona_name)
}
#endif
void CGCSystemMsg_GetAccountDetails_Response::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGCSystemMsg_GetAccountDetails_Response.persona_name)
}
void CGCSystemMsg_GetAccountDetails_Response::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGCSystemMsg_GetAccountDetails_Response.persona_name)
}
::std::string* CGCSystemMsg_GetAccountDetails_Response::mutable_persona_name() {
  set_has_persona_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCSystemMsg_GetAccountDetails_Response.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGCSystemMsg_GetAccountDetails_Response::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CGCSystemMsg_GetAccountDetails_Response.persona_name)
  clear_has_persona_name();
  return persona_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGCSystemMsg_GetAccountDetails_Response::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != NULL) {
    set_has_persona_name();
  } else {
    clear_has_persona_name();
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGCSystemMsg_GetAccountDetails_Response.persona_name)
}

// optional bool is_profile_created = 26;
bool CGCSystemMsg_GetAccountDetails_Response::has_is_profile_created() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_is_profile_created() {
  _has_bits_[0] |= 0x00000080u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_is_profile_created() {
  _has_bits_[0] &= ~0x00000080u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_is_profile_created() {
  is_profile_created_ = false;
  clear_has_is_profile_created();
}
bool CGCSystemMsg_GetAccountDetails_Response::is_profile_created() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_profile_created)
  return is_profile_created_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_is_profile_created(bool value) {
  set_has_is_profile_created();
  is_profile_created_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_profile_created)
}

// optional bool is_profile_public = 4;
bool CGCSystemMsg_GetAccountDetails_Response::has_is_profile_public() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_is_profile_public() {
  _has_bits_[0] |= 0x00000100u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_is_profile_public() {
  _has_bits_[0] &= ~0x00000100u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_is_profile_public() {
  is_profile_public_ = false;
  clear_has_is_profile_public();
}
bool CGCSystemMsg_GetAccountDetails_Response::is_profile_public() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_profile_public)
  return is_profile_public_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_is_profile_public(bool value) {
  set_has_is_profile_public();
  is_profile_public_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_profile_public)
}

// optional bool is_inventory_public = 5;
bool CGCSystemMsg_GetAccountDetails_Response::has_is_inventory_public() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_is_inventory_public() {
  _has_bits_[0] |= 0x00000200u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_is_inventory_public() {
  _has_bits_[0] &= ~0x00000200u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_is_inventory_public() {
  is_inventory_public_ = false;
  clear_has_is_inventory_public();
}
bool CGCSystemMsg_GetAccountDetails_Response::is_inventory_public() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_inventory_public)
  return is_inventory_public_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_is_inventory_public(bool value) {
  set_has_is_inventory_public();
  is_inventory_public_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_inventory_public)
}

// optional bool is_vac_banned = 7;
bool CGCSystemMsg_GetAccountDetails_Response::has_is_vac_banned() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_is_vac_banned() {
  _has_bits_[0] |= 0x00000400u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_is_vac_banned() {
  _has_bits_[0] &= ~0x00000400u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_is_vac_banned() {
  is_vac_banned_ = false;
  clear_has_is_vac_banned();
}
bool CGCSystemMsg_GetAccountDetails_Response::is_vac_banned() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_vac_banned)
  return is_vac_banned_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_is_vac_banned(bool value) {
  set_has_is_vac_banned();
  is_vac_banned_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_vac_banned)
}

// optional bool is_cyber_cafe = 8;
bool CGCSystemMsg_GetAccountDetails_Response::has_is_cyber_cafe() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_is_cyber_cafe() {
  _has_bits_[0] |= 0x00000008u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_is_cyber_cafe() {
  _has_bits_[0] &= ~0x00000008u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_is_cyber_cafe() {
  is_cyber_cafe_ = false;
  clear_has_is_cyber_cafe();
}
bool CGCSystemMsg_GetAccountDetails_Response::is_cyber_cafe() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_cyber_cafe)
  return is_cyber_cafe_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_is_cyber_cafe(bool value) {
  set_has_is_cyber_cafe();
  is_cyber_cafe_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_cyber_cafe)
}

// optional bool is_school_account = 9;
bool CGCSystemMsg_GetAccountDetails_Response::has_is_school_account() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_is_school_account() {
  _has_bits_[0] |= 0x00000010u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_is_school_account() {
  _has_bits_[0] &= ~0x00000010u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_is_school_account() {
  is_school_account_ = false;
  clear_has_is_school_account();
}
bool CGCSystemMsg_GetAccountDetails_Response::is_school_account() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_school_account)
  return is_school_account_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_is_school_account(bool value) {
  set_has_is_school_account();
  is_school_account_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_school_account)
}

// optional bool is_limited = 10;
bool CGCSystemMsg_GetAccountDetails_Response::has_is_limited() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_is_limited() {
  _has_bits_[0] |= 0x00000020u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_is_limited() {
  _has_bits_[0] &= ~0x00000020u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_is_limited() {
  is_limited_ = false;
  clear_has_is_limited();
}
bool CGCSystemMsg_GetAccountDetails_Response::is_limited() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_limited)
  return is_limited_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_is_limited(bool value) {
  set_has_is_limited();
  is_limited_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_limited)
}

// optional bool is_subscribed = 11;
bool CGCSystemMsg_GetAccountDetails_Response::has_is_subscribed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_is_subscribed() {
  _has_bits_[0] |= 0x00000040u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_is_subscribed() {
  _has_bits_[0] &= ~0x00000040u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_is_subscribed() {
  is_subscribed_ = false;
  clear_has_is_subscribed();
}
bool CGCSystemMsg_GetAccountDetails_Response::is_subscribed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_subscribed)
  return is_subscribed_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_is_subscribed(bool value) {
  set_has_is_subscribed();
  is_subscribed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_subscribed)
}

// optional uint32 package = 12;
bool CGCSystemMsg_GetAccountDetails_Response::has_package() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_package() {
  _has_bits_[0] |= 0x00000800u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_package() {
  _has_bits_[0] &= ~0x00000800u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_package() {
  package_ = 0u;
  clear_has_package();
}
::google::protobuf::uint32 CGCSystemMsg_GetAccountDetails_Response::package() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.package)
  return package_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_package(::google::protobuf::uint32 value) {
  set_has_package();
  package_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.package)
}

// optional bool is_free_trial_account = 13;
bool CGCSystemMsg_GetAccountDetails_Response::has_is_free_trial_account() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_is_free_trial_account() {
  _has_bits_[0] |= 0x00002000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_is_free_trial_account() {
  _has_bits_[0] &= ~0x00002000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_is_free_trial_account() {
  is_free_trial_account_ = false;
  clear_has_is_free_trial_account();
}
bool CGCSystemMsg_GetAccountDetails_Response::is_free_trial_account() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_free_trial_account)
  return is_free_trial_account_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_is_free_trial_account(bool value) {
  set_has_is_free_trial_account();
  is_free_trial_account_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_free_trial_account)
}

// optional uint32 free_trial_expiration = 14;
bool CGCSystemMsg_GetAccountDetails_Response::has_free_trial_expiration() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_free_trial_expiration() {
  _has_bits_[0] |= 0x00001000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_free_trial_expiration() {
  _has_bits_[0] &= ~0x00001000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_free_trial_expiration() {
  free_trial_expiration_ = 0u;
  clear_has_free_trial_expiration();
}
::google::protobuf::uint32 CGCSystemMsg_GetAccountDetails_Response::free_trial_expiration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.free_trial_expiration)
  return free_trial_expiration_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_free_trial_expiration(::google::protobuf::uint32 value) {
  set_has_free_trial_expiration();
  free_trial_expiration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.free_trial_expiration)
}

// optional bool is_low_violence = 15;
bool CGCSystemMsg_GetAccountDetails_Response::has_is_low_violence() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_is_low_violence() {
  _has_bits_[0] |= 0x00004000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_is_low_violence() {
  _has_bits_[0] &= ~0x00004000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_is_low_violence() {
  is_low_violence_ = false;
  clear_has_is_low_violence();
}
bool CGCSystemMsg_GetAccountDetails_Response::is_low_violence() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_low_violence)
  return is_low_violence_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_is_low_violence(bool value) {
  set_has_is_low_violence();
  is_low_violence_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_low_violence)
}

// optional bool is_account_locked_down = 16;
bool CGCSystemMsg_GetAccountDetails_Response::has_is_account_locked_down() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_is_account_locked_down() {
  _has_bits_[0] |= 0x00008000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_is_account_locked_down() {
  _has_bits_[0] &= ~0x00008000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_is_account_locked_down() {
  is_account_locked_down_ = false;
  clear_has_is_account_locked_down();
}
bool CGCSystemMsg_GetAccountDetails_Response::is_account_locked_down() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_account_locked_down)
  return is_account_locked_down_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_is_account_locked_down(bool value) {
  set_has_is_account_locked_down();
  is_account_locked_down_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_account_locked_down)
}

// optional bool is_community_banned = 17;
bool CGCSystemMsg_GetAccountDetails_Response::has_is_community_banned() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_is_community_banned() {
  _has_bits_[0] |= 0x00010000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_is_community_banned() {
  _has_bits_[0] &= ~0x00010000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_is_community_banned() {
  is_community_banned_ = false;
  clear_has_is_community_banned();
}
bool CGCSystemMsg_GetAccountDetails_Response::is_community_banned() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_community_banned)
  return is_community_banned_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_is_community_banned(bool value) {
  set_has_is_community_banned();
  is_community_banned_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_community_banned)
}

// optional bool is_trade_banned = 18;
bool CGCSystemMsg_GetAccountDetails_Response::has_is_trade_banned() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_is_trade_banned() {
  _has_bits_[0] |= 0x00800000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_is_trade_banned() {
  _has_bits_[0] &= ~0x00800000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_is_trade_banned() {
  is_trade_banned_ = false;
  clear_has_is_trade_banned();
}
bool CGCSystemMsg_GetAccountDetails_Response::is_trade_banned() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_trade_banned)
  return is_trade_banned_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_is_trade_banned(bool value) {
  set_has_is_trade_banned();
  is_trade_banned_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_trade_banned)
}

// optional uint32 trade_ban_expiration = 19;
bool CGCSystemMsg_GetAccountDetails_Response::has_trade_ban_expiration() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_trade_ban_expiration() {
  _has_bits_[0] |= 0x00020000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_trade_ban_expiration() {
  _has_bits_[0] &= ~0x00020000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_trade_ban_expiration() {
  trade_ban_expiration_ = 0u;
  clear_has_trade_ban_expiration();
}
::google::protobuf::uint32 CGCSystemMsg_GetAccountDetails_Response::trade_ban_expiration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.trade_ban_expiration)
  return trade_ban_expiration_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_trade_ban_expiration(::google::protobuf::uint32 value) {
  set_has_trade_ban_expiration();
  trade_ban_expiration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.trade_ban_expiration)
}

// optional uint32 accountid = 20;
bool CGCSystemMsg_GetAccountDetails_Response::has_accountid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_accountid() {
  _has_bits_[0] |= 0x00040000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_accountid() {
  _has_bits_[0] &= ~0x00040000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
::google::protobuf::uint32 CGCSystemMsg_GetAccountDetails_Response::accountid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.accountid)
  return accountid_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.accountid)
}

// optional uint32 suspension_end_time = 21;
bool CGCSystemMsg_GetAccountDetails_Response::has_suspension_end_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_suspension_end_time() {
  _has_bits_[0] |= 0x00080000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_suspension_end_time() {
  _has_bits_[0] &= ~0x00080000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_suspension_end_time() {
  suspension_end_time_ = 0u;
  clear_has_suspension_end_time();
}
::google::protobuf::uint32 CGCSystemMsg_GetAccountDetails_Response::suspension_end_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.suspension_end_time)
  return suspension_end_time_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_suspension_end_time(::google::protobuf::uint32 value) {
  set_has_suspension_end_time();
  suspension_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.suspension_end_time)
}

// optional string currency = 22;
bool CGCSystemMsg_GetAccountDetails_Response::has_currency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_currency() {
  _has_bits_[0] |= 0x00000004u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_currency() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_currency() {
  currency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currency();
}
const ::std::string& CGCSystemMsg_GetAccountDetails_Response::currency() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.currency)
  return currency_.GetNoArena();
}
void CGCSystemMsg_GetAccountDetails_Response::set_currency(const ::std::string& value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.currency)
}
#if LANG_CXX11
void CGCSystemMsg_GetAccountDetails_Response::set_currency(::std::string&& value) {
  set_has_currency();
  currency_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CGCSystemMsg_GetAccountDetails_Response.currency)
}
#endif
void CGCSystemMsg_GetAccountDetails_Response::set_currency(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CGCSystemMsg_GetAccountDetails_Response.currency)
}
void CGCSystemMsg_GetAccountDetails_Response::set_currency(const char* value, size_t size) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CGCSystemMsg_GetAccountDetails_Response.currency)
}
::std::string* CGCSystemMsg_GetAccountDetails_Response::mutable_currency() {
  set_has_currency();
  // @@protoc_insertion_point(field_mutable:proto.dota.CGCSystemMsg_GetAccountDetails_Response.currency)
  return currency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGCSystemMsg_GetAccountDetails_Response::release_currency() {
  // @@protoc_insertion_point(field_release:proto.dota.CGCSystemMsg_GetAccountDetails_Response.currency)
  clear_has_currency();
  return currency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGCSystemMsg_GetAccountDetails_Response::set_allocated_currency(::std::string* currency) {
  if (currency != NULL) {
    set_has_currency();
  } else {
    clear_has_currency();
  }
  currency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CGCSystemMsg_GetAccountDetails_Response.currency)
}

// optional uint32 steam_level = 23;
bool CGCSystemMsg_GetAccountDetails_Response::has_steam_level() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_steam_level() {
  _has_bits_[0] |= 0x00100000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_steam_level() {
  _has_bits_[0] &= ~0x00100000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_steam_level() {
  steam_level_ = 0u;
  clear_has_steam_level();
}
::google::protobuf::uint32 CGCSystemMsg_GetAccountDetails_Response::steam_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.steam_level)
  return steam_level_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_steam_level(::google::protobuf::uint32 value) {
  set_has_steam_level();
  steam_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.steam_level)
}

// optional uint32 friend_count = 24;
bool CGCSystemMsg_GetAccountDetails_Response::has_friend_count() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_friend_count() {
  _has_bits_[0] |= 0x00200000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_friend_count() {
  _has_bits_[0] &= ~0x00200000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_friend_count() {
  friend_count_ = 0u;
  clear_has_friend_count();
}
::google::protobuf::uint32 CGCSystemMsg_GetAccountDetails_Response::friend_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.friend_count)
  return friend_count_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_friend_count(::google::protobuf::uint32 value) {
  set_has_friend_count();
  friend_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.friend_count)
}

// optional uint32 account_creation_time = 25;
bool CGCSystemMsg_GetAccountDetails_Response::has_account_creation_time() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_account_creation_time() {
  _has_bits_[0] |= 0x00400000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_account_creation_time() {
  _has_bits_[0] &= ~0x00400000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_account_creation_time() {
  account_creation_time_ = 0u;
  clear_has_account_creation_time();
}
::google::protobuf::uint32 CGCSystemMsg_GetAccountDetails_Response::account_creation_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.account_creation_time)
  return account_creation_time_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_account_creation_time(::google::protobuf::uint32 value) {
  set_has_account_creation_time();
  account_creation_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.account_creation_time)
}

// optional bool is_steamguard_enabled = 27;
bool CGCSystemMsg_GetAccountDetails_Response::has_is_steamguard_enabled() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_is_steamguard_enabled() {
  _has_bits_[0] |= 0x01000000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_is_steamguard_enabled() {
  _has_bits_[0] &= ~0x01000000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_is_steamguard_enabled() {
  is_steamguard_enabled_ = false;
  clear_has_is_steamguard_enabled();
}
bool CGCSystemMsg_GetAccountDetails_Response::is_steamguard_enabled() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_steamguard_enabled)
  return is_steamguard_enabled_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_is_steamguard_enabled(bool value) {
  set_has_is_steamguard_enabled();
  is_steamguard_enabled_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_steamguard_enabled)
}

// optional bool is_phone_verified = 28;
bool CGCSystemMsg_GetAccountDetails_Response::has_is_phone_verified() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_is_phone_verified() {
  _has_bits_[0] |= 0x02000000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_is_phone_verified() {
  _has_bits_[0] &= ~0x02000000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_is_phone_verified() {
  is_phone_verified_ = false;
  clear_has_is_phone_verified();
}
bool CGCSystemMsg_GetAccountDetails_Response::is_phone_verified() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_phone_verified)
  return is_phone_verified_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_is_phone_verified(bool value) {
  set_has_is_phone_verified();
  is_phone_verified_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_phone_verified)
}

// optional bool is_two_factor_auth_enabled = 29;
bool CGCSystemMsg_GetAccountDetails_Response::has_is_two_factor_auth_enabled() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_is_two_factor_auth_enabled() {
  _has_bits_[0] |= 0x04000000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_is_two_factor_auth_enabled() {
  _has_bits_[0] &= ~0x04000000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_is_two_factor_auth_enabled() {
  is_two_factor_auth_enabled_ = false;
  clear_has_is_two_factor_auth_enabled();
}
bool CGCSystemMsg_GetAccountDetails_Response::is_two_factor_auth_enabled() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_two_factor_auth_enabled)
  return is_two_factor_auth_enabled_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_is_two_factor_auth_enabled(bool value) {
  set_has_is_two_factor_auth_enabled();
  is_two_factor_auth_enabled_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_two_factor_auth_enabled)
}

// optional uint32 two_factor_enabled_time = 30;
bool CGCSystemMsg_GetAccountDetails_Response::has_two_factor_enabled_time() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_two_factor_enabled_time() {
  _has_bits_[0] |= 0x08000000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_two_factor_enabled_time() {
  _has_bits_[0] &= ~0x08000000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_two_factor_enabled_time() {
  two_factor_enabled_time_ = 0u;
  clear_has_two_factor_enabled_time();
}
::google::protobuf::uint32 CGCSystemMsg_GetAccountDetails_Response::two_factor_enabled_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.two_factor_enabled_time)
  return two_factor_enabled_time_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_two_factor_enabled_time(::google::protobuf::uint32 value) {
  set_has_two_factor_enabled_time();
  two_factor_enabled_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.two_factor_enabled_time)
}

// optional uint32 phone_verification_time = 31;
bool CGCSystemMsg_GetAccountDetails_Response::has_phone_verification_time() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_phone_verification_time() {
  _has_bits_[0] |= 0x10000000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_phone_verification_time() {
  _has_bits_[0] &= ~0x10000000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_phone_verification_time() {
  phone_verification_time_ = 0u;
  clear_has_phone_verification_time();
}
::google::protobuf::uint32 CGCSystemMsg_GetAccountDetails_Response::phone_verification_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.phone_verification_time)
  return phone_verification_time_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_phone_verification_time(::google::protobuf::uint32 value) {
  set_has_phone_verification_time();
  phone_verification_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.phone_verification_time)
}

// optional uint64 phone_id = 33;
bool CGCSystemMsg_GetAccountDetails_Response::has_phone_id() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_phone_id() {
  _has_bits_[0] |= 0x20000000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_phone_id() {
  _has_bits_[0] &= ~0x20000000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_phone_id() {
  phone_id_ = GOOGLE_ULONGLONG(0);
  clear_has_phone_id();
}
::google::protobuf::uint64 CGCSystemMsg_GetAccountDetails_Response::phone_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.phone_id)
  return phone_id_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_phone_id(::google::protobuf::uint64 value) {
  set_has_phone_id();
  phone_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.phone_id)
}

// optional bool is_phone_identifying = 34;
bool CGCSystemMsg_GetAccountDetails_Response::has_is_phone_identifying() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void CGCSystemMsg_GetAccountDetails_Response::set_has_is_phone_identifying() {
  _has_bits_[0] |= 0x40000000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_has_is_phone_identifying() {
  _has_bits_[0] &= ~0x40000000u;
}
void CGCSystemMsg_GetAccountDetails_Response::clear_is_phone_identifying() {
  is_phone_identifying_ = false;
  clear_has_is_phone_identifying();
}
bool CGCSystemMsg_GetAccountDetails_Response::is_phone_identifying() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_phone_identifying)
  return is_phone_identifying_;
}
void CGCSystemMsg_GetAccountDetails_Response::set_is_phone_identifying(bool value) {
  set_has_is_phone_identifying();
  is_phone_identifying_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetAccountDetails_Response.is_phone_identifying)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetPersonaNames::kSteamidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetPersonaNames::CMsgGCGetPersonaNames()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetPersonaNames)
}
CMsgGCGetPersonaNames::CMsgGCGetPersonaNames(const CMsgGCGetPersonaNames& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      steamids_(from.steamids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetPersonaNames)
}

void CMsgGCGetPersonaNames::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCGetPersonaNames::~CMsgGCGetPersonaNames() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetPersonaNames)
  SharedDtor();
}

void CMsgGCGetPersonaNames::SharedDtor() {
}

void CMsgGCGetPersonaNames::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetPersonaNames::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCGetPersonaNames& CMsgGCGetPersonaNames::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCGetPersonaNames* CMsgGCGetPersonaNames::New(::google::protobuf::Arena* arena) const {
  CMsgGCGetPersonaNames* n = new CMsgGCGetPersonaNames;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCGetPersonaNames::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetPersonaNames)
  steamids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCGetPersonaNames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetPersonaNames)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 steamids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9u, input, this->mutable_steamids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetPersonaNames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetPersonaNames)
  return false;
#undef DO_
}

void CMsgGCGetPersonaNames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetPersonaNames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 steamids = 1;
  for (int i = 0, n = this->steamids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->steamids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetPersonaNames)
}

::google::protobuf::uint8* CMsgGCGetPersonaNames::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetPersonaNames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 steamids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(1, this->steamids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetPersonaNames)
  return target;
}

size_t CMsgGCGetPersonaNames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetPersonaNames)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed64 steamids = 1;
  {
    unsigned int count = this->steamids_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steamids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetPersonaNames::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetPersonaNames)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetPersonaNames* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCGetPersonaNames>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetPersonaNames)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetPersonaNames)
    MergeFrom(*source);
  }
}

void CMsgGCGetPersonaNames::MergeFrom(const CMsgGCGetPersonaNames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetPersonaNames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamids_.MergeFrom(from.steamids_);
}

void CMsgGCGetPersonaNames::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetPersonaNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPersonaNames::CopyFrom(const CMsgGCGetPersonaNames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetPersonaNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPersonaNames::IsInitialized() const {
  return true;
}

void CMsgGCGetPersonaNames::Swap(CMsgGCGetPersonaNames* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetPersonaNames::InternalSwap(CMsgGCGetPersonaNames* other) {
  steamids_.InternalSwap(&other->steamids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCGetPersonaNames::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCGetPersonaNames

// repeated fixed64 steamids = 1;
int CMsgGCGetPersonaNames::steamids_size() const {
  return steamids_.size();
}
void CMsgGCGetPersonaNames::clear_steamids() {
  steamids_.Clear();
}
::google::protobuf::uint64 CMsgGCGetPersonaNames::steamids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPersonaNames.steamids)
  return steamids_.Get(index);
}
void CMsgGCGetPersonaNames::set_steamids(int index, ::google::protobuf::uint64 value) {
  steamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetPersonaNames.steamids)
}
void CMsgGCGetPersonaNames::add_steamids(::google::protobuf::uint64 value) {
  steamids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCGetPersonaNames.steamids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgGCGetPersonaNames::steamids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCGetPersonaNames.steamids)
  return steamids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgGCGetPersonaNames::mutable_steamids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCGetPersonaNames.steamids)
  return &steamids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetPersonaNames_Response_PersonaName::kSteamidFieldNumber;
const int CMsgGCGetPersonaNames_Response_PersonaName::kPersonaNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetPersonaNames_Response_PersonaName::CMsgGCGetPersonaNames_Response_PersonaName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
}
CMsgGCGetPersonaNames_Response_PersonaName::CMsgGCGetPersonaNames_Response_PersonaName(const CMsgGCGetPersonaNames_Response_PersonaName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
}

void CMsgGCGetPersonaNames_Response_PersonaName::SharedCtor() {
  _cached_size_ = 0;
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamid_ = GOOGLE_ULONGLONG(0);
}

CMsgGCGetPersonaNames_Response_PersonaName::~CMsgGCGetPersonaNames_Response_PersonaName() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  SharedDtor();
}

void CMsgGCGetPersonaNames_Response_PersonaName::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCGetPersonaNames_Response_PersonaName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetPersonaNames_Response_PersonaName::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCGetPersonaNames_Response_PersonaName& CMsgGCGetPersonaNames_Response_PersonaName::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCGetPersonaNames_Response_PersonaName* CMsgGCGetPersonaNames_Response_PersonaName::New(::google::protobuf::Arena* arena) const {
  CMsgGCGetPersonaNames_Response_PersonaName* n = new CMsgGCGetPersonaNames_Response_PersonaName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCGetPersonaNames_Response_PersonaName::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  if (has_persona_name()) {
    GOOGLE_DCHECK(!persona_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*persona_name_.UnsafeRawStringPointer())->clear();
  }
  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCGetPersonaNames_Response_PersonaName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCGetPersonaNames_Response.PersonaName.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  return false;
#undef DO_
}

void CMsgGCGetPersonaNames_Response_PersonaName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCGetPersonaNames_Response.PersonaName.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
}

::google::protobuf::uint8* CMsgGCGetPersonaNames_Response_PersonaName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCGetPersonaNames_Response.PersonaName.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  return target;
}

size_t CMsgGCGetPersonaNames_Response_PersonaName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string persona_name = 2;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetPersonaNames_Response_PersonaName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetPersonaNames_Response_PersonaName* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCGetPersonaNames_Response_PersonaName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
    MergeFrom(*source);
  }
}

void CMsgGCGetPersonaNames_Response_PersonaName::MergeFrom(const CMsgGCGetPersonaNames_Response_PersonaName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona_name();
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCGetPersonaNames_Response_PersonaName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPersonaNames_Response_PersonaName::CopyFrom(const CMsgGCGetPersonaNames_Response_PersonaName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPersonaNames_Response_PersonaName::IsInitialized() const {
  return true;
}

void CMsgGCGetPersonaNames_Response_PersonaName::Swap(CMsgGCGetPersonaNames_Response_PersonaName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetPersonaNames_Response_PersonaName::InternalSwap(CMsgGCGetPersonaNames_Response_PersonaName* other) {
  persona_name_.Swap(&other->persona_name_);
  std::swap(steamid_, other->steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCGetPersonaNames_Response_PersonaName::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCGetPersonaNames_Response_PersonaName

// optional fixed64 steamid = 1;
bool CMsgGCGetPersonaNames_Response_PersonaName::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCGetPersonaNames_Response_PersonaName::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCGetPersonaNames_Response_PersonaName::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCGetPersonaNames_Response_PersonaName::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgGCGetPersonaNames_Response_PersonaName::steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName.steamid)
  return steamid_;
}
void CMsgGCGetPersonaNames_Response_PersonaName::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName.steamid)
}

// optional string persona_name = 2;
bool CMsgGCGetPersonaNames_Response_PersonaName::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCGetPersonaNames_Response_PersonaName::set_has_persona_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCGetPersonaNames_Response_PersonaName::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCGetPersonaNames_Response_PersonaName::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name();
}
const ::std::string& CMsgGCGetPersonaNames_Response_PersonaName::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName.persona_name)
  return persona_name_.GetNoArena();
}
void CMsgGCGetPersonaNames_Response_PersonaName::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName.persona_name)
}
#if LANG_CXX11
void CMsgGCGetPersonaNames_Response_PersonaName::set_persona_name(::std::string&& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName.persona_name)
}
#endif
void CMsgGCGetPersonaNames_Response_PersonaName::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName.persona_name)
}
void CMsgGCGetPersonaNames_Response_PersonaName::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName.persona_name)
}
::std::string* CMsgGCGetPersonaNames_Response_PersonaName::mutable_persona_name() {
  set_has_persona_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCGetPersonaNames_Response_PersonaName::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName.persona_name)
  clear_has_persona_name();
  return persona_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCGetPersonaNames_Response_PersonaName::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != NULL) {
    set_has_persona_name();
  } else {
    clear_has_persona_name();
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCGetPersonaNames_Response.PersonaName.persona_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetPersonaNames_Response::kSucceededLookupsFieldNumber;
const int CMsgGCGetPersonaNames_Response::kFailedLookupSteamidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetPersonaNames_Response::CMsgGCGetPersonaNames_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetPersonaNames_Response)
}
CMsgGCGetPersonaNames_Response::CMsgGCGetPersonaNames_Response(const CMsgGCGetPersonaNames_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      succeeded_lookups_(from.succeeded_lookups_),
      failed_lookup_steamids_(from.failed_lookup_steamids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetPersonaNames_Response)
}

void CMsgGCGetPersonaNames_Response::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCGetPersonaNames_Response::~CMsgGCGetPersonaNames_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetPersonaNames_Response)
  SharedDtor();
}

void CMsgGCGetPersonaNames_Response::SharedDtor() {
}

void CMsgGCGetPersonaNames_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetPersonaNames_Response::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCGetPersonaNames_Response& CMsgGCGetPersonaNames_Response::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCGetPersonaNames_Response* CMsgGCGetPersonaNames_Response::New(::google::protobuf::Arena* arena) const {
  CMsgGCGetPersonaNames_Response* n = new CMsgGCGetPersonaNames_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCGetPersonaNames_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetPersonaNames_Response)
  succeeded_lookups_.Clear();
  failed_lookup_steamids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCGetPersonaNames_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetPersonaNames_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_succeeded_lookups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 failed_lookup_steamids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_failed_lookup_steamids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_failed_lookup_steamids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetPersonaNames_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetPersonaNames_Response)
  return false;
#undef DO_
}

void CMsgGCGetPersonaNames_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetPersonaNames_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
  for (unsigned int i = 0, n = this->succeeded_lookups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->succeeded_lookups(i), output);
  }

  // repeated fixed64 failed_lookup_steamids = 2;
  for (int i = 0, n = this->failed_lookup_steamids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->failed_lookup_steamids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetPersonaNames_Response)
}

::google::protobuf::uint8* CMsgGCGetPersonaNames_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetPersonaNames_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
  for (unsigned int i = 0, n = this->succeeded_lookups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->succeeded_lookups(i), deterministic, target);
  }

  // repeated fixed64 failed_lookup_steamids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->failed_lookup_steamids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetPersonaNames_Response)
  return target;
}

size_t CMsgGCGetPersonaNames_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetPersonaNames_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
  {
    unsigned int count = this->succeeded_lookups_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->succeeded_lookups(i));
    }
  }

  // repeated fixed64 failed_lookup_steamids = 2;
  {
    unsigned int count = this->failed_lookup_steamids_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->failed_lookup_steamids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetPersonaNames_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetPersonaNames_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetPersonaNames_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCGetPersonaNames_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetPersonaNames_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetPersonaNames_Response)
    MergeFrom(*source);
  }
}

void CMsgGCGetPersonaNames_Response::MergeFrom(const CMsgGCGetPersonaNames_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetPersonaNames_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  succeeded_lookups_.MergeFrom(from.succeeded_lookups_);
  failed_lookup_steamids_.MergeFrom(from.failed_lookup_steamids_);
}

void CMsgGCGetPersonaNames_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetPersonaNames_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPersonaNames_Response::CopyFrom(const CMsgGCGetPersonaNames_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetPersonaNames_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPersonaNames_Response::IsInitialized() const {
  return true;
}

void CMsgGCGetPersonaNames_Response::Swap(CMsgGCGetPersonaNames_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetPersonaNames_Response::InternalSwap(CMsgGCGetPersonaNames_Response* other) {
  succeeded_lookups_.InternalSwap(&other->succeeded_lookups_);
  failed_lookup_steamids_.InternalSwap(&other->failed_lookup_steamids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCGetPersonaNames_Response::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCGetPersonaNames_Response

// repeated .proto.dota.CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
int CMsgGCGetPersonaNames_Response::succeeded_lookups_size() const {
  return succeeded_lookups_.size();
}
void CMsgGCGetPersonaNames_Response::clear_succeeded_lookups() {
  succeeded_lookups_.Clear();
}
const ::proto::dota::CMsgGCGetPersonaNames_Response_PersonaName& CMsgGCGetPersonaNames_Response::succeeded_lookups(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPersonaNames_Response.succeeded_lookups)
  return succeeded_lookups_.Get(index);
}
::proto::dota::CMsgGCGetPersonaNames_Response_PersonaName* CMsgGCGetPersonaNames_Response::mutable_succeeded_lookups(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCGetPersonaNames_Response.succeeded_lookups)
  return succeeded_lookups_.Mutable(index);
}
::proto::dota::CMsgGCGetPersonaNames_Response_PersonaName* CMsgGCGetPersonaNames_Response::add_succeeded_lookups() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCGetPersonaNames_Response.succeeded_lookups)
  return succeeded_lookups_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCGetPersonaNames_Response_PersonaName >*
CMsgGCGetPersonaNames_Response::mutable_succeeded_lookups() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCGetPersonaNames_Response.succeeded_lookups)
  return &succeeded_lookups_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCGetPersonaNames_Response_PersonaName >&
CMsgGCGetPersonaNames_Response::succeeded_lookups() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCGetPersonaNames_Response.succeeded_lookups)
  return succeeded_lookups_;
}

// repeated fixed64 failed_lookup_steamids = 2;
int CMsgGCGetPersonaNames_Response::failed_lookup_steamids_size() const {
  return failed_lookup_steamids_.size();
}
void CMsgGCGetPersonaNames_Response::clear_failed_lookup_steamids() {
  failed_lookup_steamids_.Clear();
}
::google::protobuf::uint64 CMsgGCGetPersonaNames_Response::failed_lookup_steamids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPersonaNames_Response.failed_lookup_steamids)
  return failed_lookup_steamids_.Get(index);
}
void CMsgGCGetPersonaNames_Response::set_failed_lookup_steamids(int index, ::google::protobuf::uint64 value) {
  failed_lookup_steamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetPersonaNames_Response.failed_lookup_steamids)
}
void CMsgGCGetPersonaNames_Response::add_failed_lookup_steamids(::google::protobuf::uint64 value) {
  failed_lookup_steamids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCGetPersonaNames_Response.failed_lookup_steamids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgGCGetPersonaNames_Response::failed_lookup_steamids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCGetPersonaNames_Response.failed_lookup_steamids)
  return failed_lookup_steamids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgGCGetPersonaNames_Response::mutable_failed_lookup_steamids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCGetPersonaNames_Response.failed_lookup_steamids)
  return &failed_lookup_steamids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCheckFriendship::kSteamidLeftFieldNumber;
const int CMsgGCCheckFriendship::kSteamidRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCheckFriendship::CMsgGCCheckFriendship()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCCheckFriendship)
}
CMsgGCCheckFriendship::CMsgGCCheckFriendship(const CMsgGCCheckFriendship& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_left_, &from.steamid_left_,
    reinterpret_cast<char*>(&steamid_right_) -
    reinterpret_cast<char*>(&steamid_left_) + sizeof(steamid_right_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCCheckFriendship)
}

void CMsgGCCheckFriendship::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_left_, 0, reinterpret_cast<char*>(&steamid_right_) -
    reinterpret_cast<char*>(&steamid_left_) + sizeof(steamid_right_));
}

CMsgGCCheckFriendship::~CMsgGCCheckFriendship() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCCheckFriendship)
  SharedDtor();
}

void CMsgGCCheckFriendship::SharedDtor() {
}

void CMsgGCCheckFriendship::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCheckFriendship::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCheckFriendship& CMsgGCCheckFriendship::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCCheckFriendship* CMsgGCCheckFriendship::New(::google::protobuf::Arena* arena) const {
  CMsgGCCheckFriendship* n = new CMsgGCCheckFriendship;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCCheckFriendship::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCCheckFriendship)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steamid_left_, 0, reinterpret_cast<char*>(&steamid_right_) -
      reinterpret_cast<char*>(&steamid_left_) + sizeof(steamid_right_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCheckFriendship::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCCheckFriendship)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_right = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steamid_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCCheckFriendship)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCCheckFriendship)
  return false;
#undef DO_
}

void CMsgGCCheckFriendship::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCCheckFriendship)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_left = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_left(), output);
  }

  // optional fixed64 steamid_right = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid_right(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCCheckFriendship)
}

::google::protobuf::uint8* CMsgGCCheckFriendship::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCCheckFriendship)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid_left(), target);
  }

  // optional fixed64 steamid_right = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid_right(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCCheckFriendship)
  return target;
}

size_t CMsgGCCheckFriendship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCCheckFriendship)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid_left = 1;
    if (has_steamid_left()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid_right = 2;
    if (has_steamid_right()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCheckFriendship::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCCheckFriendship)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCheckFriendship* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCheckFriendship>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCCheckFriendship)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCCheckFriendship)
    MergeFrom(*source);
  }
}

void CMsgGCCheckFriendship::MergeFrom(const CMsgGCCheckFriendship& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCCheckFriendship)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_left_ = from.steamid_left_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_right_ = from.steamid_right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCheckFriendship::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCCheckFriendship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCheckFriendship::CopyFrom(const CMsgGCCheckFriendship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCCheckFriendship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCheckFriendship::IsInitialized() const {
  return true;
}

void CMsgGCCheckFriendship::Swap(CMsgGCCheckFriendship* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCheckFriendship::InternalSwap(CMsgGCCheckFriendship* other) {
  std::swap(steamid_left_, other->steamid_left_);
  std::swap(steamid_right_, other->steamid_right_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCCheckFriendship::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCCheckFriendship

// optional fixed64 steamid_left = 1;
bool CMsgGCCheckFriendship::has_steamid_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCCheckFriendship::set_has_steamid_left() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCCheckFriendship::clear_has_steamid_left() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCCheckFriendship::clear_steamid_left() {
  steamid_left_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_left();
}
::google::protobuf::uint64 CMsgGCCheckFriendship::steamid_left() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCCheckFriendship.steamid_left)
  return steamid_left_;
}
void CMsgGCCheckFriendship::set_steamid_left(::google::protobuf::uint64 value) {
  set_has_steamid_left();
  steamid_left_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCCheckFriendship.steamid_left)
}

// optional fixed64 steamid_right = 2;
bool CMsgGCCheckFriendship::has_steamid_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCCheckFriendship::set_has_steamid_right() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCCheckFriendship::clear_has_steamid_right() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCCheckFriendship::clear_steamid_right() {
  steamid_right_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_right();
}
::google::protobuf::uint64 CMsgGCCheckFriendship::steamid_right() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCCheckFriendship.steamid_right)
  return steamid_right_;
}
void CMsgGCCheckFriendship::set_steamid_right(::google::protobuf::uint64 value) {
  set_has_steamid_right();
  steamid_right_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCCheckFriendship.steamid_right)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCheckFriendship_Response::kSuccessFieldNumber;
const int CMsgGCCheckFriendship_Response::kFoundFriendshipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCheckFriendship_Response::CMsgGCCheckFriendship_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCCheckFriendship_Response)
}
CMsgGCCheckFriendship_Response::CMsgGCCheckFriendship_Response(const CMsgGCCheckFriendship_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    reinterpret_cast<char*>(&found_friendship_) -
    reinterpret_cast<char*>(&success_) + sizeof(found_friendship_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCCheckFriendship_Response)
}

void CMsgGCCheckFriendship_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&success_, 0, reinterpret_cast<char*>(&found_friendship_) -
    reinterpret_cast<char*>(&success_) + sizeof(found_friendship_));
}

CMsgGCCheckFriendship_Response::~CMsgGCCheckFriendship_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCCheckFriendship_Response)
  SharedDtor();
}

void CMsgGCCheckFriendship_Response::SharedDtor() {
}

void CMsgGCCheckFriendship_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCCheckFriendship_Response::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCCheckFriendship_Response& CMsgGCCheckFriendship_Response::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCCheckFriendship_Response* CMsgGCCheckFriendship_Response::New(::google::protobuf::Arena* arena) const {
  CMsgGCCheckFriendship_Response* n = new CMsgGCCheckFriendship_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCCheckFriendship_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCCheckFriendship_Response)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&success_, 0, reinterpret_cast<char*>(&found_friendship_) -
      reinterpret_cast<char*>(&success_) + sizeof(found_friendship_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCCheckFriendship_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCCheckFriendship_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool found_friendship = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_found_friendship();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &found_friendship_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCCheckFriendship_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCCheckFriendship_Response)
  return false;
#undef DO_
}

void CMsgGCCheckFriendship_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCCheckFriendship_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional bool found_friendship = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->found_friendship(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCCheckFriendship_Response)
}

::google::protobuf::uint8* CMsgGCCheckFriendship_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCCheckFriendship_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional bool found_friendship = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->found_friendship(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCCheckFriendship_Response)
  return target;
}

size_t CMsgGCCheckFriendship_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCCheckFriendship_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional bool found_friendship = 2;
    if (has_found_friendship()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCCheckFriendship_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCCheckFriendship_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCheckFriendship_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCCheckFriendship_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCCheckFriendship_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCCheckFriendship_Response)
    MergeFrom(*source);
  }
}

void CMsgGCCheckFriendship_Response::MergeFrom(const CMsgGCCheckFriendship_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCCheckFriendship_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000002u) {
      found_friendship_ = from.found_friendship_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCheckFriendship_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCCheckFriendship_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCheckFriendship_Response::CopyFrom(const CMsgGCCheckFriendship_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCCheckFriendship_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCheckFriendship_Response::IsInitialized() const {
  return true;
}

void CMsgGCCheckFriendship_Response::Swap(CMsgGCCheckFriendship_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCheckFriendship_Response::InternalSwap(CMsgGCCheckFriendship_Response* other) {
  std::swap(success_, other->success_);
  std::swap(found_friendship_, other->found_friendship_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCCheckFriendship_Response::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCCheckFriendship_Response

// optional bool success = 1;
bool CMsgGCCheckFriendship_Response::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCCheckFriendship_Response::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCCheckFriendship_Response::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCCheckFriendship_Response::clear_success() {
  success_ = false;
  clear_has_success();
}
bool CMsgGCCheckFriendship_Response::success() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCCheckFriendship_Response.success)
  return success_;
}
void CMsgGCCheckFriendship_Response::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCCheckFriendship_Response.success)
}

// optional bool found_friendship = 2;
bool CMsgGCCheckFriendship_Response::has_found_friendship() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCCheckFriendship_Response::set_has_found_friendship() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCCheckFriendship_Response::clear_has_found_friendship() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCCheckFriendship_Response::clear_found_friendship() {
  found_friendship_ = false;
  clear_has_found_friendship();
}
bool CMsgGCCheckFriendship_Response::found_friendship() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCCheckFriendship_Response.found_friendship)
  return found_friendship_;
}
void CMsgGCCheckFriendship_Response::set_found_friendship(bool value) {
  set_has_found_friendship();
  found_friendship_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCCheckFriendship_Response.found_friendship)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetAppFriendsList::kSteamidFieldNumber;
const int CMsgGCGetAppFriendsList::kIncludeFriendshipTimestampsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetAppFriendsList::CMsgGCGetAppFriendsList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetAppFriendsList)
}
CMsgGCGetAppFriendsList::CMsgGCGetAppFriendsList(const CMsgGCGetAppFriendsList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&include_friendship_timestamps_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(include_friendship_timestamps_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetAppFriendsList)
}

void CMsgGCGetAppFriendsList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&include_friendship_timestamps_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(include_friendship_timestamps_));
}

CMsgGCGetAppFriendsList::~CMsgGCGetAppFriendsList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetAppFriendsList)
  SharedDtor();
}

void CMsgGCGetAppFriendsList::SharedDtor() {
}

void CMsgGCGetAppFriendsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetAppFriendsList::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCGetAppFriendsList& CMsgGCGetAppFriendsList::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCGetAppFriendsList* CMsgGCGetAppFriendsList::New(::google::protobuf::Arena* arena) const {
  CMsgGCGetAppFriendsList* n = new CMsgGCGetAppFriendsList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCGetAppFriendsList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetAppFriendsList)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&include_friendship_timestamps_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(include_friendship_timestamps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCGetAppFriendsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetAppFriendsList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_friendship_timestamps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_include_friendship_timestamps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_friendship_timestamps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetAppFriendsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetAppFriendsList)
  return false;
#undef DO_
}

void CMsgGCGetAppFriendsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetAppFriendsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional bool include_friendship_timestamps = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->include_friendship_timestamps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetAppFriendsList)
}

::google::protobuf::uint8* CMsgGCGetAppFriendsList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetAppFriendsList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional bool include_friendship_timestamps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->include_friendship_timestamps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetAppFriendsList)
  return target;
}

size_t CMsgGCGetAppFriendsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetAppFriendsList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional bool include_friendship_timestamps = 2;
    if (has_include_friendship_timestamps()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetAppFriendsList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetAppFriendsList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetAppFriendsList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCGetAppFriendsList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetAppFriendsList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetAppFriendsList)
    MergeFrom(*source);
  }
}

void CMsgGCGetAppFriendsList::MergeFrom(const CMsgGCGetAppFriendsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetAppFriendsList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      include_friendship_timestamps_ = from.include_friendship_timestamps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCGetAppFriendsList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetAppFriendsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetAppFriendsList::CopyFrom(const CMsgGCGetAppFriendsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetAppFriendsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetAppFriendsList::IsInitialized() const {
  return true;
}

void CMsgGCGetAppFriendsList::Swap(CMsgGCGetAppFriendsList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetAppFriendsList::InternalSwap(CMsgGCGetAppFriendsList* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(include_friendship_timestamps_, other->include_friendship_timestamps_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCGetAppFriendsList::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCGetAppFriendsList

// optional fixed64 steamid = 1;
bool CMsgGCGetAppFriendsList::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCGetAppFriendsList::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCGetAppFriendsList::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCGetAppFriendsList::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgGCGetAppFriendsList::steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetAppFriendsList.steamid)
  return steamid_;
}
void CMsgGCGetAppFriendsList::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetAppFriendsList.steamid)
}

// optional bool include_friendship_timestamps = 2;
bool CMsgGCGetAppFriendsList::has_include_friendship_timestamps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCGetAppFriendsList::set_has_include_friendship_timestamps() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCGetAppFriendsList::clear_has_include_friendship_timestamps() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCGetAppFriendsList::clear_include_friendship_timestamps() {
  include_friendship_timestamps_ = false;
  clear_has_include_friendship_timestamps();
}
bool CMsgGCGetAppFriendsList::include_friendship_timestamps() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetAppFriendsList.include_friendship_timestamps)
  return include_friendship_timestamps_;
}
void CMsgGCGetAppFriendsList::set_include_friendship_timestamps(bool value) {
  set_has_include_friendship_timestamps();
  include_friendship_timestamps_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetAppFriendsList.include_friendship_timestamps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetAppFriendsList_Response::kSuccessFieldNumber;
const int CMsgGCGetAppFriendsList_Response::kSteamidsFieldNumber;
const int CMsgGCGetAppFriendsList_Response::kFriendshipTimestampsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetAppFriendsList_Response::CMsgGCGetAppFriendsList_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetAppFriendsList_Response)
}
CMsgGCGetAppFriendsList_Response::CMsgGCGetAppFriendsList_Response(const CMsgGCGetAppFriendsList_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      steamids_(from.steamids_),
      friendship_timestamps_(from.friendship_timestamps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetAppFriendsList_Response)
}

void CMsgGCGetAppFriendsList_Response::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
}

CMsgGCGetAppFriendsList_Response::~CMsgGCGetAppFriendsList_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetAppFriendsList_Response)
  SharedDtor();
}

void CMsgGCGetAppFriendsList_Response::SharedDtor() {
}

void CMsgGCGetAppFriendsList_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetAppFriendsList_Response::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCGetAppFriendsList_Response& CMsgGCGetAppFriendsList_Response::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCGetAppFriendsList_Response* CMsgGCGetAppFriendsList_Response::New(::google::protobuf::Arena* arena) const {
  CMsgGCGetAppFriendsList_Response* n = new CMsgGCGetAppFriendsList_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCGetAppFriendsList_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetAppFriendsList_Response)
  steamids_.Clear();
  friendship_timestamps_.Clear();
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCGetAppFriendsList_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetAppFriendsList_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 steamids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_steamids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 friendship_timestamps = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 29u, input, this->mutable_friendship_timestamps())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_friendship_timestamps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetAppFriendsList_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetAppFriendsList_Response)
  return false;
#undef DO_
}

void CMsgGCGetAppFriendsList_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetAppFriendsList_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // repeated fixed64 steamids = 2;
  for (int i = 0, n = this->steamids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->steamids(i), output);
  }

  // repeated fixed32 friendship_timestamps = 3;
  for (int i = 0, n = this->friendship_timestamps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      3, this->friendship_timestamps(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetAppFriendsList_Response)
}

::google::protobuf::uint8* CMsgGCGetAppFriendsList_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetAppFriendsList_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // repeated fixed64 steamids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->steamids_, target);

  // repeated fixed32 friendship_timestamps = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(3, this->friendship_timestamps_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetAppFriendsList_Response)
  return target;
}

size_t CMsgGCGetAppFriendsList_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetAppFriendsList_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed64 steamids = 2;
  {
    unsigned int count = this->steamids_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steamids_size());
    total_size += data_size;
  }

  // repeated fixed32 friendship_timestamps = 3;
  {
    unsigned int count = this->friendship_timestamps_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->friendship_timestamps_size());
    total_size += data_size;
  }

  // optional bool success = 1;
  if (has_success()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetAppFriendsList_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetAppFriendsList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetAppFriendsList_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCGetAppFriendsList_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetAppFriendsList_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetAppFriendsList_Response)
    MergeFrom(*source);
  }
}

void CMsgGCGetAppFriendsList_Response::MergeFrom(const CMsgGCGetAppFriendsList_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetAppFriendsList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamids_.MergeFrom(from.steamids_);
  friendship_timestamps_.MergeFrom(from.friendship_timestamps_);
  if (from.has_success()) {
    set_success(from.success());
  }
}

void CMsgGCGetAppFriendsList_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetAppFriendsList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetAppFriendsList_Response::CopyFrom(const CMsgGCGetAppFriendsList_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetAppFriendsList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetAppFriendsList_Response::IsInitialized() const {
  return true;
}

void CMsgGCGetAppFriendsList_Response::Swap(CMsgGCGetAppFriendsList_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetAppFriendsList_Response::InternalSwap(CMsgGCGetAppFriendsList_Response* other) {
  steamids_.InternalSwap(&other->steamids_);
  friendship_timestamps_.InternalSwap(&other->friendship_timestamps_);
  std::swap(success_, other->success_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCGetAppFriendsList_Response::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCGetAppFriendsList_Response

// optional bool success = 1;
bool CMsgGCGetAppFriendsList_Response::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCGetAppFriendsList_Response::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCGetAppFriendsList_Response::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCGetAppFriendsList_Response::clear_success() {
  success_ = false;
  clear_has_success();
}
bool CMsgGCGetAppFriendsList_Response::success() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetAppFriendsList_Response.success)
  return success_;
}
void CMsgGCGetAppFriendsList_Response::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetAppFriendsList_Response.success)
}

// repeated fixed64 steamids = 2;
int CMsgGCGetAppFriendsList_Response::steamids_size() const {
  return steamids_.size();
}
void CMsgGCGetAppFriendsList_Response::clear_steamids() {
  steamids_.Clear();
}
::google::protobuf::uint64 CMsgGCGetAppFriendsList_Response::steamids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetAppFriendsList_Response.steamids)
  return steamids_.Get(index);
}
void CMsgGCGetAppFriendsList_Response::set_steamids(int index, ::google::protobuf::uint64 value) {
  steamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetAppFriendsList_Response.steamids)
}
void CMsgGCGetAppFriendsList_Response::add_steamids(::google::protobuf::uint64 value) {
  steamids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCGetAppFriendsList_Response.steamids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgGCGetAppFriendsList_Response::steamids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCGetAppFriendsList_Response.steamids)
  return steamids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgGCGetAppFriendsList_Response::mutable_steamids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCGetAppFriendsList_Response.steamids)
  return &steamids_;
}

// repeated fixed32 friendship_timestamps = 3;
int CMsgGCGetAppFriendsList_Response::friendship_timestamps_size() const {
  return friendship_timestamps_.size();
}
void CMsgGCGetAppFriendsList_Response::clear_friendship_timestamps() {
  friendship_timestamps_.Clear();
}
::google::protobuf::uint32 CMsgGCGetAppFriendsList_Response::friendship_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetAppFriendsList_Response.friendship_timestamps)
  return friendship_timestamps_.Get(index);
}
void CMsgGCGetAppFriendsList_Response::set_friendship_timestamps(int index, ::google::protobuf::uint32 value) {
  friendship_timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetAppFriendsList_Response.friendship_timestamps)
}
void CMsgGCGetAppFriendsList_Response::add_friendship_timestamps(::google::protobuf::uint32 value) {
  friendship_timestamps_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCGetAppFriendsList_Response.friendship_timestamps)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCGetAppFriendsList_Response::friendship_timestamps() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCGetAppFriendsList_Response.friendship_timestamps)
  return friendship_timestamps_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCGetAppFriendsList_Response::mutable_friendship_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCGetAppFriendsList_Response.friendship_timestamps)
  return &friendship_timestamps_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgMasterSetDirectory_SubGC::kDirIndexFieldNumber;
const int CMsgGCMsgMasterSetDirectory_SubGC::kNameFieldNumber;
const int CMsgGCMsgMasterSetDirectory_SubGC::kBoxFieldNumber;
const int CMsgGCMsgMasterSetDirectory_SubGC::kCommandLineFieldNumber;
const int CMsgGCMsgMasterSetDirectory_SubGC::kGcBinaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgMasterSetDirectory_SubGC::CMsgGCMsgMasterSetDirectory_SubGC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
}
CMsgGCMsgMasterSetDirectory_SubGC::CMsgGCMsgMasterSetDirectory_SubGC(const CMsgGCMsgMasterSetDirectory_SubGC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  box_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_box()) {
    box_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.box_);
  }
  command_line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_command_line()) {
    command_line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_line_);
  }
  gc_binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gc_binary()) {
    gc_binary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gc_binary_);
  }
  dir_index_ = from.dir_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
}

void CMsgGCMsgMasterSetDirectory_SubGC::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  box_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gc_binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_index_ = 0u;
}

CMsgGCMsgMasterSetDirectory_SubGC::~CMsgGCMsgMasterSetDirectory_SubGC() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  SharedDtor();
}

void CMsgGCMsgMasterSetDirectory_SubGC::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  box_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_line_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gc_binary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCMsgMasterSetDirectory_SubGC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMsgMasterSetDirectory_SubGC::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCMsgMasterSetDirectory_SubGC& CMsgGCMsgMasterSetDirectory_SubGC::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCMsgMasterSetDirectory_SubGC* CMsgGCMsgMasterSetDirectory_SubGC::New(::google::protobuf::Arena* arena) const {
  CMsgGCMsgMasterSetDirectory_SubGC* n = new CMsgGCMsgMasterSetDirectory_SubGC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCMsgMasterSetDirectory_SubGC::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_box()) {
      GOOGLE_DCHECK(!box_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*box_.UnsafeRawStringPointer())->clear();
    }
    if (has_command_line()) {
      GOOGLE_DCHECK(!command_line_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*command_line_.UnsafeRawStringPointer())->clear();
    }
    if (has_gc_binary()) {
      GOOGLE_DCHECK(!gc_binary_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gc_binary_.UnsafeRawStringPointer())->clear();
    }
  }
  dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCMsgMasterSetDirectory_SubGC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_dir_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string box = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_box()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->box().data(), this->box().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.box");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string command_line = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command_line()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command_line().data(), this->command_line().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.command_line");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gc_binary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gc_binary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gc_binary().data(), this->gc_binary().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.gc_binary");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  return false;
#undef DO_
}

void CMsgGCMsgMasterSetDirectory_SubGC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dir_index(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string box = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->box().data(), this->box().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.box");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->box(), output);
  }

  // optional string command_line = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command_line().data(), this->command_line().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.command_line");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->command_line(), output);
  }

  // optional string gc_binary = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gc_binary().data(), this->gc_binary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.gc_binary");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->gc_binary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
}

::google::protobuf::uint8* CMsgGCMsgMasterSetDirectory_SubGC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dir_index(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string box = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->box().data(), this->box().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.box");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->box(), target);
  }

  // optional string command_line = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command_line().data(), this->command_line().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.command_line");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->command_line(), target);
  }

  // optional string gc_binary = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gc_binary().data(), this->gc_binary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.gc_binary");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->gc_binary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  return target;
}

size_t CMsgGCMsgMasterSetDirectory_SubGC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string box = 3;
    if (has_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->box());
    }

    // optional string command_line = 4;
    if (has_command_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command_line());
    }

    // optional string gc_binary = 5;
    if (has_gc_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gc_binary());
    }

    // optional uint32 dir_index = 1;
    if (has_dir_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMsgMasterSetDirectory_SubGC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgMasterSetDirectory_SubGC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCMsgMasterSetDirectory_SubGC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
    MergeFrom(*source);
  }
}

void CMsgGCMsgMasterSetDirectory_SubGC::MergeFrom(const CMsgGCMsgMasterSetDirectory_SubGC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_box();
      box_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.box_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_command_line();
      command_line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_line_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_gc_binary();
      gc_binary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gc_binary_);
    }
    if (cached_has_bits & 0x00000010u) {
      dir_index_ = from.dir_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCMsgMasterSetDirectory_SubGC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgMasterSetDirectory_SubGC::CopyFrom(const CMsgGCMsgMasterSetDirectory_SubGC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetDirectory_SubGC::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetDirectory_SubGC::Swap(CMsgGCMsgMasterSetDirectory_SubGC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgMasterSetDirectory_SubGC::InternalSwap(CMsgGCMsgMasterSetDirectory_SubGC* other) {
  name_.Swap(&other->name_);
  box_.Swap(&other->box_);
  command_line_.Swap(&other->command_line_);
  gc_binary_.Swap(&other->gc_binary_);
  std::swap(dir_index_, other->dir_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCMsgMasterSetDirectory_SubGC::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCMsgMasterSetDirectory_SubGC

// optional uint32 dir_index = 1;
bool CMsgGCMsgMasterSetDirectory_SubGC::has_dir_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgGCMsgMasterSetDirectory_SubGC::set_has_dir_index() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgGCMsgMasterSetDirectory_SubGC::clear_has_dir_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgGCMsgMasterSetDirectory_SubGC::clear_dir_index() {
  dir_index_ = 0u;
  clear_has_dir_index();
}
::google::protobuf::uint32 CMsgGCMsgMasterSetDirectory_SubGC::dir_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.dir_index)
  return dir_index_;
}
void CMsgGCMsgMasterSetDirectory_SubGC::set_dir_index(::google::protobuf::uint32 value) {
  set_has_dir_index();
  dir_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.dir_index)
}

// optional string name = 2;
bool CMsgGCMsgMasterSetDirectory_SubGC::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCMsgMasterSetDirectory_SubGC::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCMsgMasterSetDirectory_SubGC::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCMsgMasterSetDirectory_SubGC::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgGCMsgMasterSetDirectory_SubGC::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.name)
  return name_.GetNoArena();
}
void CMsgGCMsgMasterSetDirectory_SubGC::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.name)
}
#if LANG_CXX11
void CMsgGCMsgMasterSetDirectory_SubGC::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.name)
}
#endif
void CMsgGCMsgMasterSetDirectory_SubGC::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.name)
}
void CMsgGCMsgMasterSetDirectory_SubGC::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.name)
}
::std::string* CMsgGCMsgMasterSetDirectory_SubGC::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCMsgMasterSetDirectory_SubGC::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCMsgMasterSetDirectory_SubGC::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.name)
}

// optional string box = 3;
bool CMsgGCMsgMasterSetDirectory_SubGC::has_box() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCMsgMasterSetDirectory_SubGC::set_has_box() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCMsgMasterSetDirectory_SubGC::clear_has_box() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCMsgMasterSetDirectory_SubGC::clear_box() {
  box_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_box();
}
const ::std::string& CMsgGCMsgMasterSetDirectory_SubGC::box() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.box)
  return box_.GetNoArena();
}
void CMsgGCMsgMasterSetDirectory_SubGC::set_box(const ::std::string& value) {
  set_has_box();
  box_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.box)
}
#if LANG_CXX11
void CMsgGCMsgMasterSetDirectory_SubGC::set_box(::std::string&& value) {
  set_has_box();
  box_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.box)
}
#endif
void CMsgGCMsgMasterSetDirectory_SubGC::set_box(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_box();
  box_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.box)
}
void CMsgGCMsgMasterSetDirectory_SubGC::set_box(const char* value, size_t size) {
  set_has_box();
  box_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.box)
}
::std::string* CMsgGCMsgMasterSetDirectory_SubGC::mutable_box() {
  set_has_box();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.box)
  return box_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCMsgMasterSetDirectory_SubGC::release_box() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.box)
  clear_has_box();
  return box_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCMsgMasterSetDirectory_SubGC::set_allocated_box(::std::string* box) {
  if (box != NULL) {
    set_has_box();
  } else {
    clear_has_box();
  }
  box_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), box);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.box)
}

// optional string command_line = 4;
bool CMsgGCMsgMasterSetDirectory_SubGC::has_command_line() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCMsgMasterSetDirectory_SubGC::set_has_command_line() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCMsgMasterSetDirectory_SubGC::clear_has_command_line() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCMsgMasterSetDirectory_SubGC::clear_command_line() {
  command_line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command_line();
}
const ::std::string& CMsgGCMsgMasterSetDirectory_SubGC::command_line() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.command_line)
  return command_line_.GetNoArena();
}
void CMsgGCMsgMasterSetDirectory_SubGC::set_command_line(const ::std::string& value) {
  set_has_command_line();
  command_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.command_line)
}
#if LANG_CXX11
void CMsgGCMsgMasterSetDirectory_SubGC::set_command_line(::std::string&& value) {
  set_has_command_line();
  command_line_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.command_line)
}
#endif
void CMsgGCMsgMasterSetDirectory_SubGC::set_command_line(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_command_line();
  command_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.command_line)
}
void CMsgGCMsgMasterSetDirectory_SubGC::set_command_line(const char* value, size_t size) {
  set_has_command_line();
  command_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.command_line)
}
::std::string* CMsgGCMsgMasterSetDirectory_SubGC::mutable_command_line() {
  set_has_command_line();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.command_line)
  return command_line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCMsgMasterSetDirectory_SubGC::release_command_line() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.command_line)
  clear_has_command_line();
  return command_line_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCMsgMasterSetDirectory_SubGC::set_allocated_command_line(::std::string* command_line) {
  if (command_line != NULL) {
    set_has_command_line();
  } else {
    clear_has_command_line();
  }
  command_line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command_line);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.command_line)
}

// optional string gc_binary = 5;
bool CMsgGCMsgMasterSetDirectory_SubGC::has_gc_binary() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGCMsgMasterSetDirectory_SubGC::set_has_gc_binary() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGCMsgMasterSetDirectory_SubGC::clear_has_gc_binary() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGCMsgMasterSetDirectory_SubGC::clear_gc_binary() {
  gc_binary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gc_binary();
}
const ::std::string& CMsgGCMsgMasterSetDirectory_SubGC::gc_binary() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.gc_binary)
  return gc_binary_.GetNoArena();
}
void CMsgGCMsgMasterSetDirectory_SubGC::set_gc_binary(const ::std::string& value) {
  set_has_gc_binary();
  gc_binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.gc_binary)
}
#if LANG_CXX11
void CMsgGCMsgMasterSetDirectory_SubGC::set_gc_binary(::std::string&& value) {
  set_has_gc_binary();
  gc_binary_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.gc_binary)
}
#endif
void CMsgGCMsgMasterSetDirectory_SubGC::set_gc_binary(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gc_binary();
  gc_binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.gc_binary)
}
void CMsgGCMsgMasterSetDirectory_SubGC::set_gc_binary(const char* value, size_t size) {
  set_has_gc_binary();
  gc_binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.gc_binary)
}
::std::string* CMsgGCMsgMasterSetDirectory_SubGC::mutable_gc_binary() {
  set_has_gc_binary();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.gc_binary)
  return gc_binary_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCMsgMasterSetDirectory_SubGC::release_gc_binary() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.gc_binary)
  clear_has_gc_binary();
  return gc_binary_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCMsgMasterSetDirectory_SubGC::set_allocated_gc_binary(::std::string* gc_binary) {
  if (gc_binary != NULL) {
    set_has_gc_binary();
  } else {
    clear_has_gc_binary();
  }
  gc_binary_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gc_binary);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCMsgMasterSetDirectory.SubGC.gc_binary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgMasterSetDirectory::kMasterDirIndexFieldNumber;
const int CMsgGCMsgMasterSetDirectory::kDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgMasterSetDirectory::CMsgGCMsgMasterSetDirectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgMasterSetDirectory)
}
CMsgGCMsgMasterSetDirectory::CMsgGCMsgMasterSetDirectory(const CMsgGCMsgMasterSetDirectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dir_(from.dir_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  master_dir_index_ = from.master_dir_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgMasterSetDirectory)
}

void CMsgGCMsgMasterSetDirectory::SharedCtor() {
  _cached_size_ = 0;
  master_dir_index_ = 0u;
}

CMsgGCMsgMasterSetDirectory::~CMsgGCMsgMasterSetDirectory() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgMasterSetDirectory)
  SharedDtor();
}

void CMsgGCMsgMasterSetDirectory::SharedDtor() {
}

void CMsgGCMsgMasterSetDirectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMsgMasterSetDirectory::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCMsgMasterSetDirectory& CMsgGCMsgMasterSetDirectory::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCMsgMasterSetDirectory* CMsgGCMsgMasterSetDirectory::New(::google::protobuf::Arena* arena) const {
  CMsgGCMsgMasterSetDirectory* n = new CMsgGCMsgMasterSetDirectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCMsgMasterSetDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgMasterSetDirectory)
  dir_.Clear();
  master_dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCMsgMasterSetDirectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgMasterSetDirectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 master_dir_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_master_dir_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &master_dir_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgMasterSetDirectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgMasterSetDirectory)
  return false;
#undef DO_
}

void CMsgGCMsgMasterSetDirectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgMasterSetDirectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 master_dir_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->master_dir_index(), output);
  }

  // repeated .proto.dota.CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
  for (unsigned int i = 0, n = this->dir_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dir(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgMasterSetDirectory)
}

::google::protobuf::uint8* CMsgGCMsgMasterSetDirectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgMasterSetDirectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 master_dir_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->master_dir_index(), target);
  }

  // repeated .proto.dota.CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
  for (unsigned int i = 0, n = this->dir_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->dir(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgMasterSetDirectory)
  return target;
}

size_t CMsgGCMsgMasterSetDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgMasterSetDirectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
  {
    unsigned int count = this->dir_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir(i));
    }
  }

  // optional uint32 master_dir_index = 1;
  if (has_master_dir_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->master_dir_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMsgMasterSetDirectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgMasterSetDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgMasterSetDirectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCMsgMasterSetDirectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgMasterSetDirectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgMasterSetDirectory)
    MergeFrom(*source);
  }
}

void CMsgGCMsgMasterSetDirectory::MergeFrom(const CMsgGCMsgMasterSetDirectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgMasterSetDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dir_.MergeFrom(from.dir_);
  if (from.has_master_dir_index()) {
    set_master_dir_index(from.master_dir_index());
  }
}

void CMsgGCMsgMasterSetDirectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgMasterSetDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgMasterSetDirectory::CopyFrom(const CMsgGCMsgMasterSetDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgMasterSetDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetDirectory::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetDirectory::Swap(CMsgGCMsgMasterSetDirectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgMasterSetDirectory::InternalSwap(CMsgGCMsgMasterSetDirectory* other) {
  dir_.InternalSwap(&other->dir_);
  std::swap(master_dir_index_, other->master_dir_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCMsgMasterSetDirectory::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCMsgMasterSetDirectory

// optional uint32 master_dir_index = 1;
bool CMsgGCMsgMasterSetDirectory::has_master_dir_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCMsgMasterSetDirectory::set_has_master_dir_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCMsgMasterSetDirectory::clear_has_master_dir_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCMsgMasterSetDirectory::clear_master_dir_index() {
  master_dir_index_ = 0u;
  clear_has_master_dir_index();
}
::google::protobuf::uint32 CMsgGCMsgMasterSetDirectory::master_dir_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgMasterSetDirectory.master_dir_index)
  return master_dir_index_;
}
void CMsgGCMsgMasterSetDirectory::set_master_dir_index(::google::protobuf::uint32 value) {
  set_has_master_dir_index();
  master_dir_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMsgMasterSetDirectory.master_dir_index)
}

// repeated .proto.dota.CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
int CMsgGCMsgMasterSetDirectory::dir_size() const {
  return dir_.size();
}
void CMsgGCMsgMasterSetDirectory::clear_dir() {
  dir_.Clear();
}
const ::proto::dota::CMsgGCMsgMasterSetDirectory_SubGC& CMsgGCMsgMasterSetDirectory::dir(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgMasterSetDirectory.dir)
  return dir_.Get(index);
}
::proto::dota::CMsgGCMsgMasterSetDirectory_SubGC* CMsgGCMsgMasterSetDirectory::mutable_dir(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCMsgMasterSetDirectory.dir)
  return dir_.Mutable(index);
}
::proto::dota::CMsgGCMsgMasterSetDirectory_SubGC* CMsgGCMsgMasterSetDirectory::add_dir() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCMsgMasterSetDirectory.dir)
  return dir_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCMsgMasterSetDirectory_SubGC >*
CMsgGCMsgMasterSetDirectory::mutable_dir() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCMsgMasterSetDirectory.dir)
  return &dir_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCMsgMasterSetDirectory_SubGC >&
CMsgGCMsgMasterSetDirectory::dir() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCMsgMasterSetDirectory.dir)
  return dir_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgMasterSetDirectory_Response::kEresultFieldNumber;
const int CMsgGCMsgMasterSetDirectory_Response::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgMasterSetDirectory_Response::CMsgGCMsgMasterSetDirectory_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
}
CMsgGCMsgMasterSetDirectory_Response::CMsgGCMsgMasterSetDirectory_Response(const CMsgGCMsgMasterSetDirectory_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
}

void CMsgGCMsgMasterSetDirectory_Response::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eresult_ = 2;
}

CMsgGCMsgMasterSetDirectory_Response::~CMsgGCMsgMasterSetDirectory_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  SharedDtor();
}

void CMsgGCMsgMasterSetDirectory_Response::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCMsgMasterSetDirectory_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMsgMasterSetDirectory_Response::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCMsgMasterSetDirectory_Response& CMsgGCMsgMasterSetDirectory_Response::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCMsgMasterSetDirectory_Response* CMsgGCMsgMasterSetDirectory_Response::New(::google::protobuf::Arena* arena) const {
  CMsgGCMsgMasterSetDirectory_Response* n = new CMsgGCMsgMasterSetDirectory_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCMsgMasterSetDirectory_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_message()) {
      GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*message_.UnsafeRawStringPointer())->clear();
    }
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCMsgMasterSetDirectory_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCMsgMasterSetDirectory_Response.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  return false;
#undef DO_
}

void CMsgGCMsgMasterSetDirectory_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory_Response.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
}

::google::protobuf::uint8* CMsgGCMsgMasterSetDirectory_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetDirectory_Response.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  return target;
}

size_t CMsgGCMsgMasterSetDirectory_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMsgMasterSetDirectory_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgMasterSetDirectory_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCMsgMasterSetDirectory_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
    MergeFrom(*source);
  }
}

void CMsgGCMsgMasterSetDirectory_Response::MergeFrom(const CMsgGCMsgMasterSetDirectory_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCMsgMasterSetDirectory_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgMasterSetDirectory_Response::CopyFrom(const CMsgGCMsgMasterSetDirectory_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgMasterSetDirectory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetDirectory_Response::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetDirectory_Response::Swap(CMsgGCMsgMasterSetDirectory_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgMasterSetDirectory_Response::InternalSwap(CMsgGCMsgMasterSetDirectory_Response* other) {
  message_.Swap(&other->message_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCMsgMasterSetDirectory_Response::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCMsgMasterSetDirectory_Response

// optional int32 eresult = 1 [default = 2];
bool CMsgGCMsgMasterSetDirectory_Response::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCMsgMasterSetDirectory_Response::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCMsgMasterSetDirectory_Response::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCMsgMasterSetDirectory_Response::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgGCMsgMasterSetDirectory_Response::eresult() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgMasterSetDirectory_Response.eresult)
  return eresult_;
}
void CMsgGCMsgMasterSetDirectory_Response::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMsgMasterSetDirectory_Response.eresult)
}

// optional string message = 2;
bool CMsgGCMsgMasterSetDirectory_Response::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCMsgMasterSetDirectory_Response::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCMsgMasterSetDirectory_Response::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCMsgMasterSetDirectory_Response::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CMsgGCMsgMasterSetDirectory_Response::message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgMasterSetDirectory_Response.message)
  return message_.GetNoArena();
}
void CMsgGCMsgMasterSetDirectory_Response::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMsgMasterSetDirectory_Response.message)
}
#if LANG_CXX11
void CMsgGCMsgMasterSetDirectory_Response::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCMsgMasterSetDirectory_Response.message)
}
#endif
void CMsgGCMsgMasterSetDirectory_Response::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCMsgMasterSetDirectory_Response.message)
}
void CMsgGCMsgMasterSetDirectory_Response::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCMsgMasterSetDirectory_Response.message)
}
::std::string* CMsgGCMsgMasterSetDirectory_Response::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCMsgMasterSetDirectory_Response.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCMsgMasterSetDirectory_Response::release_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCMsgMasterSetDirectory_Response.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCMsgMasterSetDirectory_Response::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCMsgMasterSetDirectory_Response.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgWebAPIJobRequestForwardResponse::kDirIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgWebAPIJobRequestForwardResponse::CMsgGCMsgWebAPIJobRequestForwardResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
}
CMsgGCMsgWebAPIJobRequestForwardResponse::CMsgGCMsgWebAPIJobRequestForwardResponse(const CMsgGCMsgWebAPIJobRequestForwardResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dir_index_ = from.dir_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::SharedCtor() {
  _cached_size_ = 0;
  dir_index_ = 0u;
}

CMsgGCMsgWebAPIJobRequestForwardResponse::~CMsgGCMsgWebAPIJobRequestForwardResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  SharedDtor();
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::SharedDtor() {
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMsgWebAPIJobRequestForwardResponse::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCMsgWebAPIJobRequestForwardResponse& CMsgGCMsgWebAPIJobRequestForwardResponse::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCMsgWebAPIJobRequestForwardResponse* CMsgGCMsgWebAPIJobRequestForwardResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCMsgWebAPIJobRequestForwardResponse* n = new CMsgGCMsgWebAPIJobRequestForwardResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCMsgWebAPIJobRequestForwardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dir_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_dir_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  return false;
#undef DO_
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dir_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
}

::google::protobuf::uint8* CMsgGCMsgWebAPIJobRequestForwardResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dir_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  return target;
}

size_t CMsgGCMsgWebAPIJobRequestForwardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 dir_index = 1;
  if (has_dir_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dir_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgWebAPIJobRequestForwardResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCMsgWebAPIJobRequestForwardResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
    MergeFrom(*source);
  }
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::MergeFrom(const CMsgGCMsgWebAPIJobRequestForwardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dir_index()) {
    set_dir_index(from.dir_index());
  }
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::CopyFrom(const CMsgGCMsgWebAPIJobRequestForwardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgWebAPIJobRequestForwardResponse::IsInitialized() const {
  return true;
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::Swap(CMsgGCMsgWebAPIJobRequestForwardResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgWebAPIJobRequestForwardResponse::InternalSwap(CMsgGCMsgWebAPIJobRequestForwardResponse* other) {
  std::swap(dir_index_, other->dir_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCMsgWebAPIJobRequestForwardResponse::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCMsgWebAPIJobRequestForwardResponse

// optional uint32 dir_index = 1;
bool CMsgGCMsgWebAPIJobRequestForwardResponse::has_dir_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCMsgWebAPIJobRequestForwardResponse::set_has_dir_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCMsgWebAPIJobRequestForwardResponse::clear_has_dir_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCMsgWebAPIJobRequestForwardResponse::clear_dir_index() {
  dir_index_ = 0u;
  clear_has_dir_index();
}
::google::protobuf::uint32 CMsgGCMsgWebAPIJobRequestForwardResponse::dir_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse.dir_index)
  return dir_index_;
}
void CMsgGCMsgWebAPIJobRequestForwardResponse::set_dir_index(::google::protobuf::uint32 value) {
  set_has_dir_index();
  dir_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMsgWebAPIJobRequestForwardResponse.dir_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCSystemMsg_GetPurchaseTrust_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCSystemMsg_GetPurchaseTrust_Request::CGCSystemMsg_GetPurchaseTrust_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
}
CGCSystemMsg_GetPurchaseTrust_Request::CGCSystemMsg_GetPurchaseTrust_Request(const CGCSystemMsg_GetPurchaseTrust_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
}

void CGCSystemMsg_GetPurchaseTrust_Request::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
}

CGCSystemMsg_GetPurchaseTrust_Request::~CGCSystemMsg_GetPurchaseTrust_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  SharedDtor();
}

void CGCSystemMsg_GetPurchaseTrust_Request::SharedDtor() {
}

void CGCSystemMsg_GetPurchaseTrust_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCSystemMsg_GetPurchaseTrust_Request::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCSystemMsg_GetPurchaseTrust_Request& CGCSystemMsg_GetPurchaseTrust_Request::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCSystemMsg_GetPurchaseTrust_Request* CGCSystemMsg_GetPurchaseTrust_Request::New(::google::protobuf::Arena* arena) const {
  CGCSystemMsg_GetPurchaseTrust_Request* n = new CGCSystemMsg_GetPurchaseTrust_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCSystemMsg_GetPurchaseTrust_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCSystemMsg_GetPurchaseTrust_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  return false;
#undef DO_
}

void CGCSystemMsg_GetPurchaseTrust_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
}

::google::protobuf::uint8* CGCSystemMsg_GetPurchaseTrust_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  return target;
}

size_t CGCSystemMsg_GetPurchaseTrust_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCSystemMsg_GetPurchaseTrust_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCSystemMsg_GetPurchaseTrust_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCSystemMsg_GetPurchaseTrust_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
    MergeFrom(*source);
  }
}

void CGCSystemMsg_GetPurchaseTrust_Request::MergeFrom(const CGCSystemMsg_GetPurchaseTrust_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CGCSystemMsg_GetPurchaseTrust_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCSystemMsg_GetPurchaseTrust_Request::CopyFrom(const CGCSystemMsg_GetPurchaseTrust_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetPurchaseTrust_Request::IsInitialized() const {
  return true;
}

void CGCSystemMsg_GetPurchaseTrust_Request::Swap(CGCSystemMsg_GetPurchaseTrust_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCSystemMsg_GetPurchaseTrust_Request::InternalSwap(CGCSystemMsg_GetPurchaseTrust_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCSystemMsg_GetPurchaseTrust_Request::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCSystemMsg_GetPurchaseTrust_Request

// optional fixed64 steamid = 1;
bool CGCSystemMsg_GetPurchaseTrust_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCSystemMsg_GetPurchaseTrust_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCSystemMsg_GetPurchaseTrust_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCSystemMsg_GetPurchaseTrust_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CGCSystemMsg_GetPurchaseTrust_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request.steamid)
  return steamid_;
}
void CGCSystemMsg_GetPurchaseTrust_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetPurchaseTrust_Request.steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCSystemMsg_GetPurchaseTrust_Response::kHasPriorPurchaseHistoryFieldNumber;
const int CGCSystemMsg_GetPurchaseTrust_Response::kHasNoRecentPasswordResetsFieldNumber;
const int CGCSystemMsg_GetPurchaseTrust_Response::kIsWalletCashTrustedFieldNumber;
const int CGCSystemMsg_GetPurchaseTrust_Response::kTimeAllTrustedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCSystemMsg_GetPurchaseTrust_Response::CGCSystemMsg_GetPurchaseTrust_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
}
CGCSystemMsg_GetPurchaseTrust_Response::CGCSystemMsg_GetPurchaseTrust_Response(const CGCSystemMsg_GetPurchaseTrust_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&has_prior_purchase_history_, &from.has_prior_purchase_history_,
    reinterpret_cast<char*>(&time_all_trusted_) -
    reinterpret_cast<char*>(&has_prior_purchase_history_) + sizeof(time_all_trusted_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
}

void CGCSystemMsg_GetPurchaseTrust_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&has_prior_purchase_history_, 0, reinterpret_cast<char*>(&time_all_trusted_) -
    reinterpret_cast<char*>(&has_prior_purchase_history_) + sizeof(time_all_trusted_));
}

CGCSystemMsg_GetPurchaseTrust_Response::~CGCSystemMsg_GetPurchaseTrust_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  SharedDtor();
}

void CGCSystemMsg_GetPurchaseTrust_Response::SharedDtor() {
}

void CGCSystemMsg_GetPurchaseTrust_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCSystemMsg_GetPurchaseTrust_Response::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGCSystemMsg_GetPurchaseTrust_Response& CGCSystemMsg_GetPurchaseTrust_Response::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGCSystemMsg_GetPurchaseTrust_Response* CGCSystemMsg_GetPurchaseTrust_Response::New(::google::protobuf::Arena* arena) const {
  CGCSystemMsg_GetPurchaseTrust_Response* n = new CGCSystemMsg_GetPurchaseTrust_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGCSystemMsg_GetPurchaseTrust_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&has_prior_purchase_history_, 0, reinterpret_cast<char*>(&time_all_trusted_) -
      reinterpret_cast<char*>(&has_prior_purchase_history_) + sizeof(time_all_trusted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGCSystemMsg_GetPurchaseTrust_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_prior_purchase_history = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_has_prior_purchase_history();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_prior_purchase_history_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_no_recent_password_resets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_has_no_recent_password_resets();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_no_recent_password_resets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wallet_cash_trusted = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_wallet_cash_trusted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wallet_cash_trusted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_all_trusted = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_time_all_trusted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_all_trusted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  return false;
#undef DO_
}

void CGCSystemMsg_GetPurchaseTrust_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_prior_purchase_history = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_prior_purchase_history(), output);
  }

  // optional bool has_no_recent_password_resets = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_no_recent_password_resets(), output);
  }

  // optional bool is_wallet_cash_trusted = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_wallet_cash_trusted(), output);
  }

  // optional uint32 time_all_trusted = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_all_trusted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
}

::google::protobuf::uint8* CGCSystemMsg_GetPurchaseTrust_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_prior_purchase_history = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_prior_purchase_history(), target);
  }

  // optional bool has_no_recent_password_resets = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->has_no_recent_password_resets(), target);
  }

  // optional bool is_wallet_cash_trusted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_wallet_cash_trusted(), target);
  }

  // optional uint32 time_all_trusted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_all_trusted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  return target;
}

size_t CGCSystemMsg_GetPurchaseTrust_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool has_prior_purchase_history = 1;
    if (has_has_prior_purchase_history()) {
      total_size += 1 + 1;
    }

    // optional bool has_no_recent_password_resets = 2;
    if (has_has_no_recent_password_resets()) {
      total_size += 1 + 1;
    }

    // optional bool is_wallet_cash_trusted = 3;
    if (has_is_wallet_cash_trusted()) {
      total_size += 1 + 1;
    }

    // optional uint32 time_all_trusted = 4;
    if (has_time_all_trusted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_all_trusted());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCSystemMsg_GetPurchaseTrust_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCSystemMsg_GetPurchaseTrust_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGCSystemMsg_GetPurchaseTrust_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
    MergeFrom(*source);
  }
}

void CGCSystemMsg_GetPurchaseTrust_Response::MergeFrom(const CGCSystemMsg_GetPurchaseTrust_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      has_prior_purchase_history_ = from.has_prior_purchase_history_;
    }
    if (cached_has_bits & 0x00000002u) {
      has_no_recent_password_resets_ = from.has_no_recent_password_resets_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_wallet_cash_trusted_ = from.is_wallet_cash_trusted_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_all_trusted_ = from.time_all_trusted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCSystemMsg_GetPurchaseTrust_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCSystemMsg_GetPurchaseTrust_Response::CopyFrom(const CGCSystemMsg_GetPurchaseTrust_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetPurchaseTrust_Response::IsInitialized() const {
  return true;
}

void CGCSystemMsg_GetPurchaseTrust_Response::Swap(CGCSystemMsg_GetPurchaseTrust_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCSystemMsg_GetPurchaseTrust_Response::InternalSwap(CGCSystemMsg_GetPurchaseTrust_Response* other) {
  std::swap(has_prior_purchase_history_, other->has_prior_purchase_history_);
  std::swap(has_no_recent_password_resets_, other->has_no_recent_password_resets_);
  std::swap(is_wallet_cash_trusted_, other->is_wallet_cash_trusted_);
  std::swap(time_all_trusted_, other->time_all_trusted_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGCSystemMsg_GetPurchaseTrust_Response::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGCSystemMsg_GetPurchaseTrust_Response

// optional bool has_prior_purchase_history = 1;
bool CGCSystemMsg_GetPurchaseTrust_Response::has_has_prior_purchase_history() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGCSystemMsg_GetPurchaseTrust_Response::set_has_has_prior_purchase_history() {
  _has_bits_[0] |= 0x00000001u;
}
void CGCSystemMsg_GetPurchaseTrust_Response::clear_has_has_prior_purchase_history() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGCSystemMsg_GetPurchaseTrust_Response::clear_has_prior_purchase_history() {
  has_prior_purchase_history_ = false;
  clear_has_has_prior_purchase_history();
}
bool CGCSystemMsg_GetPurchaseTrust_Response::has_prior_purchase_history() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response.has_prior_purchase_history)
  return has_prior_purchase_history_;
}
void CGCSystemMsg_GetPurchaseTrust_Response::set_has_prior_purchase_history(bool value) {
  set_has_has_prior_purchase_history();
  has_prior_purchase_history_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response.has_prior_purchase_history)
}

// optional bool has_no_recent_password_resets = 2;
bool CGCSystemMsg_GetPurchaseTrust_Response::has_has_no_recent_password_resets() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGCSystemMsg_GetPurchaseTrust_Response::set_has_has_no_recent_password_resets() {
  _has_bits_[0] |= 0x00000002u;
}
void CGCSystemMsg_GetPurchaseTrust_Response::clear_has_has_no_recent_password_resets() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGCSystemMsg_GetPurchaseTrust_Response::clear_has_no_recent_password_resets() {
  has_no_recent_password_resets_ = false;
  clear_has_has_no_recent_password_resets();
}
bool CGCSystemMsg_GetPurchaseTrust_Response::has_no_recent_password_resets() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response.has_no_recent_password_resets)
  return has_no_recent_password_resets_;
}
void CGCSystemMsg_GetPurchaseTrust_Response::set_has_no_recent_password_resets(bool value) {
  set_has_has_no_recent_password_resets();
  has_no_recent_password_resets_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response.has_no_recent_password_resets)
}

// optional bool is_wallet_cash_trusted = 3;
bool CGCSystemMsg_GetPurchaseTrust_Response::has_is_wallet_cash_trusted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGCSystemMsg_GetPurchaseTrust_Response::set_has_is_wallet_cash_trusted() {
  _has_bits_[0] |= 0x00000004u;
}
void CGCSystemMsg_GetPurchaseTrust_Response::clear_has_is_wallet_cash_trusted() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGCSystemMsg_GetPurchaseTrust_Response::clear_is_wallet_cash_trusted() {
  is_wallet_cash_trusted_ = false;
  clear_has_is_wallet_cash_trusted();
}
bool CGCSystemMsg_GetPurchaseTrust_Response::is_wallet_cash_trusted() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response.is_wallet_cash_trusted)
  return is_wallet_cash_trusted_;
}
void CGCSystemMsg_GetPurchaseTrust_Response::set_is_wallet_cash_trusted(bool value) {
  set_has_is_wallet_cash_trusted();
  is_wallet_cash_trusted_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response.is_wallet_cash_trusted)
}

// optional uint32 time_all_trusted = 4;
bool CGCSystemMsg_GetPurchaseTrust_Response::has_time_all_trusted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CGCSystemMsg_GetPurchaseTrust_Response::set_has_time_all_trusted() {
  _has_bits_[0] |= 0x00000008u;
}
void CGCSystemMsg_GetPurchaseTrust_Response::clear_has_time_all_trusted() {
  _has_bits_[0] &= ~0x00000008u;
}
void CGCSystemMsg_GetPurchaseTrust_Response::clear_time_all_trusted() {
  time_all_trusted_ = 0u;
  clear_has_time_all_trusted();
}
::google::protobuf::uint32 CGCSystemMsg_GetPurchaseTrust_Response::time_all_trusted() const {
  // @@protoc_insertion_point(field_get:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response.time_all_trusted)
  return time_all_trusted_;
}
void CGCSystemMsg_GetPurchaseTrust_Response::set_time_all_trusted(::google::protobuf::uint32 value) {
  set_has_time_all_trusted();
  time_all_trusted_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CGCSystemMsg_GetPurchaseTrust_Response.time_all_trusted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCHAccountVacStatusChange::kSteamIdFieldNumber;
const int CMsgGCHAccountVacStatusChange::kAppIdFieldNumber;
const int CMsgGCHAccountVacStatusChange::kRtimeVacbanStartsFieldNumber;
const int CMsgGCHAccountVacStatusChange::kIsBannedNowFieldNumber;
const int CMsgGCHAccountVacStatusChange::kIsBannedFutureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCHAccountVacStatusChange::CMsgGCHAccountVacStatusChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCHAccountVacStatusChange)
}
CMsgGCHAccountVacStatusChange::CMsgGCHAccountVacStatusChange(const CMsgGCHAccountVacStatusChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&is_banned_future_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(is_banned_future_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCHAccountVacStatusChange)
}

void CMsgGCHAccountVacStatusChange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&is_banned_future_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(is_banned_future_));
}

CMsgGCHAccountVacStatusChange::~CMsgGCHAccountVacStatusChange() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCHAccountVacStatusChange)
  SharedDtor();
}

void CMsgGCHAccountVacStatusChange::SharedDtor() {
}

void CMsgGCHAccountVacStatusChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCHAccountVacStatusChange::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCHAccountVacStatusChange& CMsgGCHAccountVacStatusChange::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCHAccountVacStatusChange* CMsgGCHAccountVacStatusChange::New(::google::protobuf::Arena* arena) const {
  CMsgGCHAccountVacStatusChange* n = new CMsgGCHAccountVacStatusChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCHAccountVacStatusChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCHAccountVacStatusChange)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&is_banned_future_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(is_banned_future_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCHAccountVacStatusChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCHAccountVacStatusChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rtime_vacban_starts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_rtime_vacban_starts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtime_vacban_starts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_banned_now = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_banned_now();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_banned_now_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_banned_future = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_banned_future();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_banned_future_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCHAccountVacStatusChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCHAccountVacStatusChange)
  return false;
#undef DO_
}

void CMsgGCHAccountVacStatusChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCHAccountVacStatusChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional uint32 rtime_vacban_starts = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rtime_vacban_starts(), output);
  }

  // optional bool is_banned_now = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_banned_now(), output);
  }

  // optional bool is_banned_future = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_banned_future(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCHAccountVacStatusChange)
}

::google::protobuf::uint8* CMsgGCHAccountVacStatusChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCHAccountVacStatusChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  // optional uint32 rtime_vacban_starts = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rtime_vacban_starts(), target);
  }

  // optional bool is_banned_now = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_banned_now(), target);
  }

  // optional bool is_banned_future = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_banned_future(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCHAccountVacStatusChange)
  return target;
}

size_t CMsgGCHAccountVacStatusChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCHAccountVacStatusChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 rtime_vacban_starts = 3;
    if (has_rtime_vacban_starts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtime_vacban_starts());
    }

    // optional bool is_banned_now = 4;
    if (has_is_banned_now()) {
      total_size += 1 + 1;
    }

    // optional bool is_banned_future = 5;
    if (has_is_banned_future()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCHAccountVacStatusChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCHAccountVacStatusChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCHAccountVacStatusChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCHAccountVacStatusChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCHAccountVacStatusChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCHAccountVacStatusChange)
    MergeFrom(*source);
  }
}

void CMsgGCHAccountVacStatusChange::MergeFrom(const CMsgGCHAccountVacStatusChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCHAccountVacStatusChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      rtime_vacban_starts_ = from.rtime_vacban_starts_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_banned_now_ = from.is_banned_now_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_banned_future_ = from.is_banned_future_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCHAccountVacStatusChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCHAccountVacStatusChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCHAccountVacStatusChange::CopyFrom(const CMsgGCHAccountVacStatusChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCHAccountVacStatusChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHAccountVacStatusChange::IsInitialized() const {
  return true;
}

void CMsgGCHAccountVacStatusChange::Swap(CMsgGCHAccountVacStatusChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCHAccountVacStatusChange::InternalSwap(CMsgGCHAccountVacStatusChange* other) {
  std::swap(steam_id_, other->steam_id_);
  std::swap(app_id_, other->app_id_);
  std::swap(rtime_vacban_starts_, other->rtime_vacban_starts_);
  std::swap(is_banned_now_, other->is_banned_now_);
  std::swap(is_banned_future_, other->is_banned_future_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCHAccountVacStatusChange::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCHAccountVacStatusChange

// optional fixed64 steam_id = 1;
bool CMsgGCHAccountVacStatusChange::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCHAccountVacStatusChange::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCHAccountVacStatusChange::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCHAccountVacStatusChange::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgGCHAccountVacStatusChange::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCHAccountVacStatusChange.steam_id)
  return steam_id_;
}
void CMsgGCHAccountVacStatusChange::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCHAccountVacStatusChange.steam_id)
}

// optional uint32 app_id = 2;
bool CMsgGCHAccountVacStatusChange::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCHAccountVacStatusChange::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCHAccountVacStatusChange::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCHAccountVacStatusChange::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgGCHAccountVacStatusChange::app_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCHAccountVacStatusChange.app_id)
  return app_id_;
}
void CMsgGCHAccountVacStatusChange::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCHAccountVacStatusChange.app_id)
}

// optional uint32 rtime_vacban_starts = 3;
bool CMsgGCHAccountVacStatusChange::has_rtime_vacban_starts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCHAccountVacStatusChange::set_has_rtime_vacban_starts() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCHAccountVacStatusChange::clear_has_rtime_vacban_starts() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCHAccountVacStatusChange::clear_rtime_vacban_starts() {
  rtime_vacban_starts_ = 0u;
  clear_has_rtime_vacban_starts();
}
::google::protobuf::uint32 CMsgGCHAccountVacStatusChange::rtime_vacban_starts() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCHAccountVacStatusChange.rtime_vacban_starts)
  return rtime_vacban_starts_;
}
void CMsgGCHAccountVacStatusChange::set_rtime_vacban_starts(::google::protobuf::uint32 value) {
  set_has_rtime_vacban_starts();
  rtime_vacban_starts_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCHAccountVacStatusChange.rtime_vacban_starts)
}

// optional bool is_banned_now = 4;
bool CMsgGCHAccountVacStatusChange::has_is_banned_now() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGCHAccountVacStatusChange::set_has_is_banned_now() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGCHAccountVacStatusChange::clear_has_is_banned_now() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGCHAccountVacStatusChange::clear_is_banned_now() {
  is_banned_now_ = false;
  clear_has_is_banned_now();
}
bool CMsgGCHAccountVacStatusChange::is_banned_now() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCHAccountVacStatusChange.is_banned_now)
  return is_banned_now_;
}
void CMsgGCHAccountVacStatusChange::set_is_banned_now(bool value) {
  set_has_is_banned_now();
  is_banned_now_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCHAccountVacStatusChange.is_banned_now)
}

// optional bool is_banned_future = 5;
bool CMsgGCHAccountVacStatusChange::has_is_banned_future() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgGCHAccountVacStatusChange::set_has_is_banned_future() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgGCHAccountVacStatusChange::clear_has_is_banned_future() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgGCHAccountVacStatusChange::clear_is_banned_future() {
  is_banned_future_ = false;
  clear_has_is_banned_future();
}
bool CMsgGCHAccountVacStatusChange::is_banned_future() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCHAccountVacStatusChange.is_banned_future)
  return is_banned_future_;
}
void CMsgGCHAccountVacStatusChange::set_is_banned_future(bool value) {
  set_has_is_banned_future();
  is_banned_future_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCHAccountVacStatusChange.is_banned_future)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetPartnerAccountLink::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetPartnerAccountLink::CMsgGCGetPartnerAccountLink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetPartnerAccountLink)
}
CMsgGCGetPartnerAccountLink::CMsgGCGetPartnerAccountLink(const CMsgGCGetPartnerAccountLink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetPartnerAccountLink)
}

void CMsgGCGetPartnerAccountLink::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
}

CMsgGCGetPartnerAccountLink::~CMsgGCGetPartnerAccountLink() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetPartnerAccountLink)
  SharedDtor();
}

void CMsgGCGetPartnerAccountLink::SharedDtor() {
}

void CMsgGCGetPartnerAccountLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetPartnerAccountLink::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCGetPartnerAccountLink& CMsgGCGetPartnerAccountLink::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCGetPartnerAccountLink* CMsgGCGetPartnerAccountLink::New(::google::protobuf::Arena* arena) const {
  CMsgGCGetPartnerAccountLink* n = new CMsgGCGetPartnerAccountLink;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCGetPartnerAccountLink::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetPartnerAccountLink)
  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCGetPartnerAccountLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetPartnerAccountLink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetPartnerAccountLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetPartnerAccountLink)
  return false;
#undef DO_
}

void CMsgGCGetPartnerAccountLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetPartnerAccountLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetPartnerAccountLink)
}

::google::protobuf::uint8* CMsgGCGetPartnerAccountLink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetPartnerAccountLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetPartnerAccountLink)
  return target;
}

size_t CMsgGCGetPartnerAccountLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetPartnerAccountLink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetPartnerAccountLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetPartnerAccountLink)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetPartnerAccountLink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCGetPartnerAccountLink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetPartnerAccountLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetPartnerAccountLink)
    MergeFrom(*source);
  }
}

void CMsgGCGetPartnerAccountLink::MergeFrom(const CMsgGCGetPartnerAccountLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetPartnerAccountLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CMsgGCGetPartnerAccountLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetPartnerAccountLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPartnerAccountLink::CopyFrom(const CMsgGCGetPartnerAccountLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetPartnerAccountLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPartnerAccountLink::IsInitialized() const {
  return true;
}

void CMsgGCGetPartnerAccountLink::Swap(CMsgGCGetPartnerAccountLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetPartnerAccountLink::InternalSwap(CMsgGCGetPartnerAccountLink* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCGetPartnerAccountLink::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCGetPartnerAccountLink

// optional fixed64 steamid = 1;
bool CMsgGCGetPartnerAccountLink::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCGetPartnerAccountLink::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCGetPartnerAccountLink::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCGetPartnerAccountLink::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgGCGetPartnerAccountLink::steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPartnerAccountLink.steamid)
  return steamid_;
}
void CMsgGCGetPartnerAccountLink::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetPartnerAccountLink.steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetPartnerAccountLink_Response::kPwidFieldNumber;
const int CMsgGCGetPartnerAccountLink_Response::kNexonidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetPartnerAccountLink_Response::CMsgGCGetPartnerAccountLink_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetPartnerAccountLink_Response)
}
CMsgGCGetPartnerAccountLink_Response::CMsgGCGetPartnerAccountLink_Response(const CMsgGCGetPartnerAccountLink_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pwid_, &from.pwid_,
    reinterpret_cast<char*>(&nexonid_) -
    reinterpret_cast<char*>(&pwid_) + sizeof(nexonid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetPartnerAccountLink_Response)
}

void CMsgGCGetPartnerAccountLink_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pwid_, 0, reinterpret_cast<char*>(&nexonid_) -
    reinterpret_cast<char*>(&pwid_) + sizeof(nexonid_));
}

CMsgGCGetPartnerAccountLink_Response::~CMsgGCGetPartnerAccountLink_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  SharedDtor();
}

void CMsgGCGetPartnerAccountLink_Response::SharedDtor() {
}

void CMsgGCGetPartnerAccountLink_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetPartnerAccountLink_Response::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCGetPartnerAccountLink_Response& CMsgGCGetPartnerAccountLink_Response::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCGetPartnerAccountLink_Response* CMsgGCGetPartnerAccountLink_Response::New(::google::protobuf::Arena* arena) const {
  CMsgGCGetPartnerAccountLink_Response* n = new CMsgGCGetPartnerAccountLink_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCGetPartnerAccountLink_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&pwid_, 0, reinterpret_cast<char*>(&nexonid_) -
      reinterpret_cast<char*>(&pwid_) + sizeof(nexonid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCGetPartnerAccountLink_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pwid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_pwid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pwid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nexonid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_nexonid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nexonid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  return false;
#undef DO_
}

void CMsgGCGetPartnerAccountLink_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pwid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pwid(), output);
  }

  // optional uint32 nexonid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nexonid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetPartnerAccountLink_Response)
}

::google::protobuf::uint8* CMsgGCGetPartnerAccountLink_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pwid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pwid(), target);
  }

  // optional uint32 nexonid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nexonid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  return target;
}

size_t CMsgGCGetPartnerAccountLink_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 pwid = 1;
    if (has_pwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pwid());
    }

    // optional uint32 nexonid = 2;
    if (has_nexonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nexonid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetPartnerAccountLink_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetPartnerAccountLink_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCGetPartnerAccountLink_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetPartnerAccountLink_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetPartnerAccountLink_Response)
    MergeFrom(*source);
  }
}

void CMsgGCGetPartnerAccountLink_Response::MergeFrom(const CMsgGCGetPartnerAccountLink_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      pwid_ = from.pwid_;
    }
    if (cached_has_bits & 0x00000002u) {
      nexonid_ = from.nexonid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCGetPartnerAccountLink_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPartnerAccountLink_Response::CopyFrom(const CMsgGCGetPartnerAccountLink_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetPartnerAccountLink_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPartnerAccountLink_Response::IsInitialized() const {
  return true;
}

void CMsgGCGetPartnerAccountLink_Response::Swap(CMsgGCGetPartnerAccountLink_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetPartnerAccountLink_Response::InternalSwap(CMsgGCGetPartnerAccountLink_Response* other) {
  std::swap(pwid_, other->pwid_);
  std::swap(nexonid_, other->nexonid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCGetPartnerAccountLink_Response::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCGetPartnerAccountLink_Response

// optional uint32 pwid = 1;
bool CMsgGCGetPartnerAccountLink_Response::has_pwid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCGetPartnerAccountLink_Response::set_has_pwid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCGetPartnerAccountLink_Response::clear_has_pwid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCGetPartnerAccountLink_Response::clear_pwid() {
  pwid_ = 0u;
  clear_has_pwid();
}
::google::protobuf::uint32 CMsgGCGetPartnerAccountLink_Response::pwid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPartnerAccountLink_Response.pwid)
  return pwid_;
}
void CMsgGCGetPartnerAccountLink_Response::set_pwid(::google::protobuf::uint32 value) {
  set_has_pwid();
  pwid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetPartnerAccountLink_Response.pwid)
}

// optional uint32 nexonid = 2;
bool CMsgGCGetPartnerAccountLink_Response::has_nexonid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCGetPartnerAccountLink_Response::set_has_nexonid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCGetPartnerAccountLink_Response::clear_has_nexonid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCGetPartnerAccountLink_Response::clear_nexonid() {
  nexonid_ = 0u;
  clear_has_nexonid();
}
::google::protobuf::uint32 CMsgGCGetPartnerAccountLink_Response::nexonid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPartnerAccountLink_Response.nexonid)
  return nexonid_;
}
void CMsgGCGetPartnerAccountLink_Response::set_nexonid(::google::protobuf::uint32 value) {
  set_has_nexonid();
  nexonid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetPartnerAccountLink_Response.nexonid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCRoutingInfo::kDirIndexFieldNumber;
const int CMsgGCRoutingInfo::kMethodFieldNumber;
const int CMsgGCRoutingInfo::kFallbackFieldNumber;
const int CMsgGCRoutingInfo::kProtobufFieldFieldNumber;
const int CMsgGCRoutingInfo::kWebapiParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCRoutingInfo::CMsgGCRoutingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCRoutingInfo)
}
CMsgGCRoutingInfo::CMsgGCRoutingInfo(const CMsgGCRoutingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dir_index_(from.dir_index_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  webapi_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_webapi_param()) {
    webapi_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webapi_param_);
  }
  ::memcpy(&method_, &from.method_,
    reinterpret_cast<char*>(&fallback_) -
    reinterpret_cast<char*>(&method_) + sizeof(fallback_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCRoutingInfo)
}

void CMsgGCRoutingInfo::SharedCtor() {
  _cached_size_ = 0;
  webapi_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&method_, 0, reinterpret_cast<char*>(&protobuf_field_) -
    reinterpret_cast<char*>(&method_) + sizeof(protobuf_field_));
  fallback_ = 1;
}

CMsgGCRoutingInfo::~CMsgGCRoutingInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCRoutingInfo)
  SharedDtor();
}

void CMsgGCRoutingInfo::SharedDtor() {
  webapi_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCRoutingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRoutingInfo::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCRoutingInfo& CMsgGCRoutingInfo::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCRoutingInfo* CMsgGCRoutingInfo::New(::google::protobuf::Arena* arena) const {
  CMsgGCRoutingInfo* n = new CMsgGCRoutingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCRoutingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCRoutingInfo)
  dir_index_.Clear();
  if (has_webapi_param()) {
    GOOGLE_DCHECK(!webapi_param_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*webapi_param_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&method_, 0, reinterpret_cast<char*>(&protobuf_field_) -
      reinterpret_cast<char*>(&method_) + sizeof(protobuf_field_));
    fallback_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCRoutingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCRoutingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 dir_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_dir_index())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dir_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGCRoutingInfo_RoutingMethod_IsValid(value)) {
            set_method(static_cast< ::proto::dota::CMsgGCRoutingInfo_RoutingMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGCRoutingInfo_RoutingMethod_IsValid(value)) {
            set_fallback(static_cast< ::proto::dota::CMsgGCRoutingInfo_RoutingMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 protobuf_field = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_protobuf_field();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protobuf_field_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string webapi_param = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webapi_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->webapi_param().data(), this->webapi_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCRoutingInfo.webapi_param");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCRoutingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCRoutingInfo)
  return false;
#undef DO_
}

void CMsgGCRoutingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCRoutingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 dir_index = 1;
  for (int i = 0, n = this->dir_index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->dir_index(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->method(), output);
  }

  // optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->fallback(), output);
  }

  // optional uint32 protobuf_field = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->protobuf_field(), output);
  }

  // optional string webapi_param = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webapi_param().data(), this->webapi_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCRoutingInfo.webapi_param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->webapi_param(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCRoutingInfo)
}

::google::protobuf::uint8* CMsgGCRoutingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCRoutingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 dir_index = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->dir_index_, target);

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->method(), target);
  }

  // optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->fallback(), target);
  }

  // optional uint32 protobuf_field = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->protobuf_field(), target);
  }

  // optional string webapi_param = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webapi_param().data(), this->webapi_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCRoutingInfo.webapi_param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->webapi_param(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCRoutingInfo)
  return target;
}

size_t CMsgGCRoutingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCRoutingInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 dir_index = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->dir_index_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dir_index_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string webapi_param = 5;
    if (has_webapi_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webapi_param());
    }

    // optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
    }

    // optional uint32 protobuf_field = 4;
    if (has_protobuf_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protobuf_field());
    }

    // optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
    if (has_fallback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fallback());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRoutingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCRoutingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCRoutingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCRoutingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCRoutingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCRoutingInfo)
    MergeFrom(*source);
  }
}

void CMsgGCRoutingInfo::MergeFrom(const CMsgGCRoutingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCRoutingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dir_index_.MergeFrom(from.dir_index_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_webapi_param();
      webapi_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.webapi_param_);
    }
    if (cached_has_bits & 0x00000002u) {
      method_ = from.method_;
    }
    if (cached_has_bits & 0x00000004u) {
      protobuf_field_ = from.protobuf_field_;
    }
    if (cached_has_bits & 0x00000008u) {
      fallback_ = from.fallback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCRoutingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCRoutingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRoutingInfo::CopyFrom(const CMsgGCRoutingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCRoutingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRoutingInfo::IsInitialized() const {
  return true;
}

void CMsgGCRoutingInfo::Swap(CMsgGCRoutingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCRoutingInfo::InternalSwap(CMsgGCRoutingInfo* other) {
  dir_index_.InternalSwap(&other->dir_index_);
  webapi_param_.Swap(&other->webapi_param_);
  std::swap(method_, other->method_);
  std::swap(protobuf_field_, other->protobuf_field_);
  std::swap(fallback_, other->fallback_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCRoutingInfo::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCRoutingInfo

// repeated uint32 dir_index = 1;
int CMsgGCRoutingInfo::dir_index_size() const {
  return dir_index_.size();
}
void CMsgGCRoutingInfo::clear_dir_index() {
  dir_index_.Clear();
}
::google::protobuf::uint32 CMsgGCRoutingInfo::dir_index(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCRoutingInfo.dir_index)
  return dir_index_.Get(index);
}
void CMsgGCRoutingInfo::set_dir_index(int index, ::google::protobuf::uint32 value) {
  dir_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCRoutingInfo.dir_index)
}
void CMsgGCRoutingInfo::add_dir_index(::google::protobuf::uint32 value) {
  dir_index_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCRoutingInfo.dir_index)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCRoutingInfo::dir_index() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCRoutingInfo.dir_index)
  return dir_index_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCRoutingInfo::mutable_dir_index() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCRoutingInfo.dir_index)
  return &dir_index_;
}

// optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
bool CMsgGCRoutingInfo::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCRoutingInfo::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCRoutingInfo::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCRoutingInfo::clear_method() {
  method_ = 0;
  clear_has_method();
}
::proto::dota::CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::method() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCRoutingInfo.method)
  return static_cast< ::proto::dota::CMsgGCRoutingInfo_RoutingMethod >(method_);
}
void CMsgGCRoutingInfo::set_method(::proto::dota::CMsgGCRoutingInfo_RoutingMethod value) {
  assert(::proto::dota::CMsgGCRoutingInfo_RoutingMethod_IsValid(value));
  set_has_method();
  method_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCRoutingInfo.method)
}

// optional .proto.dota.CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
bool CMsgGCRoutingInfo::has_fallback() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGCRoutingInfo::set_has_fallback() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGCRoutingInfo::clear_has_fallback() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGCRoutingInfo::clear_fallback() {
  fallback_ = 1;
  clear_has_fallback();
}
::proto::dota::CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::fallback() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCRoutingInfo.fallback)
  return static_cast< ::proto::dota::CMsgGCRoutingInfo_RoutingMethod >(fallback_);
}
void CMsgGCRoutingInfo::set_fallback(::proto::dota::CMsgGCRoutingInfo_RoutingMethod value) {
  assert(::proto::dota::CMsgGCRoutingInfo_RoutingMethod_IsValid(value));
  set_has_fallback();
  fallback_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCRoutingInfo.fallback)
}

// optional uint32 protobuf_field = 4;
bool CMsgGCRoutingInfo::has_protobuf_field() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCRoutingInfo::set_has_protobuf_field() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCRoutingInfo::clear_has_protobuf_field() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCRoutingInfo::clear_protobuf_field() {
  protobuf_field_ = 0u;
  clear_has_protobuf_field();
}
::google::protobuf::uint32 CMsgGCRoutingInfo::protobuf_field() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCRoutingInfo.protobuf_field)
  return protobuf_field_;
}
void CMsgGCRoutingInfo::set_protobuf_field(::google::protobuf::uint32 value) {
  set_has_protobuf_field();
  protobuf_field_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCRoutingInfo.protobuf_field)
}

// optional string webapi_param = 5;
bool CMsgGCRoutingInfo::has_webapi_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCRoutingInfo::set_has_webapi_param() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCRoutingInfo::clear_has_webapi_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCRoutingInfo::clear_webapi_param() {
  webapi_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_webapi_param();
}
const ::std::string& CMsgGCRoutingInfo::webapi_param() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCRoutingInfo.webapi_param)
  return webapi_param_.GetNoArena();
}
void CMsgGCRoutingInfo::set_webapi_param(const ::std::string& value) {
  set_has_webapi_param();
  webapi_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCRoutingInfo.webapi_param)
}
#if LANG_CXX11
void CMsgGCRoutingInfo::set_webapi_param(::std::string&& value) {
  set_has_webapi_param();
  webapi_param_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCRoutingInfo.webapi_param)
}
#endif
void CMsgGCRoutingInfo::set_webapi_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_webapi_param();
  webapi_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCRoutingInfo.webapi_param)
}
void CMsgGCRoutingInfo::set_webapi_param(const char* value, size_t size) {
  set_has_webapi_param();
  webapi_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCRoutingInfo.webapi_param)
}
::std::string* CMsgGCRoutingInfo::mutable_webapi_param() {
  set_has_webapi_param();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCRoutingInfo.webapi_param)
  return webapi_param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCRoutingInfo::release_webapi_param() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCRoutingInfo.webapi_param)
  clear_has_webapi_param();
  return webapi_param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCRoutingInfo::set_allocated_webapi_param(::std::string* webapi_param) {
  if (webapi_param != NULL) {
    set_has_webapi_param();
  } else {
    clear_has_webapi_param();
  }
  webapi_param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), webapi_param);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCRoutingInfo.webapi_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgMasterSetWebAPIRouting_Entry::kInterfaceNameFieldNumber;
const int CMsgGCMsgMasterSetWebAPIRouting_Entry::kMethodNameFieldNumber;
const int CMsgGCMsgMasterSetWebAPIRouting_Entry::kRoutingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgMasterSetWebAPIRouting_Entry::CMsgGCMsgMasterSetWebAPIRouting_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
}
CMsgGCMsgMasterSetWebAPIRouting_Entry::CMsgGCMsgMasterSetWebAPIRouting_Entry(const CMsgGCMsgMasterSetWebAPIRouting_Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  interface_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_interface_name()) {
    interface_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_name_);
  }
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_method_name()) {
    method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  if (from.has_routing()) {
    routing_ = new ::proto::dota::CMsgGCRoutingInfo(*from.routing_);
  } else {
    routing_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::SharedCtor() {
  _cached_size_ = 0;
  interface_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  routing_ = NULL;
}

CMsgGCMsgMasterSetWebAPIRouting_Entry::~CMsgGCMsgMasterSetWebAPIRouting_Entry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  SharedDtor();
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::SharedDtor() {
  interface_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete routing_;
  }
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMsgMasterSetWebAPIRouting_Entry::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCMsgMasterSetWebAPIRouting_Entry& CMsgGCMsgMasterSetWebAPIRouting_Entry::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCMsgMasterSetWebAPIRouting_Entry* CMsgGCMsgMasterSetWebAPIRouting_Entry::New(::google::protobuf::Arena* arena) const {
  CMsgGCMsgMasterSetWebAPIRouting_Entry* n = new CMsgGCMsgMasterSetWebAPIRouting_Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_interface_name()) {
      GOOGLE_DCHECK(!interface_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*interface_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_method_name()) {
      GOOGLE_DCHECK(!method_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*method_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_routing()) {
      GOOGLE_DCHECK(routing_ != NULL);
      routing_->::proto::dota::CMsgGCRoutingInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCMsgMasterSetWebAPIRouting_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string interface_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interface_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->interface_name().data(), this->interface_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string method_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGCRoutingInfo routing = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  return false;
#undef DO_
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string interface_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interface_name().data(), this->interface_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->interface_name(), output);
  }

  // optional string method_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->method_name(), output);
  }

  // optional .proto.dota.CMsgGCRoutingInfo routing = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->routing_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
}

::google::protobuf::uint8* CMsgGCMsgMasterSetWebAPIRouting_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string interface_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interface_name().data(), this->interface_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->interface_name(), target);
  }

  // optional string method_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method_name(), target);
  }

  // optional .proto.dota.CMsgGCRoutingInfo routing = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->routing_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  return target;
}

size_t CMsgGCMsgMasterSetWebAPIRouting_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string interface_name = 1;
    if (has_interface_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interface_name());
    }

    // optional string method_name = 2;
    if (has_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }

    // optional .proto.dota.CMsgGCRoutingInfo routing = 3;
    if (has_routing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->routing_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgMasterSetWebAPIRouting_Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCMsgMasterSetWebAPIRouting_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
    MergeFrom(*source);
  }
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::MergeFrom(const CMsgGCMsgMasterSetWebAPIRouting_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_interface_name();
      interface_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.interface_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_method_name();
      method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_routing()->::proto::dota::CMsgGCRoutingInfo::MergeFrom(from.routing());
    }
  }
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::CopyFrom(const CMsgGCMsgMasterSetWebAPIRouting_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetWebAPIRouting_Entry::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::Swap(CMsgGCMsgMasterSetWebAPIRouting_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::InternalSwap(CMsgGCMsgMasterSetWebAPIRouting_Entry* other) {
  interface_name_.Swap(&other->interface_name_);
  method_name_.Swap(&other->method_name_);
  std::swap(routing_, other->routing_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCMsgMasterSetWebAPIRouting_Entry::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCMsgMasterSetWebAPIRouting_Entry

// optional string interface_name = 1;
bool CMsgGCMsgMasterSetWebAPIRouting_Entry::has_interface_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::set_has_interface_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::clear_has_interface_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::clear_interface_name() {
  interface_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_interface_name();
}
const ::std::string& CMsgGCMsgMasterSetWebAPIRouting_Entry::interface_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name)
  return interface_name_.GetNoArena();
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::set_interface_name(const ::std::string& value) {
  set_has_interface_name();
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name)
}
#if LANG_CXX11
void CMsgGCMsgMasterSetWebAPIRouting_Entry::set_interface_name(::std::string&& value) {
  set_has_interface_name();
  interface_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name)
}
#endif
void CMsgGCMsgMasterSetWebAPIRouting_Entry::set_interface_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_interface_name();
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name)
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::set_interface_name(const char* value, size_t size) {
  set_has_interface_name();
  interface_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name)
}
::std::string* CMsgGCMsgMasterSetWebAPIRouting_Entry::mutable_interface_name() {
  set_has_interface_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name)
  return interface_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCMsgMasterSetWebAPIRouting_Entry::release_interface_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name)
  clear_has_interface_name();
  return interface_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::set_allocated_interface_name(::std::string* interface_name) {
  if (interface_name != NULL) {
    set_has_interface_name();
  } else {
    clear_has_interface_name();
  }
  interface_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interface_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name)
}

// optional string method_name = 2;
bool CMsgGCMsgMasterSetWebAPIRouting_Entry::has_method_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::set_has_method_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::clear_has_method_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method_name();
}
const ::std::string& CMsgGCMsgMasterSetWebAPIRouting_Entry::method_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name)
  return method_name_.GetNoArena();
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::set_method_name(const ::std::string& value) {
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name)
}
#if LANG_CXX11
void CMsgGCMsgMasterSetWebAPIRouting_Entry::set_method_name(::std::string&& value) {
  set_has_method_name();
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name)
}
#endif
void CMsgGCMsgMasterSetWebAPIRouting_Entry::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name)
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::set_method_name(const char* value, size_t size) {
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name)
}
::std::string* CMsgGCMsgMasterSetWebAPIRouting_Entry::mutable_method_name() {
  set_has_method_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCMsgMasterSetWebAPIRouting_Entry::release_method_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name)
  clear_has_method_name();
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    set_has_method_name();
  } else {
    clear_has_method_name();
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name)
}

// optional .proto.dota.CMsgGCRoutingInfo routing = 3;
bool CMsgGCMsgMasterSetWebAPIRouting_Entry::has_routing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::set_has_routing() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::clear_has_routing() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::clear_routing() {
  if (routing_ != NULL) routing_->::proto::dota::CMsgGCRoutingInfo::Clear();
  clear_has_routing();
}
const ::proto::dota::CMsgGCRoutingInfo& CMsgGCMsgMasterSetWebAPIRouting_Entry::routing() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.routing)
  return routing_ != NULL ? *routing_
                         : *::proto::dota::CMsgGCRoutingInfo::internal_default_instance();
}
::proto::dota::CMsgGCRoutingInfo* CMsgGCMsgMasterSetWebAPIRouting_Entry::mutable_routing() {
  set_has_routing();
  if (routing_ == NULL) {
    routing_ = new ::proto::dota::CMsgGCRoutingInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.routing)
  return routing_;
}
::proto::dota::CMsgGCRoutingInfo* CMsgGCMsgMasterSetWebAPIRouting_Entry::release_routing() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.routing)
  clear_has_routing();
  ::proto::dota::CMsgGCRoutingInfo* temp = routing_;
  routing_ = NULL;
  return temp;
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::set_allocated_routing(::proto::dota::CMsgGCRoutingInfo* routing) {
  delete routing_;
  routing_ = routing;
  if (routing) {
    set_has_routing();
  } else {
    clear_has_routing();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry.routing)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgMasterSetWebAPIRouting::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgMasterSetWebAPIRouting::CMsgGCMsgMasterSetWebAPIRouting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
}
CMsgGCMsgMasterSetWebAPIRouting::CMsgGCMsgMasterSetWebAPIRouting(const CMsgGCMsgMasterSetWebAPIRouting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
}

void CMsgGCMsgMasterSetWebAPIRouting::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCMsgMasterSetWebAPIRouting::~CMsgGCMsgMasterSetWebAPIRouting() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  SharedDtor();
}

void CMsgGCMsgMasterSetWebAPIRouting::SharedDtor() {
}

void CMsgGCMsgMasterSetWebAPIRouting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMsgMasterSetWebAPIRouting::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCMsgMasterSetWebAPIRouting& CMsgGCMsgMasterSetWebAPIRouting::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCMsgMasterSetWebAPIRouting* CMsgGCMsgMasterSetWebAPIRouting::New(::google::protobuf::Arena* arena) const {
  CMsgGCMsgMasterSetWebAPIRouting* n = new CMsgGCMsgMasterSetWebAPIRouting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCMsgMasterSetWebAPIRouting::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  entries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCMsgMasterSetWebAPIRouting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  return false;
#undef DO_
}

void CMsgGCMsgMasterSetWebAPIRouting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
}

::google::protobuf::uint8* CMsgGCMsgMasterSetWebAPIRouting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->entries(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  return target;
}

size_t CMsgGCMsgMasterSetWebAPIRouting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMsgMasterSetWebAPIRouting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgMasterSetWebAPIRouting* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCMsgMasterSetWebAPIRouting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
    MergeFrom(*source);
  }
}

void CMsgGCMsgMasterSetWebAPIRouting::MergeFrom(const CMsgGCMsgMasterSetWebAPIRouting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void CMsgGCMsgMasterSetWebAPIRouting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgMasterSetWebAPIRouting::CopyFrom(const CMsgGCMsgMasterSetWebAPIRouting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetWebAPIRouting::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetWebAPIRouting::Swap(CMsgGCMsgMasterSetWebAPIRouting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgMasterSetWebAPIRouting::InternalSwap(CMsgGCMsgMasterSetWebAPIRouting* other) {
  entries_.InternalSwap(&other->entries_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCMsgMasterSetWebAPIRouting::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCMsgMasterSetWebAPIRouting

// repeated .proto.dota.CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
int CMsgGCMsgMasterSetWebAPIRouting::entries_size() const {
  return entries_.size();
}
void CMsgGCMsgMasterSetWebAPIRouting::clear_entries() {
  entries_.Clear();
}
const ::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Entry& CMsgGCMsgMasterSetWebAPIRouting::entries(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.entries)
  return entries_.Get(index);
}
::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Entry* CMsgGCMsgMasterSetWebAPIRouting::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.entries)
  return entries_.Mutable(index);
}
::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Entry* CMsgGCMsgMasterSetWebAPIRouting::add_entries() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Entry >*
CMsgGCMsgMasterSetWebAPIRouting::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCMsgMasterSetWebAPIRouting_Entry >&
CMsgGCMsgMasterSetWebAPIRouting::entries() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCMsgMasterSetWebAPIRouting.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgMasterSetClientMsgRouting_Entry::kMsgTypeFieldNumber;
const int CMsgGCMsgMasterSetClientMsgRouting_Entry::kRoutingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgMasterSetClientMsgRouting_Entry::CMsgGCMsgMasterSetClientMsgRouting_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
}
CMsgGCMsgMasterSetClientMsgRouting_Entry::CMsgGCMsgMasterSetClientMsgRouting_Entry(const CMsgGCMsgMasterSetClientMsgRouting_Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_routing()) {
    routing_ = new ::proto::dota::CMsgGCRoutingInfo(*from.routing_);
  } else {
    routing_ = NULL;
  }
  msg_type_ = from.msg_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&routing_, 0, reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&routing_) + sizeof(msg_type_));
}

CMsgGCMsgMasterSetClientMsgRouting_Entry::~CMsgGCMsgMasterSetClientMsgRouting_Entry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  SharedDtor();
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::SharedDtor() {
  if (this != internal_default_instance()) {
    delete routing_;
  }
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMsgMasterSetClientMsgRouting_Entry::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCMsgMasterSetClientMsgRouting_Entry& CMsgGCMsgMasterSetClientMsgRouting_Entry::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCMsgMasterSetClientMsgRouting_Entry* CMsgGCMsgMasterSetClientMsgRouting_Entry::New(::google::protobuf::Arena* arena) const {
  CMsgGCMsgMasterSetClientMsgRouting_Entry* n = new CMsgGCMsgMasterSetClientMsgRouting_Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  if (has_routing()) {
    GOOGLE_DCHECK(routing_ != NULL);
    routing_->::proto::dota::CMsgGCRoutingInfo::Clear();
  }
  msg_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCMsgMasterSetClientMsgRouting_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msg_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_msg_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGCRoutingInfo routing = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  return false;
#undef DO_
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_type(), output);
  }

  // optional .proto.dota.CMsgGCRoutingInfo routing = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->routing_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
}

::google::protobuf::uint8* CMsgGCMsgMasterSetClientMsgRouting_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_type(), target);
  }

  // optional .proto.dota.CMsgGCRoutingInfo routing = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->routing_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  return target;
}

size_t CMsgGCMsgMasterSetClientMsgRouting_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgGCRoutingInfo routing = 2;
    if (has_routing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->routing_);
    }

    // optional uint32 msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgMasterSetClientMsgRouting_Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCMsgMasterSetClientMsgRouting_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
    MergeFrom(*source);
  }
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::MergeFrom(const CMsgGCMsgMasterSetClientMsgRouting_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_routing()->::proto::dota::CMsgGCRoutingInfo::MergeFrom(from.routing());
    }
    if (cached_has_bits & 0x00000002u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::CopyFrom(const CMsgGCMsgMasterSetClientMsgRouting_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetClientMsgRouting_Entry::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::Swap(CMsgGCMsgMasterSetClientMsgRouting_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgMasterSetClientMsgRouting_Entry::InternalSwap(CMsgGCMsgMasterSetClientMsgRouting_Entry* other) {
  std::swap(routing_, other->routing_);
  std::swap(msg_type_, other->msg_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCMsgMasterSetClientMsgRouting_Entry::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCMsgMasterSetClientMsgRouting_Entry

// optional uint32 msg_type = 1;
bool CMsgGCMsgMasterSetClientMsgRouting_Entry::has_msg_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCMsgMasterSetClientMsgRouting_Entry::set_has_msg_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCMsgMasterSetClientMsgRouting_Entry::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCMsgMasterSetClientMsgRouting_Entry::clear_msg_type() {
  msg_type_ = 0u;
  clear_has_msg_type();
}
::google::protobuf::uint32 CMsgGCMsgMasterSetClientMsgRouting_Entry::msg_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry.msg_type)
  return msg_type_;
}
void CMsgGCMsgMasterSetClientMsgRouting_Entry::set_msg_type(::google::protobuf::uint32 value) {
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry.msg_type)
}

// optional .proto.dota.CMsgGCRoutingInfo routing = 2;
bool CMsgGCMsgMasterSetClientMsgRouting_Entry::has_routing() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCMsgMasterSetClientMsgRouting_Entry::set_has_routing() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCMsgMasterSetClientMsgRouting_Entry::clear_has_routing() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCMsgMasterSetClientMsgRouting_Entry::clear_routing() {
  if (routing_ != NULL) routing_->::proto::dota::CMsgGCRoutingInfo::Clear();
  clear_has_routing();
}
const ::proto::dota::CMsgGCRoutingInfo& CMsgGCMsgMasterSetClientMsgRouting_Entry::routing() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry.routing)
  return routing_ != NULL ? *routing_
                         : *::proto::dota::CMsgGCRoutingInfo::internal_default_instance();
}
::proto::dota::CMsgGCRoutingInfo* CMsgGCMsgMasterSetClientMsgRouting_Entry::mutable_routing() {
  set_has_routing();
  if (routing_ == NULL) {
    routing_ = new ::proto::dota::CMsgGCRoutingInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry.routing)
  return routing_;
}
::proto::dota::CMsgGCRoutingInfo* CMsgGCMsgMasterSetClientMsgRouting_Entry::release_routing() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry.routing)
  clear_has_routing();
  ::proto::dota::CMsgGCRoutingInfo* temp = routing_;
  routing_ = NULL;
  return temp;
}
void CMsgGCMsgMasterSetClientMsgRouting_Entry::set_allocated_routing(::proto::dota::CMsgGCRoutingInfo* routing) {
  delete routing_;
  routing_ = routing;
  if (routing) {
    set_has_routing();
  } else {
    clear_has_routing();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry.routing)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgMasterSetClientMsgRouting::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgMasterSetClientMsgRouting::CMsgGCMsgMasterSetClientMsgRouting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
}
CMsgGCMsgMasterSetClientMsgRouting::CMsgGCMsgMasterSetClientMsgRouting(const CMsgGCMsgMasterSetClientMsgRouting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
}

void CMsgGCMsgMasterSetClientMsgRouting::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCMsgMasterSetClientMsgRouting::~CMsgGCMsgMasterSetClientMsgRouting() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  SharedDtor();
}

void CMsgGCMsgMasterSetClientMsgRouting::SharedDtor() {
}

void CMsgGCMsgMasterSetClientMsgRouting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMsgMasterSetClientMsgRouting::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCMsgMasterSetClientMsgRouting& CMsgGCMsgMasterSetClientMsgRouting::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCMsgMasterSetClientMsgRouting* CMsgGCMsgMasterSetClientMsgRouting::New(::google::protobuf::Arena* arena) const {
  CMsgGCMsgMasterSetClientMsgRouting* n = new CMsgGCMsgMasterSetClientMsgRouting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCMsgMasterSetClientMsgRouting::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  entries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCMsgMasterSetClientMsgRouting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  return false;
#undef DO_
}

void CMsgGCMsgMasterSetClientMsgRouting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
}

::google::protobuf::uint8* CMsgGCMsgMasterSetClientMsgRouting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->entries(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  return target;
}

size_t CMsgGCMsgMasterSetClientMsgRouting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMsgMasterSetClientMsgRouting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgMasterSetClientMsgRouting* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCMsgMasterSetClientMsgRouting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
    MergeFrom(*source);
  }
}

void CMsgGCMsgMasterSetClientMsgRouting::MergeFrom(const CMsgGCMsgMasterSetClientMsgRouting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void CMsgGCMsgMasterSetClientMsgRouting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgMasterSetClientMsgRouting::CopyFrom(const CMsgGCMsgMasterSetClientMsgRouting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetClientMsgRouting::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetClientMsgRouting::Swap(CMsgGCMsgMasterSetClientMsgRouting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgMasterSetClientMsgRouting::InternalSwap(CMsgGCMsgMasterSetClientMsgRouting* other) {
  entries_.InternalSwap(&other->entries_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCMsgMasterSetClientMsgRouting::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCMsgMasterSetClientMsgRouting

// repeated .proto.dota.CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
int CMsgGCMsgMasterSetClientMsgRouting::entries_size() const {
  return entries_.size();
}
void CMsgGCMsgMasterSetClientMsgRouting::clear_entries() {
  entries_.Clear();
}
const ::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Entry& CMsgGCMsgMasterSetClientMsgRouting::entries(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.entries)
  return entries_.Get(index);
}
::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Entry* CMsgGCMsgMasterSetClientMsgRouting::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.entries)
  return entries_.Mutable(index);
}
::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Entry* CMsgGCMsgMasterSetClientMsgRouting::add_entries() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Entry >*
CMsgGCMsgMasterSetClientMsgRouting::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCMsgMasterSetClientMsgRouting_Entry >&
CMsgGCMsgMasterSetClientMsgRouting::entries() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCMsgMasterSetClientMsgRouting.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgMasterSetWebAPIRouting_Response::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgMasterSetWebAPIRouting_Response::CMsgGCMsgMasterSetWebAPIRouting_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
}
CMsgGCMsgMasterSetWebAPIRouting_Response::CMsgGCMsgMasterSetWebAPIRouting_Response(const CMsgGCMsgMasterSetWebAPIRouting_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
}

CMsgGCMsgMasterSetWebAPIRouting_Response::~CMsgGCMsgMasterSetWebAPIRouting_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  SharedDtor();
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::SharedDtor() {
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMsgMasterSetWebAPIRouting_Response::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCMsgMasterSetWebAPIRouting_Response& CMsgGCMsgMasterSetWebAPIRouting_Response::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCMsgMasterSetWebAPIRouting_Response* CMsgGCMsgMasterSetWebAPIRouting_Response::New(::google::protobuf::Arena* arena) const {
  CMsgGCMsgMasterSetWebAPIRouting_Response* n = new CMsgGCMsgMasterSetWebAPIRouting_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCMsgMasterSetWebAPIRouting_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  return false;
#undef DO_
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
}

::google::protobuf::uint8* CMsgGCMsgMasterSetWebAPIRouting_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  return target;
}

size_t CMsgGCMsgMasterSetWebAPIRouting_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgMasterSetWebAPIRouting_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCMsgMasterSetWebAPIRouting_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
    MergeFrom(*source);
  }
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::MergeFrom(const CMsgGCMsgMasterSetWebAPIRouting_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::CopyFrom(const CMsgGCMsgMasterSetWebAPIRouting_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetWebAPIRouting_Response::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::Swap(CMsgGCMsgMasterSetWebAPIRouting_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgMasterSetWebAPIRouting_Response::InternalSwap(CMsgGCMsgMasterSetWebAPIRouting_Response* other) {
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCMsgMasterSetWebAPIRouting_Response::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCMsgMasterSetWebAPIRouting_Response

// optional int32 eresult = 1 [default = 2];
bool CMsgGCMsgMasterSetWebAPIRouting_Response::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCMsgMasterSetWebAPIRouting_Response::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCMsgMasterSetWebAPIRouting_Response::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCMsgMasterSetWebAPIRouting_Response::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgGCMsgMasterSetWebAPIRouting_Response::eresult() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response.eresult)
  return eresult_;
}
void CMsgGCMsgMasterSetWebAPIRouting_Response::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMsgMasterSetWebAPIRouting_Response.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgMasterSetClientMsgRouting_Response::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgMasterSetClientMsgRouting_Response::CMsgGCMsgMasterSetClientMsgRouting_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
}
CMsgGCMsgMasterSetClientMsgRouting_Response::CMsgGCMsgMasterSetClientMsgRouting_Response(const CMsgGCMsgMasterSetClientMsgRouting_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
}

CMsgGCMsgMasterSetClientMsgRouting_Response::~CMsgGCMsgMasterSetClientMsgRouting_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  SharedDtor();
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::SharedDtor() {
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMsgMasterSetClientMsgRouting_Response::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCMsgMasterSetClientMsgRouting_Response& CMsgGCMsgMasterSetClientMsgRouting_Response::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCMsgMasterSetClientMsgRouting_Response* CMsgGCMsgMasterSetClientMsgRouting_Response::New(::google::protobuf::Arena* arena) const {
  CMsgGCMsgMasterSetClientMsgRouting_Response* n = new CMsgGCMsgMasterSetClientMsgRouting_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCMsgMasterSetClientMsgRouting_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  return false;
#undef DO_
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
}

::google::protobuf::uint8* CMsgGCMsgMasterSetClientMsgRouting_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  return target;
}

size_t CMsgGCMsgMasterSetClientMsgRouting_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgMasterSetClientMsgRouting_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCMsgMasterSetClientMsgRouting_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
    MergeFrom(*source);
  }
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::MergeFrom(const CMsgGCMsgMasterSetClientMsgRouting_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::CopyFrom(const CMsgGCMsgMasterSetClientMsgRouting_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetClientMsgRouting_Response::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::Swap(CMsgGCMsgMasterSetClientMsgRouting_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgMasterSetClientMsgRouting_Response::InternalSwap(CMsgGCMsgMasterSetClientMsgRouting_Response* other) {
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCMsgMasterSetClientMsgRouting_Response::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCMsgMasterSetClientMsgRouting_Response

// optional int32 eresult = 1 [default = 2];
bool CMsgGCMsgMasterSetClientMsgRouting_Response::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCMsgMasterSetClientMsgRouting_Response::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCMsgMasterSetClientMsgRouting_Response::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCMsgMasterSetClientMsgRouting_Response::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgGCMsgMasterSetClientMsgRouting_Response::eresult() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response.eresult)
  return eresult_;
}
void CMsgGCMsgMasterSetClientMsgRouting_Response::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMsgMasterSetClientMsgRouting_Response.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgSetOptions_MessageRange::kLowFieldNumber;
const int CMsgGCMsgSetOptions_MessageRange::kHighFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgSetOptions_MessageRange::CMsgGCMsgSetOptions_MessageRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgSetOptions.MessageRange)
}
CMsgGCMsgSetOptions_MessageRange::CMsgGCMsgSetOptions_MessageRange(const CMsgGCMsgSetOptions_MessageRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&low_, &from.low_,
    reinterpret_cast<char*>(&high_) -
    reinterpret_cast<char*>(&low_) + sizeof(high_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgSetOptions.MessageRange)
}

void CMsgGCMsgSetOptions_MessageRange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&low_, 0, reinterpret_cast<char*>(&high_) -
    reinterpret_cast<char*>(&low_) + sizeof(high_));
}

CMsgGCMsgSetOptions_MessageRange::~CMsgGCMsgSetOptions_MessageRange() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  SharedDtor();
}

void CMsgGCMsgSetOptions_MessageRange::SharedDtor() {
}

void CMsgGCMsgSetOptions_MessageRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMsgSetOptions_MessageRange::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCMsgSetOptions_MessageRange& CMsgGCMsgSetOptions_MessageRange::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCMsgSetOptions_MessageRange* CMsgGCMsgSetOptions_MessageRange::New(::google::protobuf::Arena* arena) const {
  CMsgGCMsgSetOptions_MessageRange* n = new CMsgGCMsgSetOptions_MessageRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCMsgSetOptions_MessageRange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&low_, 0, reinterpret_cast<char*>(&high_) -
      reinterpret_cast<char*>(&low_) + sizeof(high_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCMsgSetOptions_MessageRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 low = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_low();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 high = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_high();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  return false;
#undef DO_
}

void CMsgGCMsgSetOptions_MessageRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 low = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->low(), output);
  }

  // required uint32 high = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->high(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgSetOptions.MessageRange)
}

::google::protobuf::uint8* CMsgGCMsgSetOptions_MessageRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 low = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->low(), target);
  }

  // required uint32 high = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->high(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  return target;
}

size_t CMsgGCMsgSetOptions_MessageRange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  size_t total_size = 0;

  if (has_low()) {
    // required uint32 low = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low());
  }

  if (has_high()) {
    // required uint32 high = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->high());
  }

  return total_size;
}
size_t CMsgGCMsgSetOptions_MessageRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 low = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low());

    // required uint32 high = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->high());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMsgSetOptions_MessageRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgSetOptions_MessageRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCMsgSetOptions_MessageRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgSetOptions.MessageRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgSetOptions.MessageRange)
    MergeFrom(*source);
  }
}

void CMsgGCMsgSetOptions_MessageRange::MergeFrom(const CMsgGCMsgSetOptions_MessageRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      low_ = from.low_;
    }
    if (cached_has_bits & 0x00000002u) {
      high_ = from.high_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCMsgSetOptions_MessageRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgSetOptions_MessageRange::CopyFrom(const CMsgGCMsgSetOptions_MessageRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgSetOptions.MessageRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgSetOptions_MessageRange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CMsgGCMsgSetOptions_MessageRange::Swap(CMsgGCMsgSetOptions_MessageRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgSetOptions_MessageRange::InternalSwap(CMsgGCMsgSetOptions_MessageRange* other) {
  std::swap(low_, other->low_);
  std::swap(high_, other->high_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCMsgSetOptions_MessageRange::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCMsgSetOptions_MessageRange

// required uint32 low = 1;
bool CMsgGCMsgSetOptions_MessageRange::has_low() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCMsgSetOptions_MessageRange::set_has_low() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCMsgSetOptions_MessageRange::clear_has_low() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCMsgSetOptions_MessageRange::clear_low() {
  low_ = 0u;
  clear_has_low();
}
::google::protobuf::uint32 CMsgGCMsgSetOptions_MessageRange::low() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgSetOptions.MessageRange.low)
  return low_;
}
void CMsgGCMsgSetOptions_MessageRange::set_low(::google::protobuf::uint32 value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMsgSetOptions.MessageRange.low)
}

// required uint32 high = 2;
bool CMsgGCMsgSetOptions_MessageRange::has_high() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCMsgSetOptions_MessageRange::set_has_high() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCMsgSetOptions_MessageRange::clear_has_high() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCMsgSetOptions_MessageRange::clear_high() {
  high_ = 0u;
  clear_has_high();
}
::google::protobuf::uint32 CMsgGCMsgSetOptions_MessageRange::high() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgSetOptions.MessageRange.high)
  return high_;
}
void CMsgGCMsgSetOptions_MessageRange::set_high(::google::protobuf::uint32 value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMsgSetOptions.MessageRange.high)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCMsgSetOptions::kOptionsFieldNumber;
const int CMsgGCMsgSetOptions::kClientMsgRangesFieldNumber;
const int CMsgGCMsgSetOptions::kGcsqlVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCMsgSetOptions::CMsgGCMsgSetOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCMsgSetOptions)
}
CMsgGCMsgSetOptions::CMsgGCMsgSetOptions(const CMsgGCMsgSetOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      options_(from.options_),
      client_msg_ranges_(from.client_msg_ranges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gcsql_version_ = from.gcsql_version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCMsgSetOptions)
}

void CMsgGCMsgSetOptions::SharedCtor() {
  _cached_size_ = 0;
  gcsql_version_ = 1;
}

CMsgGCMsgSetOptions::~CMsgGCMsgSetOptions() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCMsgSetOptions)
  SharedDtor();
}

void CMsgGCMsgSetOptions::SharedDtor() {
}

void CMsgGCMsgSetOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCMsgSetOptions::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCMsgSetOptions& CMsgGCMsgSetOptions::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCMsgSetOptions* CMsgGCMsgSetOptions::New(::google::protobuf::Arena* arena) const {
  CMsgGCMsgSetOptions* n = new CMsgGCMsgSetOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCMsgSetOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCMsgSetOptions)
  options_.Clear();
  client_msg_ranges_.Clear();
  gcsql_version_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCMsgSetOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCMsgSetOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgGCMsgSetOptions.Option options = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGCMsgSetOptions_Option_IsValid(value)) {
            add_options(static_cast< ::proto::dota::CMsgGCMsgSetOptions_Option >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::proto::dota::CMsgGCMsgSetOptions_Option_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_options())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_client_msg_ranges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGCMsgSetOptions.GCSQLVersion gcsql_version = 3 [default = GCSQL_VERSION_BASELINE];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGCMsgSetOptions_GCSQLVersion_IsValid(value)) {
            set_gcsql_version(static_cast< ::proto::dota::CMsgGCMsgSetOptions_GCSQLVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCMsgSetOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCMsgSetOptions)
  return false;
#undef DO_
}

void CMsgGCMsgSetOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCMsgSetOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCMsgSetOptions.Option options = 1;
  for (int i = 0, n = this->options_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->options(i), output);
  }

  // repeated .proto.dota.CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
  for (unsigned int i = 0, n = this->client_msg_ranges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->client_msg_ranges(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGCMsgSetOptions.GCSQLVersion gcsql_version = 3 [default = GCSQL_VERSION_BASELINE];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gcsql_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCMsgSetOptions)
}

::google::protobuf::uint8* CMsgGCMsgSetOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCMsgSetOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCMsgSetOptions.Option options = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->options_, target);

  // repeated .proto.dota.CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
  for (unsigned int i = 0, n = this->client_msg_ranges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->client_msg_ranges(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGCMsgSetOptions.GCSQLVersion gcsql_version = 3 [default = GCSQL_VERSION_BASELINE];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gcsql_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCMsgSetOptions)
  return target;
}

size_t CMsgGCMsgSetOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCMsgSetOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgGCMsgSetOptions.Option options = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->options_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->options(i));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .proto.dota.CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
  {
    unsigned int count = this->client_msg_ranges_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_msg_ranges(i));
    }
  }

  // optional .proto.dota.CMsgGCMsgSetOptions.GCSQLVersion gcsql_version = 3 [default = GCSQL_VERSION_BASELINE];
  if (has_gcsql_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gcsql_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCMsgSetOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCMsgSetOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMsgSetOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCMsgSetOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCMsgSetOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCMsgSetOptions)
    MergeFrom(*source);
  }
}

void CMsgGCMsgSetOptions::MergeFrom(const CMsgGCMsgSetOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCMsgSetOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
  client_msg_ranges_.MergeFrom(from.client_msg_ranges_);
  if (from.has_gcsql_version()) {
    set_gcsql_version(from.gcsql_version());
  }
}

void CMsgGCMsgSetOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCMsgSetOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMsgSetOptions::CopyFrom(const CMsgGCMsgSetOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCMsgSetOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgSetOptions::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->client_msg_ranges())) return false;
  return true;
}

void CMsgGCMsgSetOptions::Swap(CMsgGCMsgSetOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCMsgSetOptions::InternalSwap(CMsgGCMsgSetOptions* other) {
  options_.InternalSwap(&other->options_);
  client_msg_ranges_.InternalSwap(&other->client_msg_ranges_);
  std::swap(gcsql_version_, other->gcsql_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCMsgSetOptions::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCMsgSetOptions

// repeated .proto.dota.CMsgGCMsgSetOptions.Option options = 1;
int CMsgGCMsgSetOptions::options_size() const {
  return options_.size();
}
void CMsgGCMsgSetOptions::clear_options() {
  options_.Clear();
}
::proto::dota::CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::options(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgSetOptions.options)
  return static_cast< ::proto::dota::CMsgGCMsgSetOptions_Option >(options_.Get(index));
}
void CMsgGCMsgSetOptions::set_options(int index, ::proto::dota::CMsgGCMsgSetOptions_Option value) {
  assert(::proto::dota::CMsgGCMsgSetOptions_Option_IsValid(value));
  options_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMsgSetOptions.options)
}
void CMsgGCMsgSetOptions::add_options(::proto::dota::CMsgGCMsgSetOptions_Option value) {
  assert(::proto::dota::CMsgGCMsgSetOptions_Option_IsValid(value));
  options_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCMsgSetOptions.options)
}
const ::google::protobuf::RepeatedField<int>&
CMsgGCMsgSetOptions::options() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCMsgSetOptions.options)
  return options_;
}
::google::protobuf::RepeatedField<int>*
CMsgGCMsgSetOptions::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCMsgSetOptions.options)
  return &options_;
}

// repeated .proto.dota.CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
int CMsgGCMsgSetOptions::client_msg_ranges_size() const {
  return client_msg_ranges_.size();
}
void CMsgGCMsgSetOptions::clear_client_msg_ranges() {
  client_msg_ranges_.Clear();
}
const ::proto::dota::CMsgGCMsgSetOptions_MessageRange& CMsgGCMsgSetOptions::client_msg_ranges(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgSetOptions.client_msg_ranges)
  return client_msg_ranges_.Get(index);
}
::proto::dota::CMsgGCMsgSetOptions_MessageRange* CMsgGCMsgSetOptions::mutable_client_msg_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCMsgSetOptions.client_msg_ranges)
  return client_msg_ranges_.Mutable(index);
}
::proto::dota::CMsgGCMsgSetOptions_MessageRange* CMsgGCMsgSetOptions::add_client_msg_ranges() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCMsgSetOptions.client_msg_ranges)
  return client_msg_ranges_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCMsgSetOptions_MessageRange >*
CMsgGCMsgSetOptions::mutable_client_msg_ranges() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCMsgSetOptions.client_msg_ranges)
  return &client_msg_ranges_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCMsgSetOptions_MessageRange >&
CMsgGCMsgSetOptions::client_msg_ranges() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCMsgSetOptions.client_msg_ranges)
  return client_msg_ranges_;
}

// optional .proto.dota.CMsgGCMsgSetOptions.GCSQLVersion gcsql_version = 3 [default = GCSQL_VERSION_BASELINE];
bool CMsgGCMsgSetOptions::has_gcsql_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCMsgSetOptions::set_has_gcsql_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCMsgSetOptions::clear_has_gcsql_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCMsgSetOptions::clear_gcsql_version() {
  gcsql_version_ = 1;
  clear_has_gcsql_version();
}
::proto::dota::CMsgGCMsgSetOptions_GCSQLVersion CMsgGCMsgSetOptions::gcsql_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCMsgSetOptions.gcsql_version)
  return static_cast< ::proto::dota::CMsgGCMsgSetOptions_GCSQLVersion >(gcsql_version_);
}
void CMsgGCMsgSetOptions::set_gcsql_version(::proto::dota::CMsgGCMsgSetOptions_GCSQLVersion value) {
  assert(::proto::dota::CMsgGCMsgSetOptions_GCSQLVersion_IsValid(value));
  set_has_gcsql_version();
  gcsql_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCMsgSetOptions.gcsql_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCHUpdateSession_ExtraField::kNameFieldNumber;
const int CMsgGCHUpdateSession_ExtraField::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCHUpdateSession_ExtraField::CMsgGCHUpdateSession_ExtraField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCHUpdateSession.ExtraField)
}
CMsgGCHUpdateSession_ExtraField::CMsgGCHUpdateSession_ExtraField(const CMsgGCHUpdateSession_ExtraField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCHUpdateSession.ExtraField)
}

void CMsgGCHUpdateSession_ExtraField::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgGCHUpdateSession_ExtraField::~CMsgGCHUpdateSession_ExtraField() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCHUpdateSession.ExtraField)
  SharedDtor();
}

void CMsgGCHUpdateSession_ExtraField::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCHUpdateSession_ExtraField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCHUpdateSession_ExtraField::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCHUpdateSession_ExtraField& CMsgGCHUpdateSession_ExtraField::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCHUpdateSession_ExtraField* CMsgGCHUpdateSession_ExtraField::New(::google::protobuf::Arena* arena) const {
  CMsgGCHUpdateSession_ExtraField* n = new CMsgGCHUpdateSession_ExtraField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCHUpdateSession_ExtraField::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCHUpdateSession.ExtraField)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCHUpdateSession_ExtraField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCHUpdateSession.ExtraField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCHUpdateSession.ExtraField.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCHUpdateSession.ExtraField.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCHUpdateSession.ExtraField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCHUpdateSession.ExtraField)
  return false;
#undef DO_
}

void CMsgGCHUpdateSession_ExtraField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCHUpdateSession.ExtraField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCHUpdateSession.ExtraField.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCHUpdateSession.ExtraField.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCHUpdateSession.ExtraField)
}

::google::protobuf::uint8* CMsgGCHUpdateSession_ExtraField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCHUpdateSession.ExtraField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCHUpdateSession.ExtraField.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCHUpdateSession.ExtraField.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCHUpdateSession.ExtraField)
  return target;
}

size_t CMsgGCHUpdateSession_ExtraField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCHUpdateSession.ExtraField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCHUpdateSession_ExtraField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCHUpdateSession.ExtraField)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCHUpdateSession_ExtraField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCHUpdateSession_ExtraField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCHUpdateSession.ExtraField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCHUpdateSession.ExtraField)
    MergeFrom(*source);
  }
}

void CMsgGCHUpdateSession_ExtraField::MergeFrom(const CMsgGCHUpdateSession_ExtraField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCHUpdateSession.ExtraField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CMsgGCHUpdateSession_ExtraField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCHUpdateSession.ExtraField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCHUpdateSession_ExtraField::CopyFrom(const CMsgGCHUpdateSession_ExtraField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCHUpdateSession.ExtraField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHUpdateSession_ExtraField::IsInitialized() const {
  return true;
}

void CMsgGCHUpdateSession_ExtraField::Swap(CMsgGCHUpdateSession_ExtraField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCHUpdateSession_ExtraField::InternalSwap(CMsgGCHUpdateSession_ExtraField* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCHUpdateSession_ExtraField::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCHUpdateSession_ExtraField

// optional string name = 1;
bool CMsgGCHUpdateSession_ExtraField::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCHUpdateSession_ExtraField::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCHUpdateSession_ExtraField::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCHUpdateSession_ExtraField::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgGCHUpdateSession_ExtraField::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCHUpdateSession.ExtraField.name)
  return name_.GetNoArena();
}
void CMsgGCHUpdateSession_ExtraField::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCHUpdateSession.ExtraField.name)
}
#if LANG_CXX11
void CMsgGCHUpdateSession_ExtraField::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCHUpdateSession.ExtraField.name)
}
#endif
void CMsgGCHUpdateSession_ExtraField::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCHUpdateSession.ExtraField.name)
}
void CMsgGCHUpdateSession_ExtraField::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCHUpdateSession.ExtraField.name)
}
::std::string* CMsgGCHUpdateSession_ExtraField::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCHUpdateSession.ExtraField.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCHUpdateSession_ExtraField::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCHUpdateSession.ExtraField.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCHUpdateSession_ExtraField::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCHUpdateSession.ExtraField.name)
}

// optional string value = 2;
bool CMsgGCHUpdateSession_ExtraField::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCHUpdateSession_ExtraField::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCHUpdateSession_ExtraField::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCHUpdateSession_ExtraField::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CMsgGCHUpdateSession_ExtraField::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCHUpdateSession.ExtraField.value)
  return value_.GetNoArena();
}
void CMsgGCHUpdateSession_ExtraField::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCHUpdateSession.ExtraField.value)
}
#if LANG_CXX11
void CMsgGCHUpdateSession_ExtraField::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCHUpdateSession.ExtraField.value)
}
#endif
void CMsgGCHUpdateSession_ExtraField::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCHUpdateSession.ExtraField.value)
}
void CMsgGCHUpdateSession_ExtraField::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCHUpdateSession.ExtraField.value)
}
::std::string* CMsgGCHUpdateSession_ExtraField::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCHUpdateSession.ExtraField.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCHUpdateSession_ExtraField::release_value() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCHUpdateSession.ExtraField.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCHUpdateSession_ExtraField::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCHUpdateSession.ExtraField.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCHUpdateSession::kSteamIdFieldNumber;
const int CMsgGCHUpdateSession::kAppIdFieldNumber;
const int CMsgGCHUpdateSession::kOnlineFieldNumber;
const int CMsgGCHUpdateSession::kServerSteamIdFieldNumber;
const int CMsgGCHUpdateSession::kServerAddrFieldNumber;
const int CMsgGCHUpdateSession::kServerPortFieldNumber;
const int CMsgGCHUpdateSession::kOsTypeFieldNumber;
const int CMsgGCHUpdateSession::kClientAddrFieldNumber;
const int CMsgGCHUpdateSession::kExtraFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCHUpdateSession::CMsgGCHUpdateSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCHUpdateSession)
}
CMsgGCHUpdateSession::CMsgGCHUpdateSession(const CMsgGCHUpdateSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      extra_fields_(from.extra_fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&client_addr_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(client_addr_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCHUpdateSession)
}

void CMsgGCHUpdateSession::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&client_addr_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(client_addr_));
}

CMsgGCHUpdateSession::~CMsgGCHUpdateSession() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCHUpdateSession)
  SharedDtor();
}

void CMsgGCHUpdateSession::SharedDtor() {
}

void CMsgGCHUpdateSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCHUpdateSession::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCHUpdateSession& CMsgGCHUpdateSession::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCHUpdateSession* CMsgGCHUpdateSession::New(::google::protobuf::Arena* arena) const {
  CMsgGCHUpdateSession* n = new CMsgGCHUpdateSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCHUpdateSession::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCHUpdateSession)
  extra_fields_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&client_addr_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(client_addr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCHUpdateSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCHUpdateSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool online = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 server_steam_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_server_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_addr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_server_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_port = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_server_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 os_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_os_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &os_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_addr = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_client_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGCHUpdateSession.ExtraField extra_fields = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCHUpdateSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCHUpdateSession)
  return false;
#undef DO_
}

void CMsgGCHUpdateSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCHUpdateSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional bool online = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->online(), output);
  }

  // optional fixed64 server_steam_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->server_steam_id(), output);
  }

  // optional uint32 server_addr = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->server_addr(), output);
  }

  // optional uint32 server_port = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->server_port(), output);
  }

  // optional uint32 os_type = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->os_type(), output);
  }

  // optional uint32 client_addr = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->client_addr(), output);
  }

  // repeated .proto.dota.CMsgGCHUpdateSession.ExtraField extra_fields = 9;
  for (unsigned int i = 0, n = this->extra_fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->extra_fields(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCHUpdateSession)
}

::google::protobuf::uint8* CMsgGCHUpdateSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCHUpdateSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_id(), target);
  }

  // optional bool online = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->online(), target);
  }

  // optional fixed64 server_steam_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->server_steam_id(), target);
  }

  // optional uint32 server_addr = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->server_addr(), target);
  }

  // optional uint32 server_port = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->server_port(), target);
  }

  // optional uint32 os_type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->os_type(), target);
  }

  // optional uint32 client_addr = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->client_addr(), target);
  }

  // repeated .proto.dota.CMsgGCHUpdateSession.ExtraField extra_fields = 9;
  for (unsigned int i = 0, n = this->extra_fields_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->extra_fields(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCHUpdateSession)
  return target;
}

size_t CMsgGCHUpdateSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCHUpdateSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgGCHUpdateSession.ExtraField extra_fields = 9;
  {
    unsigned int count = this->extra_fields_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extra_fields(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional bool online = 3;
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional fixed64 server_steam_id = 4;
    if (has_server_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 server_addr = 5;
    if (has_server_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_addr());
    }

    // optional uint32 server_port = 6;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

    // optional uint32 os_type = 7;
    if (has_os_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->os_type());
    }

    // optional uint32 client_addr = 8;
    if (has_client_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_addr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCHUpdateSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCHUpdateSession)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCHUpdateSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCHUpdateSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCHUpdateSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCHUpdateSession)
    MergeFrom(*source);
  }
}

void CMsgGCHUpdateSession::MergeFrom(const CMsgGCHUpdateSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCHUpdateSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extra_fields_.MergeFrom(from.extra_fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      online_ = from.online_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_addr_ = from.server_addr_;
    }
    if (cached_has_bits & 0x00000020u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00000040u) {
      os_type_ = from.os_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      client_addr_ = from.client_addr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCHUpdateSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCHUpdateSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCHUpdateSession::CopyFrom(const CMsgGCHUpdateSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCHUpdateSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHUpdateSession::IsInitialized() const {
  return true;
}

void CMsgGCHUpdateSession::Swap(CMsgGCHUpdateSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCHUpdateSession::InternalSwap(CMsgGCHUpdateSession* other) {
  extra_fields_.InternalSwap(&other->extra_fields_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(app_id_, other->app_id_);
  std::swap(online_, other->online_);
  std::swap(server_steam_id_, other->server_steam_id_);
  std::swap(server_addr_, other->server_addr_);
  std::swap(server_port_, other->server_port_);
  std::swap(os_type_, other->os_type_);
  std::swap(client_addr_, other->client_addr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCHUpdateSession::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCHUpdateSession

// optional fixed64 steam_id = 1;
bool CMsgGCHUpdateSession::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCHUpdateSession::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCHUpdateSession::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCHUpdateSession::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgGCHUpdateSession::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCHUpdateSession.steam_id)
  return steam_id_;
}
void CMsgGCHUpdateSession::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCHUpdateSession.steam_id)
}

// optional uint32 app_id = 2;
bool CMsgGCHUpdateSession::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCHUpdateSession::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCHUpdateSession::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCHUpdateSession::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgGCHUpdateSession::app_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCHUpdateSession.app_id)
  return app_id_;
}
void CMsgGCHUpdateSession::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCHUpdateSession.app_id)
}

// optional bool online = 3;
bool CMsgGCHUpdateSession::has_online() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCHUpdateSession::set_has_online() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCHUpdateSession::clear_has_online() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCHUpdateSession::clear_online() {
  online_ = false;
  clear_has_online();
}
bool CMsgGCHUpdateSession::online() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCHUpdateSession.online)
  return online_;
}
void CMsgGCHUpdateSession::set_online(bool value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCHUpdateSession.online)
}

// optional fixed64 server_steam_id = 4;
bool CMsgGCHUpdateSession::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGCHUpdateSession::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGCHUpdateSession::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGCHUpdateSession::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
::google::protobuf::uint64 CMsgGCHUpdateSession::server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCHUpdateSession.server_steam_id)
  return server_steam_id_;
}
void CMsgGCHUpdateSession::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCHUpdateSession.server_steam_id)
}

// optional uint32 server_addr = 5;
bool CMsgGCHUpdateSession::has_server_addr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgGCHUpdateSession::set_has_server_addr() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgGCHUpdateSession::clear_has_server_addr() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgGCHUpdateSession::clear_server_addr() {
  server_addr_ = 0u;
  clear_has_server_addr();
}
::google::protobuf::uint32 CMsgGCHUpdateSession::server_addr() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCHUpdateSession.server_addr)
  return server_addr_;
}
void CMsgGCHUpdateSession::set_server_addr(::google::protobuf::uint32 value) {
  set_has_server_addr();
  server_addr_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCHUpdateSession.server_addr)
}

// optional uint32 server_port = 6;
bool CMsgGCHUpdateSession::has_server_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgGCHUpdateSession::set_has_server_port() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgGCHUpdateSession::clear_has_server_port() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgGCHUpdateSession::clear_server_port() {
  server_port_ = 0u;
  clear_has_server_port();
}
::google::protobuf::uint32 CMsgGCHUpdateSession::server_port() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCHUpdateSession.server_port)
  return server_port_;
}
void CMsgGCHUpdateSession::set_server_port(::google::protobuf::uint32 value) {
  set_has_server_port();
  server_port_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCHUpdateSession.server_port)
}

// optional uint32 os_type = 7;
bool CMsgGCHUpdateSession::has_os_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgGCHUpdateSession::set_has_os_type() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgGCHUpdateSession::clear_has_os_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgGCHUpdateSession::clear_os_type() {
  os_type_ = 0u;
  clear_has_os_type();
}
::google::protobuf::uint32 CMsgGCHUpdateSession::os_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCHUpdateSession.os_type)
  return os_type_;
}
void CMsgGCHUpdateSession::set_os_type(::google::protobuf::uint32 value) {
  set_has_os_type();
  os_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCHUpdateSession.os_type)
}

// optional uint32 client_addr = 8;
bool CMsgGCHUpdateSession::has_client_addr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgGCHUpdateSession::set_has_client_addr() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgGCHUpdateSession::clear_has_client_addr() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgGCHUpdateSession::clear_client_addr() {
  client_addr_ = 0u;
  clear_has_client_addr();
}
::google::protobuf::uint32 CMsgGCHUpdateSession::client_addr() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCHUpdateSession.client_addr)
  return client_addr_;
}
void CMsgGCHUpdateSession::set_client_addr(::google::protobuf::uint32 value) {
  set_has_client_addr();
  client_addr_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCHUpdateSession.client_addr)
}

// repeated .proto.dota.CMsgGCHUpdateSession.ExtraField extra_fields = 9;
int CMsgGCHUpdateSession::extra_fields_size() const {
  return extra_fields_.size();
}
void CMsgGCHUpdateSession::clear_extra_fields() {
  extra_fields_.Clear();
}
const ::proto::dota::CMsgGCHUpdateSession_ExtraField& CMsgGCHUpdateSession::extra_fields(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCHUpdateSession.extra_fields)
  return extra_fields_.Get(index);
}
::proto::dota::CMsgGCHUpdateSession_ExtraField* CMsgGCHUpdateSession::mutable_extra_fields(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCHUpdateSession.extra_fields)
  return extra_fields_.Mutable(index);
}
::proto::dota::CMsgGCHUpdateSession_ExtraField* CMsgGCHUpdateSession::add_extra_fields() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCHUpdateSession.extra_fields)
  return extra_fields_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCHUpdateSession_ExtraField >*
CMsgGCHUpdateSession::mutable_extra_fields() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCHUpdateSession.extra_fields)
  return &extra_fields_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCHUpdateSession_ExtraField >&
CMsgGCHUpdateSession::extra_fields() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCHUpdateSession.extra_fields)
  return extra_fields_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::kAppInstanceCountFieldNumber;
const int CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::kOtherSteamidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
}
CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances(const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      other_steamids_(from.other_steamids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_instance_count_ = from.app_instance_count_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::SharedCtor() {
  _cached_size_ = 0;
  app_instance_count_ = 0u;
}

CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::~CMsgNotificationOfSuspiciousActivity_MultipleGameInstances() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  SharedDtor();
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::SharedDtor() {
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::New(::google::protobuf::Arena* arena) const {
  CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* n = new CMsgNotificationOfSuspiciousActivity_MultipleGameInstances;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  other_steamids_.Clear();
  app_instance_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_instance_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_instance_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_instance_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 other_steamids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_other_steamids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_other_steamids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  return false;
#undef DO_
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_instance_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_instance_count(), output);
  }

  // repeated fixed64 other_steamids = 2;
  for (int i = 0, n = this->other_steamids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->other_steamids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
}

::google::protobuf::uint8* CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_instance_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_instance_count(), target);
  }

  // repeated fixed64 other_steamids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->other_steamids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  return target;
}

size_t CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed64 other_steamids = 2;
  {
    unsigned int count = this->other_steamids_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->other_steamids_size());
    total_size += data_size;
  }

  // optional uint32 app_instance_count = 1;
  if (has_app_instance_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->app_instance_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
    MergeFrom(*source);
  }
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::MergeFrom(const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  other_steamids_.MergeFrom(from.other_steamids_);
  if (from.has_app_instance_count()) {
    set_app_instance_count(from.app_instance_count());
  }
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::CopyFrom(const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::IsInitialized() const {
  return true;
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::Swap(CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::InternalSwap(CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* other) {
  other_steamids_.InternalSwap(&other->other_steamids_);
  std::swap(app_instance_count_, other->app_instance_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgNotificationOfSuspiciousActivity_MultipleGameInstances

// optional uint32 app_instance_count = 1;
bool CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::has_app_instance_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::set_has_app_instance_count() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::clear_has_app_instance_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::clear_app_instance_count() {
  app_instance_count_ = 0u;
  clear_has_app_instance_count();
}
::google::protobuf::uint32 CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::app_instance_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.app_instance_count)
  return app_instance_count_;
}
void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::set_app_instance_count(::google::protobuf::uint32 value) {
  set_has_app_instance_count();
  app_instance_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.app_instance_count)
}

// repeated fixed64 other_steamids = 2;
int CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::other_steamids_size() const {
  return other_steamids_.size();
}
void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::clear_other_steamids() {
  other_steamids_.Clear();
}
::google::protobuf::uint64 CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::other_steamids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.other_steamids)
  return other_steamids_.Get(index);
}
void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::set_other_steamids(int index, ::google::protobuf::uint64 value) {
  other_steamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.other_steamids)
}
void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::add_other_steamids(::google::protobuf::uint64 value) {
  other_steamids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.other_steamids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::other_steamids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.other_steamids)
  return other_steamids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::mutable_other_steamids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.other_steamids)
  return &other_steamids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgNotificationOfSuspiciousActivity::kSteamidFieldNumber;
const int CMsgNotificationOfSuspiciousActivity::kAppidFieldNumber;
const int CMsgNotificationOfSuspiciousActivity::kMultipleInstancesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgNotificationOfSuspiciousActivity::CMsgNotificationOfSuspiciousActivity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgNotificationOfSuspiciousActivity)
}
CMsgNotificationOfSuspiciousActivity::CMsgNotificationOfSuspiciousActivity(const CMsgNotificationOfSuspiciousActivity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_multiple_instances()) {
    multiple_instances_ = new ::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances(*from.multiple_instances_);
  } else {
    multiple_instances_ = NULL;
  }
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgNotificationOfSuspiciousActivity)
}

void CMsgNotificationOfSuspiciousActivity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&multiple_instances_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&multiple_instances_) + sizeof(appid_));
}

CMsgNotificationOfSuspiciousActivity::~CMsgNotificationOfSuspiciousActivity() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgNotificationOfSuspiciousActivity)
  SharedDtor();
}

void CMsgNotificationOfSuspiciousActivity::SharedDtor() {
  if (this != internal_default_instance()) {
    delete multiple_instances_;
  }
}

void CMsgNotificationOfSuspiciousActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgNotificationOfSuspiciousActivity::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgNotificationOfSuspiciousActivity& CMsgNotificationOfSuspiciousActivity::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgNotificationOfSuspiciousActivity* CMsgNotificationOfSuspiciousActivity::New(::google::protobuf::Arena* arena) const {
  CMsgNotificationOfSuspiciousActivity* n = new CMsgNotificationOfSuspiciousActivity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgNotificationOfSuspiciousActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgNotificationOfSuspiciousActivity)
  if (has_multiple_instances()) {
    GOOGLE_DCHECK(multiple_instances_ != NULL);
    multiple_instances_->::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgNotificationOfSuspiciousActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgNotificationOfSuspiciousActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multiple_instances()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgNotificationOfSuspiciousActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgNotificationOfSuspiciousActivity)
  return false;
#undef DO_
}

void CMsgNotificationOfSuspiciousActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgNotificationOfSuspiciousActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional .proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->multiple_instances_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgNotificationOfSuspiciousActivity)
}

::google::protobuf::uint8* CMsgNotificationOfSuspiciousActivity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgNotificationOfSuspiciousActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional .proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->multiple_instances_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgNotificationOfSuspiciousActivity)
  return target;
}

size_t CMsgNotificationOfSuspiciousActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgNotificationOfSuspiciousActivity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
    if (has_multiple_instances()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->multiple_instances_);
    }

    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgNotificationOfSuspiciousActivity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgNotificationOfSuspiciousActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgNotificationOfSuspiciousActivity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgNotificationOfSuspiciousActivity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgNotificationOfSuspiciousActivity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgNotificationOfSuspiciousActivity)
    MergeFrom(*source);
  }
}

void CMsgNotificationOfSuspiciousActivity::MergeFrom(const CMsgNotificationOfSuspiciousActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgNotificationOfSuspiciousActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_multiple_instances()->::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::MergeFrom(from.multiple_instances());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgNotificationOfSuspiciousActivity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgNotificationOfSuspiciousActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgNotificationOfSuspiciousActivity::CopyFrom(const CMsgNotificationOfSuspiciousActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgNotificationOfSuspiciousActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotificationOfSuspiciousActivity::IsInitialized() const {
  return true;
}

void CMsgNotificationOfSuspiciousActivity::Swap(CMsgNotificationOfSuspiciousActivity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgNotificationOfSuspiciousActivity::InternalSwap(CMsgNotificationOfSuspiciousActivity* other) {
  std::swap(multiple_instances_, other->multiple_instances_);
  std::swap(steamid_, other->steamid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgNotificationOfSuspiciousActivity::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgNotificationOfSuspiciousActivity

// optional fixed64 steamid = 1;
bool CMsgNotificationOfSuspiciousActivity::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgNotificationOfSuspiciousActivity::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgNotificationOfSuspiciousActivity::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgNotificationOfSuspiciousActivity::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgNotificationOfSuspiciousActivity::steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgNotificationOfSuspiciousActivity.steamid)
  return steamid_;
}
void CMsgNotificationOfSuspiciousActivity::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgNotificationOfSuspiciousActivity.steamid)
}

// optional uint32 appid = 2;
bool CMsgNotificationOfSuspiciousActivity::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgNotificationOfSuspiciousActivity::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgNotificationOfSuspiciousActivity::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgNotificationOfSuspiciousActivity::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMsgNotificationOfSuspiciousActivity::appid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgNotificationOfSuspiciousActivity.appid)
  return appid_;
}
void CMsgNotificationOfSuspiciousActivity::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgNotificationOfSuspiciousActivity.appid)
}

// optional .proto.dota.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
bool CMsgNotificationOfSuspiciousActivity::has_multiple_instances() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgNotificationOfSuspiciousActivity::set_has_multiple_instances() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgNotificationOfSuspiciousActivity::clear_has_multiple_instances() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgNotificationOfSuspiciousActivity::clear_multiple_instances() {
  if (multiple_instances_ != NULL) multiple_instances_->::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::Clear();
  clear_has_multiple_instances();
}
const ::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& CMsgNotificationOfSuspiciousActivity::multiple_instances() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgNotificationOfSuspiciousActivity.multiple_instances)
  return multiple_instances_ != NULL ? *multiple_instances_
                         : *::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::internal_default_instance();
}
::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* CMsgNotificationOfSuspiciousActivity::mutable_multiple_instances() {
  set_has_multiple_instances();
  if (multiple_instances_ == NULL) {
    multiple_instances_ = new ::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgNotificationOfSuspiciousActivity.multiple_instances)
  return multiple_instances_;
}
::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* CMsgNotificationOfSuspiciousActivity::release_multiple_instances() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgNotificationOfSuspiciousActivity.multiple_instances)
  clear_has_multiple_instances();
  ::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* temp = multiple_instances_;
  multiple_instances_ = NULL;
  return temp;
}
void CMsgNotificationOfSuspiciousActivity::set_allocated_multiple_instances(::proto::dota::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* multiple_instances) {
  delete multiple_instances_;
  multiple_instances_ = multiple_instances;
  if (multiple_instances) {
    set_has_multiple_instances();
  } else {
    clear_has_multiple_instances();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgNotificationOfSuspiciousActivity.multiple_instances)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kInitTimeFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kLastUpdateTimeFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kTxnIdFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kAccountIdFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kLineItemFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kItemIdFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kDefIndexFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kPriceFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kTaxFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kPriceUsdFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kTaxUsdFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kPurchaseTypeFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kSteamTxnTypeFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kCountryCodeFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kRegionCodeFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kQuantityFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerMicroTxn::kRefTransIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDPPartnerMicroTxns_PartnerMicroTxn::CMsgDPPartnerMicroTxns_PartnerMicroTxn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
}
CMsgDPPartnerMicroTxns_PartnerMicroTxn::CMsgDPPartnerMicroTxns_PartnerMicroTxn(const CMsgDPPartnerMicroTxns_PartnerMicroTxn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  region_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_region_code()) {
    region_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_code_);
  }
  ::memcpy(&init_time_, &from.init_time_,
    reinterpret_cast<char*>(&ref_trans_id_) -
    reinterpret_cast<char*>(&init_time_) + sizeof(ref_trans_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::SharedCtor() {
  _cached_size_ = 0;
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&init_time_, 0, reinterpret_cast<char*>(&ref_trans_id_) -
    reinterpret_cast<char*>(&init_time_) + sizeof(ref_trans_id_));
}

CMsgDPPartnerMicroTxns_PartnerMicroTxn::~CMsgDPPartnerMicroTxns_PartnerMicroTxn() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  SharedDtor();
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::SharedDtor() {
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDPPartnerMicroTxns_PartnerMicroTxn::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDPPartnerMicroTxns_PartnerMicroTxn& CMsgDPPartnerMicroTxns_PartnerMicroTxn::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDPPartnerMicroTxns_PartnerMicroTxn* CMsgDPPartnerMicroTxns_PartnerMicroTxn::New(::google::protobuf::Arena* arena) const {
  CMsgDPPartnerMicroTxns_PartnerMicroTxn* n = new CMsgDPPartnerMicroTxns_PartnerMicroTxn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_country_code()) {
      GOOGLE_DCHECK(!country_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_region_code()) {
      GOOGLE_DCHECK(!region_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*region_code_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&init_time_, 0, reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&init_time_) + sizeof(item_id_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&def_index_, 0, reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&def_index_) + sizeof(quantity_));
  }
  ref_trans_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 init_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_init_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &init_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_update_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_last_update_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 txn_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_txn_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 line_item = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_line_item();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_item_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 def_index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_def_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 price = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tax = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_tax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 price_usd = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_price_usd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_usd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tax_usd = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_tax_usd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tax_usd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 purchase_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_purchase_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &purchase_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 steam_txn_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_steam_txn_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steam_txn_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_code = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string region_code = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->region_code().data(), this->region_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 quantity = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ref_trans_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_ref_trans_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ref_trans_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  return false;
#undef DO_
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 init_time = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->init_time(), output);
  }

  // optional uint32 last_update_time = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_update_time(), output);
  }

  // optional uint64 txn_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->txn_id(), output);
  }

  // optional uint32 account_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->account_id(), output);
  }

  // optional uint32 line_item = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->line_item(), output);
  }

  // optional uint64 item_id = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->item_id(), output);
  }

  // optional uint32 def_index = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->def_index(), output);
  }

  // optional uint32 price = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->price(), output);
  }

  // optional uint32 tax = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->tax(), output);
  }

  // optional uint32 price_usd = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->price_usd(), output);
  }

  // optional uint32 tax_usd = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->tax_usd(), output);
  }

  // optional uint32 purchase_type = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->purchase_type(), output);
  }

  // optional uint32 steam_txn_type = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->steam_txn_type(), output);
  }

  // optional string country_code = 14;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->country_code(), output);
  }

  // optional string region_code = 15;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->region_code().data(), this->region_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->region_code(), output);
  }

  // optional int32 quantity = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->quantity(), output);
  }

  // optional uint64 ref_trans_id = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->ref_trans_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
}

::google::protobuf::uint8* CMsgDPPartnerMicroTxns_PartnerMicroTxn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 init_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->init_time(), target);
  }

  // optional uint32 last_update_time = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_update_time(), target);
  }

  // optional uint64 txn_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->txn_id(), target);
  }

  // optional uint32 account_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->account_id(), target);
  }

  // optional uint32 line_item = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->line_item(), target);
  }

  // optional uint64 item_id = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->item_id(), target);
  }

  // optional uint32 def_index = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->def_index(), target);
  }

  // optional uint32 price = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->price(), target);
  }

  // optional uint32 tax = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->tax(), target);
  }

  // optional uint32 price_usd = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->price_usd(), target);
  }

  // optional uint32 tax_usd = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->tax_usd(), target);
  }

  // optional uint32 purchase_type = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->purchase_type(), target);
  }

  // optional uint32 steam_txn_type = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->steam_txn_type(), target);
  }

  // optional string country_code = 14;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->country_code(), target);
  }

  // optional string region_code = 15;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->region_code().data(), this->region_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->region_code(), target);
  }

  // optional int32 quantity = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->quantity(), target);
  }

  // optional uint64 ref_trans_id = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->ref_trans_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  return target;
}

size_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string country_code = 14;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string region_code = 15;
    if (has_region_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region_code());
    }

    // optional uint32 init_time = 1;
    if (has_init_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->init_time());
    }

    // optional uint32 last_update_time = 2;
    if (has_last_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_update_time());
    }

    // optional uint64 txn_id = 3;
    if (has_txn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txn_id());
    }

    // optional uint32 account_id = 4;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 line_item = 5;
    if (has_line_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line_item());
    }

    // optional uint64 item_id = 6;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 def_index = 7;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

    // optional uint32 price = 8;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // optional uint32 tax = 9;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tax());
    }

    // optional uint32 price_usd = 10;
    if (has_price_usd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price_usd());
    }

    // optional uint32 tax_usd = 11;
    if (has_tax_usd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tax_usd());
    }

    // optional uint32 purchase_type = 12;
    if (has_purchase_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->purchase_type());
    }

    // optional uint32 steam_txn_type = 13;
    if (has_steam_txn_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steam_txn_type());
    }

    // optional int32 quantity = 16;
    if (has_quantity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }

  }
  // optional uint64 ref_trans_id = 17;
  if (has_ref_trans_id()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ref_trans_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDPPartnerMicroTxns_PartnerMicroTxn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDPPartnerMicroTxns_PartnerMicroTxn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
    MergeFrom(*source);
  }
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::MergeFrom(const CMsgDPPartnerMicroTxns_PartnerMicroTxn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_country_code();
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_region_code();
      region_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      init_time_ = from.init_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_update_time_ = from.last_update_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      txn_id_ = from.txn_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      line_item_ = from.line_item_;
    }
    if (cached_has_bits & 0x00000080u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000200u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000400u) {
      tax_ = from.tax_;
    }
    if (cached_has_bits & 0x00000800u) {
      price_usd_ = from.price_usd_;
    }
    if (cached_has_bits & 0x00001000u) {
      tax_usd_ = from.tax_usd_;
    }
    if (cached_has_bits & 0x00002000u) {
      purchase_type_ = from.purchase_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      steam_txn_type_ = from.steam_txn_type_;
    }
    if (cached_has_bits & 0x00008000u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_ref_trans_id(from.ref_trans_id());
  }
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::CopyFrom(const CMsgDPPartnerMicroTxns_PartnerMicroTxn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::IsInitialized() const {
  return true;
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::Swap(CMsgDPPartnerMicroTxns_PartnerMicroTxn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::InternalSwap(CMsgDPPartnerMicroTxns_PartnerMicroTxn* other) {
  country_code_.Swap(&other->country_code_);
  region_code_.Swap(&other->region_code_);
  std::swap(init_time_, other->init_time_);
  std::swap(last_update_time_, other->last_update_time_);
  std::swap(txn_id_, other->txn_id_);
  std::swap(account_id_, other->account_id_);
  std::swap(line_item_, other->line_item_);
  std::swap(item_id_, other->item_id_);
  std::swap(def_index_, other->def_index_);
  std::swap(price_, other->price_);
  std::swap(tax_, other->tax_);
  std::swap(price_usd_, other->price_usd_);
  std::swap(tax_usd_, other->tax_usd_);
  std::swap(purchase_type_, other->purchase_type_);
  std::swap(steam_txn_type_, other->steam_txn_type_);
  std::swap(quantity_, other->quantity_);
  std::swap(ref_trans_id_, other->ref_trans_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDPPartnerMicroTxns_PartnerMicroTxn::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDPPartnerMicroTxns_PartnerMicroTxn

// optional uint32 init_time = 1;
bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_init_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_has_init_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_has_init_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_init_time() {
  init_time_ = 0u;
  clear_has_init_time();
}
::google::protobuf::uint32 CMsgDPPartnerMicroTxns_PartnerMicroTxn::init_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.init_time)
  return init_time_;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_init_time(::google::protobuf::uint32 value) {
  set_has_init_time();
  init_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.init_time)
}

// optional uint32 last_update_time = 2;
bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_last_update_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_has_last_update_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_has_last_update_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_last_update_time() {
  last_update_time_ = 0u;
  clear_has_last_update_time();
}
::google::protobuf::uint32 CMsgDPPartnerMicroTxns_PartnerMicroTxn::last_update_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.last_update_time)
  return last_update_time_;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_last_update_time(::google::protobuf::uint32 value) {
  set_has_last_update_time();
  last_update_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.last_update_time)
}

// optional uint64 txn_id = 3;
bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_txn_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_has_txn_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_has_txn_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_txn_id() {
  txn_id_ = GOOGLE_ULONGLONG(0);
  clear_has_txn_id();
}
::google::protobuf::uint64 CMsgDPPartnerMicroTxns_PartnerMicroTxn::txn_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.txn_id)
  return txn_id_;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_txn_id(::google::protobuf::uint64 value) {
  set_has_txn_id();
  txn_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.txn_id)
}

// optional uint32 account_id = 4;
bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_account_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_has_account_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDPPartnerMicroTxns_PartnerMicroTxn::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.account_id)
  return account_id_;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.account_id)
}

// optional uint32 line_item = 5;
bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_line_item() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_has_line_item() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_has_line_item() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_line_item() {
  line_item_ = 0u;
  clear_has_line_item();
}
::google::protobuf::uint32 CMsgDPPartnerMicroTxns_PartnerMicroTxn::line_item() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.line_item)
  return line_item_;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_line_item(::google::protobuf::uint32 value) {
  set_has_line_item();
  line_item_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.line_item)
}

// optional uint64 item_id = 6;
bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_item_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_has_item_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
::google::protobuf::uint64 CMsgDPPartnerMicroTxns_PartnerMicroTxn::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.item_id)
  return item_id_;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.item_id)
}

// optional uint32 def_index = 7;
bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_def_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_has_def_index() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
::google::protobuf::uint32 CMsgDPPartnerMicroTxns_PartnerMicroTxn::def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.def_index)
  return def_index_;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.def_index)
}

// optional uint32 price = 8;
bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_has_price() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_has_price() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_price() {
  price_ = 0u;
  clear_has_price();
}
::google::protobuf::uint32 CMsgDPPartnerMicroTxns_PartnerMicroTxn::price() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.price)
  return price_;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.price)
}

// optional uint32 tax = 9;
bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_tax() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_has_tax() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_has_tax() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_tax() {
  tax_ = 0u;
  clear_has_tax();
}
::google::protobuf::uint32 CMsgDPPartnerMicroTxns_PartnerMicroTxn::tax() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.tax)
  return tax_;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_tax(::google::protobuf::uint32 value) {
  set_has_tax();
  tax_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.tax)
}

// optional uint32 price_usd = 10;
bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_price_usd() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_has_price_usd() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_has_price_usd() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_price_usd() {
  price_usd_ = 0u;
  clear_has_price_usd();
}
::google::protobuf::uint32 CMsgDPPartnerMicroTxns_PartnerMicroTxn::price_usd() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.price_usd)
  return price_usd_;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_price_usd(::google::protobuf::uint32 value) {
  set_has_price_usd();
  price_usd_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.price_usd)
}

// optional uint32 tax_usd = 11;
bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_tax_usd() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_has_tax_usd() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_has_tax_usd() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_tax_usd() {
  tax_usd_ = 0u;
  clear_has_tax_usd();
}
::google::protobuf::uint32 CMsgDPPartnerMicroTxns_PartnerMicroTxn::tax_usd() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.tax_usd)
  return tax_usd_;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_tax_usd(::google::protobuf::uint32 value) {
  set_has_tax_usd();
  tax_usd_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.tax_usd)
}

// optional uint32 purchase_type = 12;
bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_purchase_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_has_purchase_type() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_has_purchase_type() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_purchase_type() {
  purchase_type_ = 0u;
  clear_has_purchase_type();
}
::google::protobuf::uint32 CMsgDPPartnerMicroTxns_PartnerMicroTxn::purchase_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.purchase_type)
  return purchase_type_;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_purchase_type(::google::protobuf::uint32 value) {
  set_has_purchase_type();
  purchase_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.purchase_type)
}

// optional uint32 steam_txn_type = 13;
bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_steam_txn_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_has_steam_txn_type() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_has_steam_txn_type() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_steam_txn_type() {
  steam_txn_type_ = 0u;
  clear_has_steam_txn_type();
}
::google::protobuf::uint32 CMsgDPPartnerMicroTxns_PartnerMicroTxn::steam_txn_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.steam_txn_type)
  return steam_txn_type_;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_steam_txn_type(::google::protobuf::uint32 value) {
  set_has_steam_txn_type();
  steam_txn_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.steam_txn_type)
}

// optional string country_code = 14;
bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_country_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_has_country_code() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
const ::std::string& CMsgDPPartnerMicroTxns_PartnerMicroTxn::country_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code)
  return country_code_.GetNoArena();
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code)
}
#if LANG_CXX11
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code)
}
#endif
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code)
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code)
}
::std::string* CMsgDPPartnerMicroTxns_PartnerMicroTxn::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDPPartnerMicroTxns_PartnerMicroTxn::release_country_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code)
}

// optional string region_code = 15;
bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_region_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_has_region_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_has_region_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_region_code() {
  region_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_region_code();
}
const ::std::string& CMsgDPPartnerMicroTxns_PartnerMicroTxn::region_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code)
  return region_code_.GetNoArena();
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_region_code(const ::std::string& value) {
  set_has_region_code();
  region_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code)
}
#if LANG_CXX11
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_region_code(::std::string&& value) {
  set_has_region_code();
  region_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code)
}
#endif
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_region_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_region_code();
  region_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code)
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_region_code(const char* value, size_t size) {
  set_has_region_code();
  region_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code)
}
::std::string* CMsgDPPartnerMicroTxns_PartnerMicroTxn::mutable_region_code() {
  set_has_region_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code)
  return region_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDPPartnerMicroTxns_PartnerMicroTxn::release_region_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code)
  clear_has_region_code();
  return region_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_allocated_region_code(::std::string* region_code) {
  if (region_code != NULL) {
    set_has_region_code();
  } else {
    clear_has_region_code();
  }
  region_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code)
}

// optional int32 quantity = 16;
bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_quantity() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_has_quantity() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_has_quantity() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_quantity() {
  quantity_ = 0;
  clear_has_quantity();
}
::google::protobuf::int32 CMsgDPPartnerMicroTxns_PartnerMicroTxn::quantity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.quantity)
  return quantity_;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_quantity(::google::protobuf::int32 value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.quantity)
}

// optional uint64 ref_trans_id = 17;
bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::has_ref_trans_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_has_ref_trans_id() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_has_ref_trans_id() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::clear_ref_trans_id() {
  ref_trans_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ref_trans_id();
}
::google::protobuf::uint64 CMsgDPPartnerMicroTxns_PartnerMicroTxn::ref_trans_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.ref_trans_id)
  return ref_trans_id_;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::set_ref_trans_id(::google::protobuf::uint64 value) {
  set_has_ref_trans_id();
  ref_trans_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn.ref_trans_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDPPartnerMicroTxns_PartnerInfo::kPartnerIdFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerInfo::kPartnerNameFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerInfo::kCurrencyCodeFieldNumber;
const int CMsgDPPartnerMicroTxns_PartnerInfo::kCurrencyNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDPPartnerMicroTxns_PartnerInfo::CMsgDPPartnerMicroTxns_PartnerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
}
CMsgDPPartnerMicroTxns_PartnerInfo::CMsgDPPartnerMicroTxns_PartnerInfo(const CMsgDPPartnerMicroTxns_PartnerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_partner_name()) {
    partner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partner_name_);
  }
  currency_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency_code()) {
    currency_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_code_);
  }
  currency_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency_name()) {
    currency_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_name_);
  }
  partner_id_ = from.partner_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
}

void CMsgDPPartnerMicroTxns_PartnerInfo::SharedCtor() {
  _cached_size_ = 0;
  partner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partner_id_ = 0u;
}

CMsgDPPartnerMicroTxns_PartnerInfo::~CMsgDPPartnerMicroTxns_PartnerInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  SharedDtor();
}

void CMsgDPPartnerMicroTxns_PartnerInfo::SharedDtor() {
  partner_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDPPartnerMicroTxns_PartnerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDPPartnerMicroTxns_PartnerInfo::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDPPartnerMicroTxns_PartnerInfo& CMsgDPPartnerMicroTxns_PartnerInfo::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDPPartnerMicroTxns_PartnerInfo* CMsgDPPartnerMicroTxns_PartnerInfo::New(::google::protobuf::Arena* arena) const {
  CMsgDPPartnerMicroTxns_PartnerInfo* n = new CMsgDPPartnerMicroTxns_PartnerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDPPartnerMicroTxns_PartnerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_partner_name()) {
      GOOGLE_DCHECK(!partner_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*partner_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_currency_code()) {
      GOOGLE_DCHECK(!currency_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*currency_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_currency_name()) {
      GOOGLE_DCHECK(!currency_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*currency_name_.UnsafeRawStringPointer())->clear();
    }
  }
  partner_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDPPartnerMicroTxns_PartnerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 partner_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_partner_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string partner_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->partner_name().data(), this->partner_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.partner_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string currency_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency_code().data(), this->currency_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string currency_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency_name().data(), this->currency_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  return false;
#undef DO_
}

void CMsgDPPartnerMicroTxns_PartnerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 partner_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->partner_id(), output);
  }

  // optional string partner_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partner_name().data(), this->partner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.partner_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->partner_name(), output);
  }

  // optional string currency_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency_code().data(), this->currency_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->currency_code(), output);
  }

  // optional string currency_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency_name().data(), this->currency_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->currency_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
}

::google::protobuf::uint8* CMsgDPPartnerMicroTxns_PartnerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 partner_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->partner_id(), target);
  }

  // optional string partner_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partner_name().data(), this->partner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.partner_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->partner_name(), target);
  }

  // optional string currency_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency_code().data(), this->currency_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->currency_code(), target);
  }

  // optional string currency_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency_name().data(), this->currency_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->currency_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  return target;
}

size_t CMsgDPPartnerMicroTxns_PartnerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string partner_name = 2;
    if (has_partner_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partner_name());
    }

    // optional string currency_code = 3;
    if (has_currency_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_code());
    }

    // optional string currency_name = 4;
    if (has_currency_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_name());
    }

    // optional uint32 partner_id = 1;
    if (has_partner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partner_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDPPartnerMicroTxns_PartnerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDPPartnerMicroTxns_PartnerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDPPartnerMicroTxns_PartnerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
    MergeFrom(*source);
  }
}

void CMsgDPPartnerMicroTxns_PartnerInfo::MergeFrom(const CMsgDPPartnerMicroTxns_PartnerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_partner_name();
      partner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partner_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_currency_code();
      currency_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_currency_name();
      currency_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      partner_id_ = from.partner_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDPPartnerMicroTxns_PartnerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDPPartnerMicroTxns_PartnerInfo::CopyFrom(const CMsgDPPartnerMicroTxns_PartnerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPPartnerMicroTxns_PartnerInfo::IsInitialized() const {
  return true;
}

void CMsgDPPartnerMicroTxns_PartnerInfo::Swap(CMsgDPPartnerMicroTxns_PartnerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDPPartnerMicroTxns_PartnerInfo::InternalSwap(CMsgDPPartnerMicroTxns_PartnerInfo* other) {
  partner_name_.Swap(&other->partner_name_);
  currency_code_.Swap(&other->currency_code_);
  currency_name_.Swap(&other->currency_name_);
  std::swap(partner_id_, other->partner_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDPPartnerMicroTxns_PartnerInfo::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDPPartnerMicroTxns_PartnerInfo

// optional uint32 partner_id = 1;
bool CMsgDPPartnerMicroTxns_PartnerInfo::has_partner_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerInfo::set_has_partner_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDPPartnerMicroTxns_PartnerInfo::clear_has_partner_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDPPartnerMicroTxns_PartnerInfo::clear_partner_id() {
  partner_id_ = 0u;
  clear_has_partner_id();
}
::google::protobuf::uint32 CMsgDPPartnerMicroTxns_PartnerInfo::partner_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.partner_id)
  return partner_id_;
}
void CMsgDPPartnerMicroTxns_PartnerInfo::set_partner_id(::google::protobuf::uint32 value) {
  set_has_partner_id();
  partner_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.partner_id)
}

// optional string partner_name = 2;
bool CMsgDPPartnerMicroTxns_PartnerInfo::has_partner_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerInfo::set_has_partner_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDPPartnerMicroTxns_PartnerInfo::clear_has_partner_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDPPartnerMicroTxns_PartnerInfo::clear_partner_name() {
  partner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_partner_name();
}
const ::std::string& CMsgDPPartnerMicroTxns_PartnerInfo::partner_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.partner_name)
  return partner_name_.GetNoArena();
}
void CMsgDPPartnerMicroTxns_PartnerInfo::set_partner_name(const ::std::string& value) {
  set_has_partner_name();
  partner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.partner_name)
}
#if LANG_CXX11
void CMsgDPPartnerMicroTxns_PartnerInfo::set_partner_name(::std::string&& value) {
  set_has_partner_name();
  partner_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.partner_name)
}
#endif
void CMsgDPPartnerMicroTxns_PartnerInfo::set_partner_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_partner_name();
  partner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.partner_name)
}
void CMsgDPPartnerMicroTxns_PartnerInfo::set_partner_name(const char* value, size_t size) {
  set_has_partner_name();
  partner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.partner_name)
}
::std::string* CMsgDPPartnerMicroTxns_PartnerInfo::mutable_partner_name() {
  set_has_partner_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.partner_name)
  return partner_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDPPartnerMicroTxns_PartnerInfo::release_partner_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.partner_name)
  clear_has_partner_name();
  return partner_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDPPartnerMicroTxns_PartnerInfo::set_allocated_partner_name(::std::string* partner_name) {
  if (partner_name != NULL) {
    set_has_partner_name();
  } else {
    clear_has_partner_name();
  }
  partner_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partner_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.partner_name)
}

// optional string currency_code = 3;
bool CMsgDPPartnerMicroTxns_PartnerInfo::has_currency_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerInfo::set_has_currency_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDPPartnerMicroTxns_PartnerInfo::clear_has_currency_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDPPartnerMicroTxns_PartnerInfo::clear_currency_code() {
  currency_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currency_code();
}
const ::std::string& CMsgDPPartnerMicroTxns_PartnerInfo::currency_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_code)
  return currency_code_.GetNoArena();
}
void CMsgDPPartnerMicroTxns_PartnerInfo::set_currency_code(const ::std::string& value) {
  set_has_currency_code();
  currency_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_code)
}
#if LANG_CXX11
void CMsgDPPartnerMicroTxns_PartnerInfo::set_currency_code(::std::string&& value) {
  set_has_currency_code();
  currency_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_code)
}
#endif
void CMsgDPPartnerMicroTxns_PartnerInfo::set_currency_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_currency_code();
  currency_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_code)
}
void CMsgDPPartnerMicroTxns_PartnerInfo::set_currency_code(const char* value, size_t size) {
  set_has_currency_code();
  currency_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_code)
}
::std::string* CMsgDPPartnerMicroTxns_PartnerInfo::mutable_currency_code() {
  set_has_currency_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_code)
  return currency_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDPPartnerMicroTxns_PartnerInfo::release_currency_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_code)
  clear_has_currency_code();
  return currency_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDPPartnerMicroTxns_PartnerInfo::set_allocated_currency_code(::std::string* currency_code) {
  if (currency_code != NULL) {
    set_has_currency_code();
  } else {
    clear_has_currency_code();
  }
  currency_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_code)
}

// optional string currency_name = 4;
bool CMsgDPPartnerMicroTxns_PartnerInfo::has_currency_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDPPartnerMicroTxns_PartnerInfo::set_has_currency_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDPPartnerMicroTxns_PartnerInfo::clear_has_currency_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDPPartnerMicroTxns_PartnerInfo::clear_currency_name() {
  currency_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currency_name();
}
const ::std::string& CMsgDPPartnerMicroTxns_PartnerInfo::currency_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_name)
  return currency_name_.GetNoArena();
}
void CMsgDPPartnerMicroTxns_PartnerInfo::set_currency_name(const ::std::string& value) {
  set_has_currency_name();
  currency_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_name)
}
#if LANG_CXX11
void CMsgDPPartnerMicroTxns_PartnerInfo::set_currency_name(::std::string&& value) {
  set_has_currency_name();
  currency_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_name)
}
#endif
void CMsgDPPartnerMicroTxns_PartnerInfo::set_currency_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_currency_name();
  currency_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_name)
}
void CMsgDPPartnerMicroTxns_PartnerInfo::set_currency_name(const char* value, size_t size) {
  set_has_currency_name();
  currency_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_name)
}
::std::string* CMsgDPPartnerMicroTxns_PartnerInfo::mutable_currency_name() {
  set_has_currency_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_name)
  return currency_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDPPartnerMicroTxns_PartnerInfo::release_currency_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_name)
  clear_has_currency_name();
  return currency_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDPPartnerMicroTxns_PartnerInfo::set_allocated_currency_name(::std::string* currency_name) {
  if (currency_name != NULL) {
    set_has_currency_name();
  } else {
    clear_has_currency_name();
  }
  currency_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo.currency_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDPPartnerMicroTxns::kAppidFieldNumber;
const int CMsgDPPartnerMicroTxns::kGcNameFieldNumber;
const int CMsgDPPartnerMicroTxns::kPartnerFieldNumber;
const int CMsgDPPartnerMicroTxns::kTransactionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDPPartnerMicroTxns::CMsgDPPartnerMicroTxns()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDPPartnerMicroTxns)
}
CMsgDPPartnerMicroTxns::CMsgDPPartnerMicroTxns(const CMsgDPPartnerMicroTxns& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gc_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gc_name()) {
    gc_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gc_name_);
  }
  if (from.has_partner()) {
    partner_ = new ::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo(*from.partner_);
  } else {
    partner_ = NULL;
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDPPartnerMicroTxns)
}

void CMsgDPPartnerMicroTxns::SharedCtor() {
  _cached_size_ = 0;
  gc_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&partner_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&partner_) + sizeof(appid_));
}

CMsgDPPartnerMicroTxns::~CMsgDPPartnerMicroTxns() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDPPartnerMicroTxns)
  SharedDtor();
}

void CMsgDPPartnerMicroTxns::SharedDtor() {
  gc_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete partner_;
  }
}

void CMsgDPPartnerMicroTxns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDPPartnerMicroTxns::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDPPartnerMicroTxns& CMsgDPPartnerMicroTxns::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDPPartnerMicroTxns* CMsgDPPartnerMicroTxns::New(::google::protobuf::Arena* arena) const {
  CMsgDPPartnerMicroTxns* n = new CMsgDPPartnerMicroTxns;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDPPartnerMicroTxns::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDPPartnerMicroTxns)
  transactions_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_gc_name()) {
      GOOGLE_DCHECK(!gc_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gc_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_partner()) {
      GOOGLE_DCHECK(partner_ != NULL);
      partner_->::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo::Clear();
    }
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDPPartnerMicroTxns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDPPartnerMicroTxns)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gc_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gc_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gc_name().data(), this->gc_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDPPartnerMicroTxns.gc_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transactions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDPPartnerMicroTxns)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDPPartnerMicroTxns)
  return false;
#undef DO_
}

void CMsgDPPartnerMicroTxns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDPPartnerMicroTxns)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string gc_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gc_name().data(), this->gc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.gc_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gc_name(), output);
  }

  // optional .proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->partner_, output);
  }

  // repeated .proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
  for (unsigned int i = 0, n = this->transactions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->transactions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDPPartnerMicroTxns)
}

::google::protobuf::uint8* CMsgDPPartnerMicroTxns::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDPPartnerMicroTxns)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string gc_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gc_name().data(), this->gc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDPPartnerMicroTxns.gc_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gc_name(), target);
  }

  // optional .proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->partner_, deterministic, target);
  }

  // repeated .proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
  for (unsigned int i = 0, n = this->transactions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->transactions(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDPPartnerMicroTxns)
  return target;
}

size_t CMsgDPPartnerMicroTxns::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDPPartnerMicroTxns)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
  {
    unsigned int count = this->transactions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transactions(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string gc_name = 2;
    if (has_gc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gc_name());
    }

    // optional .proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
    if (has_partner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->partner_);
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDPPartnerMicroTxns::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDPPartnerMicroTxns)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDPPartnerMicroTxns* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDPPartnerMicroTxns>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDPPartnerMicroTxns)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDPPartnerMicroTxns)
    MergeFrom(*source);
  }
}

void CMsgDPPartnerMicroTxns::MergeFrom(const CMsgDPPartnerMicroTxns& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDPPartnerMicroTxns)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gc_name();
      gc_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gc_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_partner()->::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo::MergeFrom(from.partner());
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDPPartnerMicroTxns::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDPPartnerMicroTxns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDPPartnerMicroTxns::CopyFrom(const CMsgDPPartnerMicroTxns& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDPPartnerMicroTxns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPPartnerMicroTxns::IsInitialized() const {
  return true;
}

void CMsgDPPartnerMicroTxns::Swap(CMsgDPPartnerMicroTxns* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDPPartnerMicroTxns::InternalSwap(CMsgDPPartnerMicroTxns* other) {
  transactions_.InternalSwap(&other->transactions_);
  gc_name_.Swap(&other->gc_name_);
  std::swap(partner_, other->partner_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDPPartnerMicroTxns::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDPPartnerMicroTxns

// optional uint32 appid = 1;
bool CMsgDPPartnerMicroTxns::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDPPartnerMicroTxns::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDPPartnerMicroTxns::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDPPartnerMicroTxns::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMsgDPPartnerMicroTxns::appid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.appid)
  return appid_;
}
void CMsgDPPartnerMicroTxns::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.appid)
}

// optional string gc_name = 2;
bool CMsgDPPartnerMicroTxns::has_gc_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDPPartnerMicroTxns::set_has_gc_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDPPartnerMicroTxns::clear_has_gc_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDPPartnerMicroTxns::clear_gc_name() {
  gc_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gc_name();
}
const ::std::string& CMsgDPPartnerMicroTxns::gc_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.gc_name)
  return gc_name_.GetNoArena();
}
void CMsgDPPartnerMicroTxns::set_gc_name(const ::std::string& value) {
  set_has_gc_name();
  gc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxns.gc_name)
}
#if LANG_CXX11
void CMsgDPPartnerMicroTxns::set_gc_name(::std::string&& value) {
  set_has_gc_name();
  gc_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDPPartnerMicroTxns.gc_name)
}
#endif
void CMsgDPPartnerMicroTxns::set_gc_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gc_name();
  gc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDPPartnerMicroTxns.gc_name)
}
void CMsgDPPartnerMicroTxns::set_gc_name(const char* value, size_t size) {
  set_has_gc_name();
  gc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDPPartnerMicroTxns.gc_name)
}
::std::string* CMsgDPPartnerMicroTxns::mutable_gc_name() {
  set_has_gc_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDPPartnerMicroTxns.gc_name)
  return gc_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDPPartnerMicroTxns::release_gc_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDPPartnerMicroTxns.gc_name)
  clear_has_gc_name();
  return gc_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDPPartnerMicroTxns::set_allocated_gc_name(::std::string* gc_name) {
  if (gc_name != NULL) {
    set_has_gc_name();
  } else {
    clear_has_gc_name();
  }
  gc_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gc_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDPPartnerMicroTxns.gc_name)
}

// optional .proto.dota.CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
bool CMsgDPPartnerMicroTxns::has_partner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDPPartnerMicroTxns::set_has_partner() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDPPartnerMicroTxns::clear_has_partner() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDPPartnerMicroTxns::clear_partner() {
  if (partner_ != NULL) partner_->::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo::Clear();
  clear_has_partner();
}
const ::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo& CMsgDPPartnerMicroTxns::partner() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.partner)
  return partner_ != NULL ? *partner_
                         : *::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo::internal_default_instance();
}
::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo* CMsgDPPartnerMicroTxns::mutable_partner() {
  set_has_partner();
  if (partner_ == NULL) {
    partner_ = new ::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDPPartnerMicroTxns.partner)
  return partner_;
}
::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo* CMsgDPPartnerMicroTxns::release_partner() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDPPartnerMicroTxns.partner)
  clear_has_partner();
  ::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo* temp = partner_;
  partner_ = NULL;
  return temp;
}
void CMsgDPPartnerMicroTxns::set_allocated_partner(::proto::dota::CMsgDPPartnerMicroTxns_PartnerInfo* partner) {
  delete partner_;
  partner_ = partner;
  if (partner) {
    set_has_partner();
  } else {
    clear_has_partner();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDPPartnerMicroTxns.partner)
}

// repeated .proto.dota.CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
int CMsgDPPartnerMicroTxns::transactions_size() const {
  return transactions_.size();
}
void CMsgDPPartnerMicroTxns::clear_transactions() {
  transactions_.Clear();
}
const ::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn& CMsgDPPartnerMicroTxns::transactions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxns.transactions)
  return transactions_.Get(index);
}
::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn* CMsgDPPartnerMicroTxns::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDPPartnerMicroTxns.transactions)
  return transactions_.Mutable(index);
}
::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn* CMsgDPPartnerMicroTxns::add_transactions() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDPPartnerMicroTxns.transactions)
  return transactions_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn >*
CMsgDPPartnerMicroTxns::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDPPartnerMicroTxns.transactions)
  return &transactions_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDPPartnerMicroTxns_PartnerMicroTxn >&
CMsgDPPartnerMicroTxns::transactions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDPPartnerMicroTxns.transactions)
  return transactions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDPPartnerMicroTxnsResponse::kEresultFieldNumber;
const int CMsgDPPartnerMicroTxnsResponse::kEerrorcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDPPartnerMicroTxnsResponse::CMsgDPPartnerMicroTxnsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDPPartnerMicroTxnsResponse)
}
CMsgDPPartnerMicroTxnsResponse::CMsgDPPartnerMicroTxnsResponse(const CMsgDPPartnerMicroTxnsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eerrorcode_, &from.eerrorcode_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&eerrorcode_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDPPartnerMicroTxnsResponse)
}

void CMsgDPPartnerMicroTxnsResponse::SharedCtor() {
  _cached_size_ = 0;
  eerrorcode_ = 0;
  eresult_ = 2u;
}

CMsgDPPartnerMicroTxnsResponse::~CMsgDPPartnerMicroTxnsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  SharedDtor();
}

void CMsgDPPartnerMicroTxnsResponse::SharedDtor() {
}

void CMsgDPPartnerMicroTxnsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDPPartnerMicroTxnsResponse::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDPPartnerMicroTxnsResponse& CMsgDPPartnerMicroTxnsResponse::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDPPartnerMicroTxnsResponse* CMsgDPPartnerMicroTxnsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDPPartnerMicroTxnsResponse* n = new CMsgDPPartnerMicroTxnsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDPPartnerMicroTxnsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  if (_has_bits_[0 / 32] & 3u) {
    eerrorcode_ = 0;
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDPPartnerMicroTxnsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDPPartnerMicroTxnsResponse_EErrorCode_IsValid(value)) {
            set_eerrorcode(static_cast< ::proto::dota::CMsgDPPartnerMicroTxnsResponse_EErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  return false;
#undef DO_
}

void CMsgDPPartnerMicroTxnsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional .proto.dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eerrorcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDPPartnerMicroTxnsResponse)
}

::google::protobuf::uint8* CMsgDPPartnerMicroTxnsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eresult(), target);
  }

  // optional .proto.dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eerrorcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  return target;
}

size_t CMsgDPPartnerMicroTxnsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
    if (has_eerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eerrorcode());
    }

    // optional uint32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDPPartnerMicroTxnsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDPPartnerMicroTxnsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDPPartnerMicroTxnsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDPPartnerMicroTxnsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDPPartnerMicroTxnsResponse)
    MergeFrom(*source);
  }
}

void CMsgDPPartnerMicroTxnsResponse::MergeFrom(const CMsgDPPartnerMicroTxnsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      eerrorcode_ = from.eerrorcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDPPartnerMicroTxnsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDPPartnerMicroTxnsResponse::CopyFrom(const CMsgDPPartnerMicroTxnsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDPPartnerMicroTxnsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPPartnerMicroTxnsResponse::IsInitialized() const {
  return true;
}

void CMsgDPPartnerMicroTxnsResponse::Swap(CMsgDPPartnerMicroTxnsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDPPartnerMicroTxnsResponse::InternalSwap(CMsgDPPartnerMicroTxnsResponse* other) {
  std::swap(eerrorcode_, other->eerrorcode_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDPPartnerMicroTxnsResponse::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDPPartnerMicroTxnsResponse

// optional uint32 eresult = 1 [default = 2];
bool CMsgDPPartnerMicroTxnsResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDPPartnerMicroTxnsResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDPPartnerMicroTxnsResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDPPartnerMicroTxnsResponse::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
::google::protobuf::uint32 CMsgDPPartnerMicroTxnsResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxnsResponse.eresult)
  return eresult_;
}
void CMsgDPPartnerMicroTxnsResponse::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxnsResponse.eresult)
}

// optional .proto.dota.CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
bool CMsgDPPartnerMicroTxnsResponse::has_eerrorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDPPartnerMicroTxnsResponse::set_has_eerrorcode() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDPPartnerMicroTxnsResponse::clear_has_eerrorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDPPartnerMicroTxnsResponse::clear_eerrorcode() {
  eerrorcode_ = 0;
  clear_has_eerrorcode();
}
::proto::dota::CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::eerrorcode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDPPartnerMicroTxnsResponse.eerrorcode)
  return static_cast< ::proto::dota::CMsgDPPartnerMicroTxnsResponse_EErrorCode >(eerrorcode_);
}
void CMsgDPPartnerMicroTxnsResponse::set_eerrorcode(::proto::dota::CMsgDPPartnerMicroTxnsResponse_EErrorCode value) {
  assert(::proto::dota::CMsgDPPartnerMicroTxnsResponse_EErrorCode_IsValid(value));
  set_has_eerrorcode();
  eerrorcode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDPPartnerMicroTxnsResponse.eerrorcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCHVacVerificationChange::kSteamidFieldNumber;
const int CMsgGCHVacVerificationChange::kAppidFieldNumber;
const int CMsgGCHVacVerificationChange::kIsVerifiedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCHVacVerificationChange)
}
CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange(const CMsgGCHVacVerificationChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&is_verified_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(is_verified_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCHVacVerificationChange)
}

void CMsgGCHVacVerificationChange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&is_verified_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(is_verified_));
}

CMsgGCHVacVerificationChange::~CMsgGCHVacVerificationChange() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCHVacVerificationChange)
  SharedDtor();
}

void CMsgGCHVacVerificationChange::SharedDtor() {
}

void CMsgGCHVacVerificationChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCHVacVerificationChange::descriptor() {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCHVacVerificationChange& CMsgGCHVacVerificationChange::default_instance() {
  protobuf_steammessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCHVacVerificationChange* CMsgGCHVacVerificationChange::New(::google::protobuf::Arena* arena) const {
  CMsgGCHVacVerificationChange* n = new CMsgGCHVacVerificationChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCHVacVerificationChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCHVacVerificationChange)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&is_verified_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(is_verified_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCHVacVerificationChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCHVacVerificationChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_verified = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_verified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCHVacVerificationChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCHVacVerificationChange)
  return false;
#undef DO_
}

void CMsgGCHVacVerificationChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCHVacVerificationChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional bool is_verified = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_verified(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCHVacVerificationChange)
}

::google::protobuf::uint8* CMsgGCHVacVerificationChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCHVacVerificationChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional bool is_verified = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_verified(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCHVacVerificationChange)
  return target;
}

size_t CMsgGCHVacVerificationChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCHVacVerificationChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool is_verified = 3;
    if (has_is_verified()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCHVacVerificationChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCHVacVerificationChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCHVacVerificationChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCHVacVerificationChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCHVacVerificationChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCHVacVerificationChange)
    MergeFrom(*source);
  }
}

void CMsgGCHVacVerificationChange::MergeFrom(const CMsgGCHVacVerificationChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCHVacVerificationChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_verified_ = from.is_verified_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCHVacVerificationChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCHVacVerificationChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCHVacVerificationChange::CopyFrom(const CMsgGCHVacVerificationChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCHVacVerificationChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHVacVerificationChange::IsInitialized() const {
  return true;
}

void CMsgGCHVacVerificationChange::Swap(CMsgGCHVacVerificationChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCHVacVerificationChange::InternalSwap(CMsgGCHVacVerificationChange* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(appid_, other->appid_);
  std::swap(is_verified_, other->is_verified_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCHVacVerificationChange::GetMetadata() const {
  protobuf_steammessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCHVacVerificationChange

// optional fixed64 steamid = 1;
bool CMsgGCHVacVerificationChange::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCHVacVerificationChange::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCHVacVerificationChange::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCHVacVerificationChange::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgGCHVacVerificationChange::steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCHVacVerificationChange.steamid)
  return steamid_;
}
void CMsgGCHVacVerificationChange::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCHVacVerificationChange.steamid)
}

// optional uint32 appid = 2;
bool CMsgGCHVacVerificationChange::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCHVacVerificationChange::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCHVacVerificationChange::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCHVacVerificationChange::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMsgGCHVacVerificationChange::appid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCHVacVerificationChange.appid)
  return appid_;
}
void CMsgGCHVacVerificationChange::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCHVacVerificationChange.appid)
}

// optional bool is_verified = 3;
bool CMsgGCHVacVerificationChange::has_is_verified() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCHVacVerificationChange::set_has_is_verified() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCHVacVerificationChange::clear_has_is_verified() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCHVacVerificationChange::clear_is_verified() {
  is_verified_ = false;
  clear_has_is_verified();
}
bool CMsgGCHVacVerificationChange::is_verified() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCHVacVerificationChange.is_verified)
  return is_verified_;
}
void CMsgGCHVacVerificationChange::set_is_verified(bool value) {
  set_has_is_verified();
  is_verified_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCHVacVerificationChange.is_verified)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  key_field(kKeyFieldFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  msgpool_soft_limit(kMsgpoolSoftLimitFieldNumber, 32);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  msgpool_hard_limit(kMsgpoolHardLimitFieldNumber, 384);

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
