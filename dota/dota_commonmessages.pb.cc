// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_commonmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_commonmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CDOTAMsg_LocationPingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMsg_LocationPing> {
} _CDOTAMsg_LocationPing_default_instance_;
class CDOTAMsg_ItemAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMsg_ItemAlert> {
} _CDOTAMsg_ItemAlert_default_instance_;
class CDOTAMsg_MapLineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMsg_MapLine> {
} _CDOTAMsg_MapLine_default_instance_;
class CDOTAMsg_WorldLineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMsg_WorldLine> {
} _CDOTAMsg_WorldLine_default_instance_;
class CDOTAMsg_SendStatPopupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMsg_SendStatPopup> {
} _CDOTAMsg_SendStatPopup_default_instance_;
class CDOTAMsg_DismissAllStatPopupsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMsg_DismissAllStatPopups> {
} _CDOTAMsg_DismissAllStatPopups_default_instance_;
class CDOTAMsg_CoachHUDPingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMsg_CoachHUDPing> {
} _CDOTAMsg_CoachHUDPing_default_instance_;
class CDOTAMsg_UnitOrderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMsg_UnitOrder> {
} _CDOTAMsg_UnitOrder_default_instance_;

namespace protobuf_dota_5fcommonmessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_LocationPing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_LocationPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_LocationPing, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_LocationPing, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_LocationPing, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_LocationPing, direct_ping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_LocationPing, type_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_ItemAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_ItemAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_ItemAlert, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_ItemAlert, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_ItemAlert, itemid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_MapLine, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_MapLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_MapLine, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_MapLine, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_MapLine, initial_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_WorldLine, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_WorldLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_WorldLine, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_WorldLine, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_WorldLine, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_WorldLine, initial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_WorldLine, end_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_SendStatPopup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_SendStatPopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_SendStatPopup, style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_SendStatPopup, stat_strings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_SendStatPopup, stat_images_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_SendStatPopup, stat_image_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_SendStatPopup, duration_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_DismissAllStatPopups, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_DismissAllStatPopups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_DismissAllStatPopups, time_delay_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_CoachHUDPing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_CoachHUDPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_CoachHUDPing, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_CoachHUDPing, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_CoachHUDPing, tgtpath_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_UnitOrder, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_UnitOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_UnitOrder, issuer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_UnitOrder, order_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_UnitOrder, units_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_UnitOrder, target_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_UnitOrder, ability_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_UnitOrder, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_UnitOrder, queue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMsg_UnitOrder, sequence_number_),
  6,
  1,
  ~0u,
  2,
  3,
  0,
  4,
  5,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(CDOTAMsg_LocationPing)},
  { 15, 23, sizeof(CDOTAMsg_ItemAlert)},
  { 26, 34, sizeof(CDOTAMsg_MapLine)},
  { 37, 47, sizeof(CDOTAMsg_WorldLine)},
  { 52, 62, sizeof(CDOTAMsg_SendStatPopup)},
  { 67, 73, sizeof(CDOTAMsg_DismissAllStatPopups)},
  { 74, 82, sizeof(CDOTAMsg_CoachHUDPing)},
  { 85, 98, sizeof(CDOTAMsg_UnitOrder)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMsg_LocationPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMsg_ItemAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMsg_MapLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMsg_WorldLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMsg_SendStatPopup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMsg_DismissAllStatPopups_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMsg_CoachHUDPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMsg_UnitOrder_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dota_commonmessages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _CDOTAMsg_LocationPing_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CDOTAMsg_ItemAlert_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CDOTAMsg_MapLine_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CDOTAMsg_WorldLine_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CDOTAMsg_SendStatPopup_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CDOTAMsg_DismissAllStatPopups_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CDOTAMsg_CoachHUDPing_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CDOTAMsg_UnitOrder_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_networkbasetypes_2eproto::InitDefaults();
  _CDOTAMsg_LocationPing_default_instance_.DefaultConstruct();
  _CDOTAMsg_ItemAlert_default_instance_.DefaultConstruct();
  _CDOTAMsg_MapLine_default_instance_.DefaultConstruct();
  _CDOTAMsg_WorldLine_default_instance_.DefaultConstruct();
  _CDOTAMsg_SendStatPopup_default_instance_.DefaultConstruct();
  _CDOTAMsg_DismissAllStatPopups_default_instance_.DefaultConstruct();
  _CDOTAMsg_CoachHUDPing_default_instance_.DefaultConstruct();
  _CDOTAMsg_UnitOrder_default_instance_.DefaultConstruct();
  _CDOTAMsg_UnitOrder_default_instance_.get_mutable()->position_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\031dota_commonmessages.proto\022\nproto.dota\032"
      "\026networkbasetypes.proto\"`\n\025CDOTAMsg_Loca"
      "tionPing\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\016\n\006target"
      "\030\003 \001(\005\022\023\n\013direct_ping\030\004 \001(\010\022\014\n\004type\030\005 \001("
      "\005\":\n\022CDOTAMsg_ItemAlert\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030"
      "\002 \001(\005\022\016\n\006itemid\030\003 \001(\005\"9\n\020CDOTAMsg_MapLin"
      "e\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\017\n\007initial\030\003 \001(\010"
      "\"S\n\022CDOTAMsg_WorldLine\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002"
      " \001(\005\022\t\n\001z\030\003 \001(\005\022\017\n\007initial\030\004 \001(\010\022\013\n\003end\030"
      "\005 \001(\010\"\265\001\n\026CDOTAMsg_SendStatPopup\022D\n\005styl"
      "e\030\001 \001(\0162\037.proto.dota.EDOTAStatPopupTypes"
      ":\024k_EDOTA_SPT_Textline\022\024\n\014stat_strings\030\002"
      " \003(\t\022\023\n\013stat_images\030\003 \003(\005\022\030\n\020stat_image_"
      "types\030\004 \003(\005\022\020\n\010duration\030\005 \001(\002\"3\n\035CDOTAMs"
      "g_DismissAllStatPopups\022\022\n\ntime_delay\030\001 \001"
      "(\002\">\n\025CDOTAMsg_CoachHUDPing\022\t\n\001x\030\001 \001(\r\022\t"
      "\n\001y\030\002 \001(\r\022\017\n\007tgtpath\030\003 \001(\t\"\375\001\n\022CDOTAMsg_"
      "UnitOrder\022\022\n\006issuer\030\001 \001(\021:\002-1\022E\n\norder_t"
      "ype\030\002 \001(\0162\033.proto.dota.dotaunitorder_t:\024"
      "DOTA_UNIT_ORDER_NONE\022\r\n\005units\030\003 \003(\005\022\024\n\014t"
      "arget_index\030\004 \001(\005\022\025\n\rability_index\030\005 \001(\005"
      "\022(\n\010position\030\006 \001(\0132\026.proto.dota.CMsgVect"
      "or\022\r\n\005queue\030\007 \001(\010\022\027\n\017sequence_number\030\010 \001"
      "(\005*\215\001\n\023EDOTAStatPopupTypes\022\030\n\024k_EDOTA_SP"
      "T_Textline\020\000\022\025\n\021k_EDOTA_SPT_Basic\020\001\022\024\n\020k"
      "_EDOTA_SPT_Poll\020\002\022\024\n\020k_EDOTA_SPT_Grid\020\003\022"
      "\031\n\025k_EDOTA_SPT_DualImage\020\004*\331\t\n\017dotaunito"
      "rder_t\022\030\n\024DOTA_UNIT_ORDER_NONE\020\000\022$\n DOTA"
      "_UNIT_ORDER_MOVE_TO_POSITION\020\001\022\"\n\036DOTA_U"
      "NIT_ORDER_MOVE_TO_TARGET\020\002\022\037\n\033DOTA_UNIT_"
      "ORDER_ATTACK_MOVE\020\003\022!\n\035DOTA_UNIT_ORDER_A"
      "TTACK_TARGET\020\004\022!\n\035DOTA_UNIT_ORDER_CAST_P"
      "OSITION\020\005\022\037\n\033DOTA_UNIT_ORDER_CAST_TARGET"
      "\020\006\022$\n DOTA_UNIT_ORDER_CAST_TARGET_TREE\020\007"
      "\022\"\n\036DOTA_UNIT_ORDER_CAST_NO_TARGET\020\010\022\037\n\033"
      "DOTA_UNIT_ORDER_CAST_TOGGLE\020\t\022!\n\035DOTA_UN"
      "IT_ORDER_HOLD_POSITION\020\n\022!\n\035DOTA_UNIT_OR"
      "DER_TRAIN_ABILITY\020\013\022\035\n\031DOTA_UNIT_ORDER_D"
      "ROP_ITEM\020\014\022\035\n\031DOTA_UNIT_ORDER_GIVE_ITEM\020"
      "\r\022\037\n\033DOTA_UNIT_ORDER_PICKUP_ITEM\020\016\022\037\n\033DO"
      "TA_UNIT_ORDER_PICKUP_RUNE\020\017\022!\n\035DOTA_UNIT"
      "_ORDER_PURCHASE_ITEM\020\020\022\035\n\031DOTA_UNIT_ORDE"
      "R_SELL_ITEM\020\021\022$\n DOTA_UNIT_ORDER_DISASSE"
      "MBLE_ITEM\020\022\022\035\n\031DOTA_UNIT_ORDER_MOVE_ITEM"
      "\020\023\022$\n DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO\020\024"
      "\022\030\n\024DOTA_UNIT_ORDER_STOP\020\025\022\031\n\025DOTA_UNIT_"
      "ORDER_TAUNT\020\026\022\033\n\027DOTA_UNIT_ORDER_BUYBACK"
      "\020\027\022\031\n\025DOTA_UNIT_ORDER_GLYPH\020\030\022)\n%DOTA_UN"
      "IT_ORDER_EJECT_ITEM_FROM_STASH\020\031\022\035\n\031DOTA"
      "_UNIT_ORDER_CAST_RUNE\020\032\022 \n\034DOTA_UNIT_ORD"
      "ER_PING_ABILITY\020\033\022%\n!DOTA_UNIT_ORDER_MOV"
      "E_TO_DIRECTION\020\034\022\032\n\026DOTA_UNIT_ORDER_PATR"
      "OL\020\035\022*\n&DOTA_UNIT_ORDER_VECTOR_TARGET_PO"
      "SITION\020\036\022\031\n\025DOTA_UNIT_ORDER_RADAR\020\037\022)\n%D"
      "OTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK\020 \022\034"
      "\n\030DOTA_UNIT_ORDER_CONTINUE\020!\022*\n&DOTA_UNI"
      "T_ORDER_VECTOR_TARGET_CANCELED\020\"\022$\n DOTA"
      "_UNIT_ORDER_CAST_RIVER_PAINT\020#B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2317);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_commonmessages.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_networkbasetypes_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dota_5fcommonmessages_2eproto

const ::google::protobuf::EnumDescriptor* EDOTAStatPopupTypes_descriptor() {
  protobuf_dota_5fcommonmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fcommonmessages_2eproto::file_level_enum_descriptors[0];
}
bool EDOTAStatPopupTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* dotaunitorder_t_descriptor() {
  protobuf_dota_5fcommonmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fcommonmessages_2eproto::file_level_enum_descriptors[1];
}
bool dotaunitorder_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMsg_LocationPing::kXFieldNumber;
const int CDOTAMsg_LocationPing::kYFieldNumber;
const int CDOTAMsg_LocationPing::kTargetFieldNumber;
const int CDOTAMsg_LocationPing::kDirectPingFieldNumber;
const int CDOTAMsg_LocationPing::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMsg_LocationPing::CDOTAMsg_LocationPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fcommonmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMsg_LocationPing)
}
CDOTAMsg_LocationPing::CDOTAMsg_LocationPing(const CDOTAMsg_LocationPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&x_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMsg_LocationPing)
}

void CDOTAMsg_LocationPing::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&x_) + sizeof(type_));
}

CDOTAMsg_LocationPing::~CDOTAMsg_LocationPing() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMsg_LocationPing)
  SharedDtor();
}

void CDOTAMsg_LocationPing::SharedDtor() {
}

void CDOTAMsg_LocationPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMsg_LocationPing::descriptor() {
  protobuf_dota_5fcommonmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fcommonmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMsg_LocationPing& CDOTAMsg_LocationPing::default_instance() {
  protobuf_dota_5fcommonmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMsg_LocationPing* CDOTAMsg_LocationPing::New(::google::protobuf::Arena* arena) const {
  CDOTAMsg_LocationPing* n = new CDOTAMsg_LocationPing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMsg_LocationPing::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMsg_LocationPing)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&x_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMsg_LocationPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMsg_LocationPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool direct_ping = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_direct_ping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &direct_ping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMsg_LocationPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMsg_LocationPing)
  return false;
#undef DO_
}

void CDOTAMsg_LocationPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMsg_LocationPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 target = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target(), output);
  }

  // optional bool direct_ping = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->direct_ping(), output);
  }

  // optional int32 type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMsg_LocationPing)
}

::google::protobuf::uint8* CDOTAMsg_LocationPing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMsg_LocationPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 target = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target(), target);
  }

  // optional bool direct_ping = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->direct_ping(), target);
  }

  // optional int32 type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMsg_LocationPing)
  return target;
}

size_t CDOTAMsg_LocationPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMsg_LocationPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

    // optional bool direct_ping = 4;
    if (has_direct_ping()) {
      total_size += 1 + 1;
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMsg_LocationPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMsg_LocationPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMsg_LocationPing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMsg_LocationPing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMsg_LocationPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMsg_LocationPing)
    MergeFrom(*source);
  }
}

void CDOTAMsg_LocationPing::MergeFrom(const CDOTAMsg_LocationPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMsg_LocationPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_ = from.target_;
    }
    if (cached_has_bits & 0x00000008u) {
      direct_ping_ = from.direct_ping_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMsg_LocationPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMsg_LocationPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMsg_LocationPing::CopyFrom(const CDOTAMsg_LocationPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMsg_LocationPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_LocationPing::IsInitialized() const {
  return true;
}

void CDOTAMsg_LocationPing::Swap(CDOTAMsg_LocationPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMsg_LocationPing::InternalSwap(CDOTAMsg_LocationPing* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(target_, other->target_);
  std::swap(direct_ping_, other->direct_ping_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMsg_LocationPing::GetMetadata() const {
  protobuf_dota_5fcommonmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fcommonmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMsg_LocationPing

// optional int32 x = 1;
bool CDOTAMsg_LocationPing::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAMsg_LocationPing::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAMsg_LocationPing::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAMsg_LocationPing::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 CDOTAMsg_LocationPing::x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_LocationPing.x)
  return x_;
}
void CDOTAMsg_LocationPing::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_LocationPing.x)
}

// optional int32 y = 2;
bool CDOTAMsg_LocationPing::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAMsg_LocationPing::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAMsg_LocationPing::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAMsg_LocationPing::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 CDOTAMsg_LocationPing::y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_LocationPing.y)
  return y_;
}
void CDOTAMsg_LocationPing::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_LocationPing.y)
}

// optional int32 target = 3;
bool CDOTAMsg_LocationPing::has_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAMsg_LocationPing::set_has_target() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAMsg_LocationPing::clear_has_target() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAMsg_LocationPing::clear_target() {
  target_ = 0;
  clear_has_target();
}
::google::protobuf::int32 CDOTAMsg_LocationPing::target() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_LocationPing.target)
  return target_;
}
void CDOTAMsg_LocationPing::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_LocationPing.target)
}

// optional bool direct_ping = 4;
bool CDOTAMsg_LocationPing::has_direct_ping() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAMsg_LocationPing::set_has_direct_ping() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAMsg_LocationPing::clear_has_direct_ping() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAMsg_LocationPing::clear_direct_ping() {
  direct_ping_ = false;
  clear_has_direct_ping();
}
bool CDOTAMsg_LocationPing::direct_ping() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_LocationPing.direct_ping)
  return direct_ping_;
}
void CDOTAMsg_LocationPing::set_direct_ping(bool value) {
  set_has_direct_ping();
  direct_ping_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_LocationPing.direct_ping)
}

// optional int32 type = 5;
bool CDOTAMsg_LocationPing::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAMsg_LocationPing::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAMsg_LocationPing::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAMsg_LocationPing::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 CDOTAMsg_LocationPing::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_LocationPing.type)
  return type_;
}
void CDOTAMsg_LocationPing::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_LocationPing.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMsg_ItemAlert::kXFieldNumber;
const int CDOTAMsg_ItemAlert::kYFieldNumber;
const int CDOTAMsg_ItemAlert::kItemidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMsg_ItemAlert::CDOTAMsg_ItemAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fcommonmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMsg_ItemAlert)
}
CDOTAMsg_ItemAlert::CDOTAMsg_ItemAlert(const CDOTAMsg_ItemAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&x_) + sizeof(itemid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMsg_ItemAlert)
}

void CDOTAMsg_ItemAlert::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&x_) + sizeof(itemid_));
}

CDOTAMsg_ItemAlert::~CDOTAMsg_ItemAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMsg_ItemAlert)
  SharedDtor();
}

void CDOTAMsg_ItemAlert::SharedDtor() {
}

void CDOTAMsg_ItemAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMsg_ItemAlert::descriptor() {
  protobuf_dota_5fcommonmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fcommonmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMsg_ItemAlert& CDOTAMsg_ItemAlert::default_instance() {
  protobuf_dota_5fcommonmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMsg_ItemAlert* CDOTAMsg_ItemAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAMsg_ItemAlert* n = new CDOTAMsg_ItemAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMsg_ItemAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMsg_ItemAlert)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&itemid_) -
      reinterpret_cast<char*>(&x_) + sizeof(itemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMsg_ItemAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMsg_ItemAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 itemid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMsg_ItemAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMsg_ItemAlert)
  return false;
#undef DO_
}

void CDOTAMsg_ItemAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMsg_ItemAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 itemid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMsg_ItemAlert)
}

::google::protobuf::uint8* CDOTAMsg_ItemAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMsg_ItemAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 itemid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMsg_ItemAlert)
  return target;
}

size_t CDOTAMsg_ItemAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMsg_ItemAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 itemid = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMsg_ItemAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMsg_ItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMsg_ItemAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMsg_ItemAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMsg_ItemAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMsg_ItemAlert)
    MergeFrom(*source);
  }
}

void CDOTAMsg_ItemAlert::MergeFrom(const CDOTAMsg_ItemAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMsg_ItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      itemid_ = from.itemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMsg_ItemAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMsg_ItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMsg_ItemAlert::CopyFrom(const CDOTAMsg_ItemAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMsg_ItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_ItemAlert::IsInitialized() const {
  return true;
}

void CDOTAMsg_ItemAlert::Swap(CDOTAMsg_ItemAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMsg_ItemAlert::InternalSwap(CDOTAMsg_ItemAlert* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(itemid_, other->itemid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMsg_ItemAlert::GetMetadata() const {
  protobuf_dota_5fcommonmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fcommonmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMsg_ItemAlert

// optional int32 x = 1;
bool CDOTAMsg_ItemAlert::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAMsg_ItemAlert::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAMsg_ItemAlert::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAMsg_ItemAlert::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 CDOTAMsg_ItemAlert::x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_ItemAlert.x)
  return x_;
}
void CDOTAMsg_ItemAlert::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_ItemAlert.x)
}

// optional int32 y = 2;
bool CDOTAMsg_ItemAlert::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAMsg_ItemAlert::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAMsg_ItemAlert::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAMsg_ItemAlert::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 CDOTAMsg_ItemAlert::y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_ItemAlert.y)
  return y_;
}
void CDOTAMsg_ItemAlert::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_ItemAlert.y)
}

// optional int32 itemid = 3;
bool CDOTAMsg_ItemAlert::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAMsg_ItemAlert::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAMsg_ItemAlert::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAMsg_ItemAlert::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
::google::protobuf::int32 CDOTAMsg_ItemAlert::itemid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_ItemAlert.itemid)
  return itemid_;
}
void CDOTAMsg_ItemAlert::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_ItemAlert.itemid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMsg_MapLine::kXFieldNumber;
const int CDOTAMsg_MapLine::kYFieldNumber;
const int CDOTAMsg_MapLine::kInitialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMsg_MapLine::CDOTAMsg_MapLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fcommonmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMsg_MapLine)
}
CDOTAMsg_MapLine::CDOTAMsg_MapLine(const CDOTAMsg_MapLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&initial_) -
    reinterpret_cast<char*>(&x_) + sizeof(initial_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMsg_MapLine)
}

void CDOTAMsg_MapLine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&initial_) -
    reinterpret_cast<char*>(&x_) + sizeof(initial_));
}

CDOTAMsg_MapLine::~CDOTAMsg_MapLine() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMsg_MapLine)
  SharedDtor();
}

void CDOTAMsg_MapLine::SharedDtor() {
}

void CDOTAMsg_MapLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMsg_MapLine::descriptor() {
  protobuf_dota_5fcommonmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fcommonmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMsg_MapLine& CDOTAMsg_MapLine::default_instance() {
  protobuf_dota_5fcommonmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMsg_MapLine* CDOTAMsg_MapLine::New(::google::protobuf::Arena* arena) const {
  CDOTAMsg_MapLine* n = new CDOTAMsg_MapLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMsg_MapLine::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMsg_MapLine)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&initial_) -
      reinterpret_cast<char*>(&x_) + sizeof(initial_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMsg_MapLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMsg_MapLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool initial = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_initial();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMsg_MapLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMsg_MapLine)
  return false;
#undef DO_
}

void CDOTAMsg_MapLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMsg_MapLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional bool initial = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->initial(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMsg_MapLine)
}

::google::protobuf::uint8* CDOTAMsg_MapLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMsg_MapLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional bool initial = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->initial(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMsg_MapLine)
  return target;
}

size_t CDOTAMsg_MapLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMsg_MapLine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional bool initial = 3;
    if (has_initial()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMsg_MapLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMsg_MapLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMsg_MapLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMsg_MapLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMsg_MapLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMsg_MapLine)
    MergeFrom(*source);
  }
}

void CDOTAMsg_MapLine::MergeFrom(const CDOTAMsg_MapLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMsg_MapLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      initial_ = from.initial_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMsg_MapLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMsg_MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMsg_MapLine::CopyFrom(const CDOTAMsg_MapLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMsg_MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_MapLine::IsInitialized() const {
  return true;
}

void CDOTAMsg_MapLine::Swap(CDOTAMsg_MapLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMsg_MapLine::InternalSwap(CDOTAMsg_MapLine* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(initial_, other->initial_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMsg_MapLine::GetMetadata() const {
  protobuf_dota_5fcommonmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fcommonmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMsg_MapLine

// optional int32 x = 1;
bool CDOTAMsg_MapLine::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAMsg_MapLine::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAMsg_MapLine::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAMsg_MapLine::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 CDOTAMsg_MapLine::x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_MapLine.x)
  return x_;
}
void CDOTAMsg_MapLine::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_MapLine.x)
}

// optional int32 y = 2;
bool CDOTAMsg_MapLine::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAMsg_MapLine::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAMsg_MapLine::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAMsg_MapLine::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 CDOTAMsg_MapLine::y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_MapLine.y)
  return y_;
}
void CDOTAMsg_MapLine::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_MapLine.y)
}

// optional bool initial = 3;
bool CDOTAMsg_MapLine::has_initial() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAMsg_MapLine::set_has_initial() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAMsg_MapLine::clear_has_initial() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAMsg_MapLine::clear_initial() {
  initial_ = false;
  clear_has_initial();
}
bool CDOTAMsg_MapLine::initial() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_MapLine.initial)
  return initial_;
}
void CDOTAMsg_MapLine::set_initial(bool value) {
  set_has_initial();
  initial_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_MapLine.initial)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMsg_WorldLine::kXFieldNumber;
const int CDOTAMsg_WorldLine::kYFieldNumber;
const int CDOTAMsg_WorldLine::kZFieldNumber;
const int CDOTAMsg_WorldLine::kInitialFieldNumber;
const int CDOTAMsg_WorldLine::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMsg_WorldLine::CDOTAMsg_WorldLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fcommonmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMsg_WorldLine)
}
CDOTAMsg_WorldLine::CDOTAMsg_WorldLine(const CDOTAMsg_WorldLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&x_) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMsg_WorldLine)
}

void CDOTAMsg_WorldLine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&x_) + sizeof(end_));
}

CDOTAMsg_WorldLine::~CDOTAMsg_WorldLine() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMsg_WorldLine)
  SharedDtor();
}

void CDOTAMsg_WorldLine::SharedDtor() {
}

void CDOTAMsg_WorldLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMsg_WorldLine::descriptor() {
  protobuf_dota_5fcommonmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fcommonmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMsg_WorldLine& CDOTAMsg_WorldLine::default_instance() {
  protobuf_dota_5fcommonmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMsg_WorldLine* CDOTAMsg_WorldLine::New(::google::protobuf::Arena* arena) const {
  CDOTAMsg_WorldLine* n = new CDOTAMsg_WorldLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMsg_WorldLine::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMsg_WorldLine)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&x_) + sizeof(end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMsg_WorldLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMsg_WorldLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool initial = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_initial();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool end = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMsg_WorldLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMsg_WorldLine)
  return false;
#undef DO_
}

void CDOTAMsg_WorldLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMsg_WorldLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // optional bool initial = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->initial(), output);
  }

  // optional bool end = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMsg_WorldLine)
}

::google::protobuf::uint8* CDOTAMsg_WorldLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMsg_WorldLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // optional bool initial = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->initial(), target);
  }

  // optional bool end = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMsg_WorldLine)
  return target;
}

size_t CDOTAMsg_WorldLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMsg_WorldLine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

    // optional bool initial = 4;
    if (has_initial()) {
      total_size += 1 + 1;
    }

    // optional bool end = 5;
    if (has_end()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMsg_WorldLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMsg_WorldLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMsg_WorldLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMsg_WorldLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMsg_WorldLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMsg_WorldLine)
    MergeFrom(*source);
  }
}

void CDOTAMsg_WorldLine::MergeFrom(const CDOTAMsg_WorldLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMsg_WorldLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      initial_ = from.initial_;
    }
    if (cached_has_bits & 0x00000010u) {
      end_ = from.end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMsg_WorldLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMsg_WorldLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMsg_WorldLine::CopyFrom(const CDOTAMsg_WorldLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMsg_WorldLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_WorldLine::IsInitialized() const {
  return true;
}

void CDOTAMsg_WorldLine::Swap(CDOTAMsg_WorldLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMsg_WorldLine::InternalSwap(CDOTAMsg_WorldLine* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(initial_, other->initial_);
  std::swap(end_, other->end_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMsg_WorldLine::GetMetadata() const {
  protobuf_dota_5fcommonmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fcommonmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMsg_WorldLine

// optional int32 x = 1;
bool CDOTAMsg_WorldLine::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAMsg_WorldLine::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAMsg_WorldLine::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAMsg_WorldLine::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 CDOTAMsg_WorldLine::x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_WorldLine.x)
  return x_;
}
void CDOTAMsg_WorldLine::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_WorldLine.x)
}

// optional int32 y = 2;
bool CDOTAMsg_WorldLine::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAMsg_WorldLine::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAMsg_WorldLine::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAMsg_WorldLine::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 CDOTAMsg_WorldLine::y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_WorldLine.y)
  return y_;
}
void CDOTAMsg_WorldLine::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_WorldLine.y)
}

// optional int32 z = 3;
bool CDOTAMsg_WorldLine::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAMsg_WorldLine::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAMsg_WorldLine::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAMsg_WorldLine::clear_z() {
  z_ = 0;
  clear_has_z();
}
::google::protobuf::int32 CDOTAMsg_WorldLine::z() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_WorldLine.z)
  return z_;
}
void CDOTAMsg_WorldLine::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_WorldLine.z)
}

// optional bool initial = 4;
bool CDOTAMsg_WorldLine::has_initial() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAMsg_WorldLine::set_has_initial() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAMsg_WorldLine::clear_has_initial() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAMsg_WorldLine::clear_initial() {
  initial_ = false;
  clear_has_initial();
}
bool CDOTAMsg_WorldLine::initial() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_WorldLine.initial)
  return initial_;
}
void CDOTAMsg_WorldLine::set_initial(bool value) {
  set_has_initial();
  initial_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_WorldLine.initial)
}

// optional bool end = 5;
bool CDOTAMsg_WorldLine::has_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAMsg_WorldLine::set_has_end() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAMsg_WorldLine::clear_has_end() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAMsg_WorldLine::clear_end() {
  end_ = false;
  clear_has_end();
}
bool CDOTAMsg_WorldLine::end() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_WorldLine.end)
  return end_;
}
void CDOTAMsg_WorldLine::set_end(bool value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_WorldLine.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMsg_SendStatPopup::kStyleFieldNumber;
const int CDOTAMsg_SendStatPopup::kStatStringsFieldNumber;
const int CDOTAMsg_SendStatPopup::kStatImagesFieldNumber;
const int CDOTAMsg_SendStatPopup::kStatImageTypesFieldNumber;
const int CDOTAMsg_SendStatPopup::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMsg_SendStatPopup::CDOTAMsg_SendStatPopup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fcommonmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMsg_SendStatPopup)
}
CDOTAMsg_SendStatPopup::CDOTAMsg_SendStatPopup(const CDOTAMsg_SendStatPopup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stat_strings_(from.stat_strings_),
      stat_images_(from.stat_images_),
      stat_image_types_(from.stat_image_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&style_, &from.style_,
    reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&style_) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMsg_SendStatPopup)
}

void CDOTAMsg_SendStatPopup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&style_, 0, reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&style_) + sizeof(duration_));
}

CDOTAMsg_SendStatPopup::~CDOTAMsg_SendStatPopup() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMsg_SendStatPopup)
  SharedDtor();
}

void CDOTAMsg_SendStatPopup::SharedDtor() {
}

void CDOTAMsg_SendStatPopup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMsg_SendStatPopup::descriptor() {
  protobuf_dota_5fcommonmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fcommonmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMsg_SendStatPopup& CDOTAMsg_SendStatPopup::default_instance() {
  protobuf_dota_5fcommonmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMsg_SendStatPopup* CDOTAMsg_SendStatPopup::New(::google::protobuf::Arena* arena) const {
  CDOTAMsg_SendStatPopup* n = new CDOTAMsg_SendStatPopup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMsg_SendStatPopup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMsg_SendStatPopup)
  stat_strings_.Clear();
  stat_images_.Clear();
  stat_image_types_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&style_, 0, reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&style_) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMsg_SendStatPopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMsg_SendStatPopup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EDOTAStatPopupTypes style = 1 [default = k_EDOTA_SPT_Textline];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EDOTAStatPopupTypes_IsValid(value)) {
            set_style(static_cast< ::proto::dota::EDOTAStatPopupTypes >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string stat_strings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stat_strings()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stat_strings(this->stat_strings_size() - 1).data(),
            this->stat_strings(this->stat_strings_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAMsg_SendStatPopup.stat_strings");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 stat_images = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_stat_images())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stat_images())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 stat_image_types = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_stat_image_types())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stat_image_types())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMsg_SendStatPopup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMsg_SendStatPopup)
  return false;
#undef DO_
}

void CDOTAMsg_SendStatPopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMsg_SendStatPopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EDOTAStatPopupTypes style = 1 [default = k_EDOTA_SPT_Textline];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->style(), output);
  }

  // repeated string stat_strings = 2;
  for (int i = 0, n = this->stat_strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stat_strings(i).data(), this->stat_strings(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAMsg_SendStatPopup.stat_strings");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stat_strings(i), output);
  }

  // repeated int32 stat_images = 3;
  for (int i = 0, n = this->stat_images_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->stat_images(i), output);
  }

  // repeated int32 stat_image_types = 4;
  for (int i = 0, n = this->stat_image_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->stat_image_types(i), output);
  }

  // optional float duration = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMsg_SendStatPopup)
}

::google::protobuf::uint8* CDOTAMsg_SendStatPopup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMsg_SendStatPopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EDOTAStatPopupTypes style = 1 [default = k_EDOTA_SPT_Textline];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->style(), target);
  }

  // repeated string stat_strings = 2;
  for (int i = 0, n = this->stat_strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stat_strings(i).data(), this->stat_strings(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAMsg_SendStatPopup.stat_strings");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->stat_strings(i), target);
  }

  // repeated int32 stat_images = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->stat_images_, target);

  // repeated int32 stat_image_types = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->stat_image_types_, target);

  // optional float duration = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMsg_SendStatPopup)
  return target;
}

size_t CDOTAMsg_SendStatPopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMsg_SendStatPopup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string stat_strings = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->stat_strings_size());
  for (int i = 0, n = this->stat_strings_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stat_strings(i));
  }

  // repeated int32 stat_images = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->stat_images_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->stat_images_size());
    total_size += data_size;
  }

  // repeated int32 stat_image_types = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->stat_image_types_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->stat_image_types_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.EDOTAStatPopupTypes style = 1 [default = k_EDOTA_SPT_Textline];
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->style());
    }

    // optional float duration = 5;
    if (has_duration()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMsg_SendStatPopup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMsg_SendStatPopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMsg_SendStatPopup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMsg_SendStatPopup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMsg_SendStatPopup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMsg_SendStatPopup)
    MergeFrom(*source);
  }
}

void CDOTAMsg_SendStatPopup::MergeFrom(const CDOTAMsg_SendStatPopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMsg_SendStatPopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_strings_.MergeFrom(from.stat_strings_);
  stat_images_.MergeFrom(from.stat_images_);
  stat_image_types_.MergeFrom(from.stat_image_types_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMsg_SendStatPopup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMsg_SendStatPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMsg_SendStatPopup::CopyFrom(const CDOTAMsg_SendStatPopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMsg_SendStatPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_SendStatPopup::IsInitialized() const {
  return true;
}

void CDOTAMsg_SendStatPopup::Swap(CDOTAMsg_SendStatPopup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMsg_SendStatPopup::InternalSwap(CDOTAMsg_SendStatPopup* other) {
  stat_strings_.InternalSwap(&other->stat_strings_);
  stat_images_.InternalSwap(&other->stat_images_);
  stat_image_types_.InternalSwap(&other->stat_image_types_);
  std::swap(style_, other->style_);
  std::swap(duration_, other->duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMsg_SendStatPopup::GetMetadata() const {
  protobuf_dota_5fcommonmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fcommonmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMsg_SendStatPopup

// optional .proto.dota.EDOTAStatPopupTypes style = 1 [default = k_EDOTA_SPT_Textline];
bool CDOTAMsg_SendStatPopup::has_style() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAMsg_SendStatPopup::set_has_style() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAMsg_SendStatPopup::clear_has_style() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAMsg_SendStatPopup::clear_style() {
  style_ = 0;
  clear_has_style();
}
::proto::dota::EDOTAStatPopupTypes CDOTAMsg_SendStatPopup::style() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_SendStatPopup.style)
  return static_cast< ::proto::dota::EDOTAStatPopupTypes >(style_);
}
void CDOTAMsg_SendStatPopup::set_style(::proto::dota::EDOTAStatPopupTypes value) {
  assert(::proto::dota::EDOTAStatPopupTypes_IsValid(value));
  set_has_style();
  style_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_SendStatPopup.style)
}

// repeated string stat_strings = 2;
int CDOTAMsg_SendStatPopup::stat_strings_size() const {
  return stat_strings_.size();
}
void CDOTAMsg_SendStatPopup::clear_stat_strings() {
  stat_strings_.Clear();
}
const ::std::string& CDOTAMsg_SendStatPopup::stat_strings(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_SendStatPopup.stat_strings)
  return stat_strings_.Get(index);
}
::std::string* CDOTAMsg_SendStatPopup::mutable_stat_strings(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMsg_SendStatPopup.stat_strings)
  return stat_strings_.Mutable(index);
}
void CDOTAMsg_SendStatPopup::set_stat_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_SendStatPopup.stat_strings)
  stat_strings_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CDOTAMsg_SendStatPopup::set_stat_strings(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_SendStatPopup.stat_strings)
  stat_strings_.Mutable(index)->assign(std::move(value));
}
#endif
void CDOTAMsg_SendStatPopup::set_stat_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stat_strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAMsg_SendStatPopup.stat_strings)
}
void CDOTAMsg_SendStatPopup::set_stat_strings(int index, const char* value, size_t size) {
  stat_strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAMsg_SendStatPopup.stat_strings)
}
::std::string* CDOTAMsg_SendStatPopup::add_stat_strings() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CDOTAMsg_SendStatPopup.stat_strings)
  return stat_strings_.Add();
}
void CDOTAMsg_SendStatPopup::add_stat_strings(const ::std::string& value) {
  stat_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMsg_SendStatPopup.stat_strings)
}
#if LANG_CXX11
void CDOTAMsg_SendStatPopup::add_stat_strings(::std::string&& value) {
  stat_strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMsg_SendStatPopup.stat_strings)
}
#endif
void CDOTAMsg_SendStatPopup::add_stat_strings(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stat_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CDOTAMsg_SendStatPopup.stat_strings)
}
void CDOTAMsg_SendStatPopup::add_stat_strings(const char* value, size_t size) {
  stat_strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CDOTAMsg_SendStatPopup.stat_strings)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CDOTAMsg_SendStatPopup::stat_strings() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMsg_SendStatPopup.stat_strings)
  return stat_strings_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CDOTAMsg_SendStatPopup::mutable_stat_strings() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMsg_SendStatPopup.stat_strings)
  return &stat_strings_;
}

// repeated int32 stat_images = 3;
int CDOTAMsg_SendStatPopup::stat_images_size() const {
  return stat_images_.size();
}
void CDOTAMsg_SendStatPopup::clear_stat_images() {
  stat_images_.Clear();
}
::google::protobuf::int32 CDOTAMsg_SendStatPopup::stat_images(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_SendStatPopup.stat_images)
  return stat_images_.Get(index);
}
void CDOTAMsg_SendStatPopup::set_stat_images(int index, ::google::protobuf::int32 value) {
  stat_images_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_SendStatPopup.stat_images)
}
void CDOTAMsg_SendStatPopup::add_stat_images(::google::protobuf::int32 value) {
  stat_images_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMsg_SendStatPopup.stat_images)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CDOTAMsg_SendStatPopup::stat_images() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMsg_SendStatPopup.stat_images)
  return stat_images_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CDOTAMsg_SendStatPopup::mutable_stat_images() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMsg_SendStatPopup.stat_images)
  return &stat_images_;
}

// repeated int32 stat_image_types = 4;
int CDOTAMsg_SendStatPopup::stat_image_types_size() const {
  return stat_image_types_.size();
}
void CDOTAMsg_SendStatPopup::clear_stat_image_types() {
  stat_image_types_.Clear();
}
::google::protobuf::int32 CDOTAMsg_SendStatPopup::stat_image_types(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_SendStatPopup.stat_image_types)
  return stat_image_types_.Get(index);
}
void CDOTAMsg_SendStatPopup::set_stat_image_types(int index, ::google::protobuf::int32 value) {
  stat_image_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_SendStatPopup.stat_image_types)
}
void CDOTAMsg_SendStatPopup::add_stat_image_types(::google::protobuf::int32 value) {
  stat_image_types_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMsg_SendStatPopup.stat_image_types)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CDOTAMsg_SendStatPopup::stat_image_types() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMsg_SendStatPopup.stat_image_types)
  return stat_image_types_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CDOTAMsg_SendStatPopup::mutable_stat_image_types() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMsg_SendStatPopup.stat_image_types)
  return &stat_image_types_;
}

// optional float duration = 5;
bool CDOTAMsg_SendStatPopup::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAMsg_SendStatPopup::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAMsg_SendStatPopup::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAMsg_SendStatPopup::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
float CDOTAMsg_SendStatPopup::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_SendStatPopup.duration)
  return duration_;
}
void CDOTAMsg_SendStatPopup::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_SendStatPopup.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMsg_DismissAllStatPopups::kTimeDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMsg_DismissAllStatPopups::CDOTAMsg_DismissAllStatPopups()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fcommonmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMsg_DismissAllStatPopups)
}
CDOTAMsg_DismissAllStatPopups::CDOTAMsg_DismissAllStatPopups(const CDOTAMsg_DismissAllStatPopups& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_delay_ = from.time_delay_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMsg_DismissAllStatPopups)
}

void CDOTAMsg_DismissAllStatPopups::SharedCtor() {
  _cached_size_ = 0;
  time_delay_ = 0;
}

CDOTAMsg_DismissAllStatPopups::~CDOTAMsg_DismissAllStatPopups() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMsg_DismissAllStatPopups)
  SharedDtor();
}

void CDOTAMsg_DismissAllStatPopups::SharedDtor() {
}

void CDOTAMsg_DismissAllStatPopups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMsg_DismissAllStatPopups::descriptor() {
  protobuf_dota_5fcommonmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fcommonmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMsg_DismissAllStatPopups& CDOTAMsg_DismissAllStatPopups::default_instance() {
  protobuf_dota_5fcommonmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMsg_DismissAllStatPopups* CDOTAMsg_DismissAllStatPopups::New(::google::protobuf::Arena* arena) const {
  CDOTAMsg_DismissAllStatPopups* n = new CDOTAMsg_DismissAllStatPopups;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMsg_DismissAllStatPopups::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMsg_DismissAllStatPopups)
  time_delay_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMsg_DismissAllStatPopups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMsg_DismissAllStatPopups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float time_delay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_time_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMsg_DismissAllStatPopups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMsg_DismissAllStatPopups)
  return false;
#undef DO_
}

void CDOTAMsg_DismissAllStatPopups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMsg_DismissAllStatPopups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float time_delay = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->time_delay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMsg_DismissAllStatPopups)
}

::google::protobuf::uint8* CDOTAMsg_DismissAllStatPopups::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMsg_DismissAllStatPopups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float time_delay = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->time_delay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMsg_DismissAllStatPopups)
  return target;
}

size_t CDOTAMsg_DismissAllStatPopups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMsg_DismissAllStatPopups)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional float time_delay = 1;
  if (has_time_delay()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMsg_DismissAllStatPopups::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMsg_DismissAllStatPopups)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMsg_DismissAllStatPopups* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMsg_DismissAllStatPopups>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMsg_DismissAllStatPopups)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMsg_DismissAllStatPopups)
    MergeFrom(*source);
  }
}

void CDOTAMsg_DismissAllStatPopups::MergeFrom(const CDOTAMsg_DismissAllStatPopups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMsg_DismissAllStatPopups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time_delay()) {
    set_time_delay(from.time_delay());
  }
}

void CDOTAMsg_DismissAllStatPopups::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMsg_DismissAllStatPopups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMsg_DismissAllStatPopups::CopyFrom(const CDOTAMsg_DismissAllStatPopups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMsg_DismissAllStatPopups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_DismissAllStatPopups::IsInitialized() const {
  return true;
}

void CDOTAMsg_DismissAllStatPopups::Swap(CDOTAMsg_DismissAllStatPopups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMsg_DismissAllStatPopups::InternalSwap(CDOTAMsg_DismissAllStatPopups* other) {
  std::swap(time_delay_, other->time_delay_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMsg_DismissAllStatPopups::GetMetadata() const {
  protobuf_dota_5fcommonmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fcommonmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMsg_DismissAllStatPopups

// optional float time_delay = 1;
bool CDOTAMsg_DismissAllStatPopups::has_time_delay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAMsg_DismissAllStatPopups::set_has_time_delay() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAMsg_DismissAllStatPopups::clear_has_time_delay() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAMsg_DismissAllStatPopups::clear_time_delay() {
  time_delay_ = 0;
  clear_has_time_delay();
}
float CDOTAMsg_DismissAllStatPopups::time_delay() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_DismissAllStatPopups.time_delay)
  return time_delay_;
}
void CDOTAMsg_DismissAllStatPopups::set_time_delay(float value) {
  set_has_time_delay();
  time_delay_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_DismissAllStatPopups.time_delay)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMsg_CoachHUDPing::kXFieldNumber;
const int CDOTAMsg_CoachHUDPing::kYFieldNumber;
const int CDOTAMsg_CoachHUDPing::kTgtpathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMsg_CoachHUDPing::CDOTAMsg_CoachHUDPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fcommonmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMsg_CoachHUDPing)
}
CDOTAMsg_CoachHUDPing::CDOTAMsg_CoachHUDPing(const CDOTAMsg_CoachHUDPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tgtpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tgtpath()) {
    tgtpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tgtpath_);
  }
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMsg_CoachHUDPing)
}

void CDOTAMsg_CoachHUDPing::SharedCtor() {
  _cached_size_ = 0;
  tgtpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
}

CDOTAMsg_CoachHUDPing::~CDOTAMsg_CoachHUDPing() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMsg_CoachHUDPing)
  SharedDtor();
}

void CDOTAMsg_CoachHUDPing::SharedDtor() {
  tgtpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAMsg_CoachHUDPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMsg_CoachHUDPing::descriptor() {
  protobuf_dota_5fcommonmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fcommonmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMsg_CoachHUDPing& CDOTAMsg_CoachHUDPing::default_instance() {
  protobuf_dota_5fcommonmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMsg_CoachHUDPing* CDOTAMsg_CoachHUDPing::New(::google::protobuf::Arena* arena) const {
  CDOTAMsg_CoachHUDPing* n = new CDOTAMsg_CoachHUDPing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMsg_CoachHUDPing::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMsg_CoachHUDPing)
  if (has_tgtpath()) {
    GOOGLE_DCHECK(!tgtpath_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*tgtpath_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMsg_CoachHUDPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMsg_CoachHUDPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tgtpath = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tgtpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tgtpath().data(), this->tgtpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAMsg_CoachHUDPing.tgtpath");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMsg_CoachHUDPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMsg_CoachHUDPing)
  return false;
#undef DO_
}

void CDOTAMsg_CoachHUDPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMsg_CoachHUDPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 x = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // optional uint32 y = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // optional string tgtpath = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tgtpath().data(), this->tgtpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAMsg_CoachHUDPing.tgtpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tgtpath(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMsg_CoachHUDPing)
}

::google::protobuf::uint8* CDOTAMsg_CoachHUDPing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMsg_CoachHUDPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // optional uint32 y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // optional string tgtpath = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tgtpath().data(), this->tgtpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAMsg_CoachHUDPing.tgtpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tgtpath(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMsg_CoachHUDPing)
  return target;
}

size_t CDOTAMsg_CoachHUDPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMsg_CoachHUDPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string tgtpath = 3;
    if (has_tgtpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tgtpath());
    }

    // optional uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMsg_CoachHUDPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMsg_CoachHUDPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMsg_CoachHUDPing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMsg_CoachHUDPing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMsg_CoachHUDPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMsg_CoachHUDPing)
    MergeFrom(*source);
  }
}

void CDOTAMsg_CoachHUDPing::MergeFrom(const CDOTAMsg_CoachHUDPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMsg_CoachHUDPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tgtpath();
      tgtpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tgtpath_);
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMsg_CoachHUDPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMsg_CoachHUDPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMsg_CoachHUDPing::CopyFrom(const CDOTAMsg_CoachHUDPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMsg_CoachHUDPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_CoachHUDPing::IsInitialized() const {
  return true;
}

void CDOTAMsg_CoachHUDPing::Swap(CDOTAMsg_CoachHUDPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMsg_CoachHUDPing::InternalSwap(CDOTAMsg_CoachHUDPing* other) {
  tgtpath_.Swap(&other->tgtpath_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMsg_CoachHUDPing::GetMetadata() const {
  protobuf_dota_5fcommonmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fcommonmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMsg_CoachHUDPing

// optional uint32 x = 1;
bool CDOTAMsg_CoachHUDPing::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAMsg_CoachHUDPing::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAMsg_CoachHUDPing::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAMsg_CoachHUDPing::clear_x() {
  x_ = 0u;
  clear_has_x();
}
::google::protobuf::uint32 CDOTAMsg_CoachHUDPing::x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_CoachHUDPing.x)
  return x_;
}
void CDOTAMsg_CoachHUDPing::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_CoachHUDPing.x)
}

// optional uint32 y = 2;
bool CDOTAMsg_CoachHUDPing::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAMsg_CoachHUDPing::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAMsg_CoachHUDPing::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAMsg_CoachHUDPing::clear_y() {
  y_ = 0u;
  clear_has_y();
}
::google::protobuf::uint32 CDOTAMsg_CoachHUDPing::y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_CoachHUDPing.y)
  return y_;
}
void CDOTAMsg_CoachHUDPing::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_CoachHUDPing.y)
}

// optional string tgtpath = 3;
bool CDOTAMsg_CoachHUDPing::has_tgtpath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAMsg_CoachHUDPing::set_has_tgtpath() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAMsg_CoachHUDPing::clear_has_tgtpath() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAMsg_CoachHUDPing::clear_tgtpath() {
  tgtpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tgtpath();
}
const ::std::string& CDOTAMsg_CoachHUDPing::tgtpath() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_CoachHUDPing.tgtpath)
  return tgtpath_.GetNoArena();
}
void CDOTAMsg_CoachHUDPing::set_tgtpath(const ::std::string& value) {
  set_has_tgtpath();
  tgtpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_CoachHUDPing.tgtpath)
}
#if LANG_CXX11
void CDOTAMsg_CoachHUDPing::set_tgtpath(::std::string&& value) {
  set_has_tgtpath();
  tgtpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAMsg_CoachHUDPing.tgtpath)
}
#endif
void CDOTAMsg_CoachHUDPing::set_tgtpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tgtpath();
  tgtpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAMsg_CoachHUDPing.tgtpath)
}
void CDOTAMsg_CoachHUDPing::set_tgtpath(const char* value, size_t size) {
  set_has_tgtpath();
  tgtpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAMsg_CoachHUDPing.tgtpath)
}
::std::string* CDOTAMsg_CoachHUDPing::mutable_tgtpath() {
  set_has_tgtpath();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMsg_CoachHUDPing.tgtpath)
  return tgtpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAMsg_CoachHUDPing::release_tgtpath() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAMsg_CoachHUDPing.tgtpath)
  clear_has_tgtpath();
  return tgtpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAMsg_CoachHUDPing::set_allocated_tgtpath(::std::string* tgtpath) {
  if (tgtpath != NULL) {
    set_has_tgtpath();
  } else {
    clear_has_tgtpath();
  }
  tgtpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tgtpath);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAMsg_CoachHUDPing.tgtpath)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMsg_UnitOrder::kIssuerFieldNumber;
const int CDOTAMsg_UnitOrder::kOrderTypeFieldNumber;
const int CDOTAMsg_UnitOrder::kUnitsFieldNumber;
const int CDOTAMsg_UnitOrder::kTargetIndexFieldNumber;
const int CDOTAMsg_UnitOrder::kAbilityIndexFieldNumber;
const int CDOTAMsg_UnitOrder::kPositionFieldNumber;
const int CDOTAMsg_UnitOrder::kQueueFieldNumber;
const int CDOTAMsg_UnitOrder::kSequenceNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMsg_UnitOrder::CDOTAMsg_UnitOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fcommonmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMsg_UnitOrder)
}
CDOTAMsg_UnitOrder::CDOTAMsg_UnitOrder(const CDOTAMsg_UnitOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      units_(from.units_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::proto::dota::CMsgVector(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&order_type_, &from.order_type_,
    reinterpret_cast<char*>(&issuer_) -
    reinterpret_cast<char*>(&order_type_) + sizeof(issuer_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMsg_UnitOrder)
}

void CDOTAMsg_UnitOrder::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&position_) + sizeof(sequence_number_));
  issuer_ = -1;
}

CDOTAMsg_UnitOrder::~CDOTAMsg_UnitOrder() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMsg_UnitOrder)
  SharedDtor();
}

void CDOTAMsg_UnitOrder::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_;
  }
}

void CDOTAMsg_UnitOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMsg_UnitOrder::descriptor() {
  protobuf_dota_5fcommonmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fcommonmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMsg_UnitOrder& CDOTAMsg_UnitOrder::default_instance() {
  protobuf_dota_5fcommonmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMsg_UnitOrder* CDOTAMsg_UnitOrder::New(::google::protobuf::Arena* arena) const {
  CDOTAMsg_UnitOrder* n = new CDOTAMsg_UnitOrder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMsg_UnitOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMsg_UnitOrder)
  units_.Clear();
  if (has_position()) {
    GOOGLE_DCHECK(position_ != NULL);
    position_->::proto::dota::CMsgVector::Clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&order_type_, 0, reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&order_type_) + sizeof(sequence_number_));
    issuer_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMsg_UnitOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMsg_UnitOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 issuer = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_issuer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &issuer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.dotaunitorder_t order_type = 2 [default = DOTA_UNIT_ORDER_NONE];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::dotaunitorder_t_IsValid(value)) {
            set_order_type(static_cast< ::proto::dota::dotaunitorder_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 units = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_units())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_units())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_target_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ability_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ability_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector position = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool queue = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_queue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &queue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sequence_number = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_sequence_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMsg_UnitOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMsg_UnitOrder)
  return false;
#undef DO_
}

void CDOTAMsg_UnitOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMsg_UnitOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 issuer = 1 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->issuer(), output);
  }

  // optional .proto.dota.dotaunitorder_t order_type = 2 [default = DOTA_UNIT_ORDER_NONE];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->order_type(), output);
  }

  // repeated int32 units = 3;
  for (int i = 0, n = this->units_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->units(i), output);
  }

  // optional int32 target_index = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->target_index(), output);
  }

  // optional int32 ability_index = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ability_index(), output);
  }

  // optional .proto.dota.CMsgVector position = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->position_, output);
  }

  // optional bool queue = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->queue(), output);
  }

  // optional int32 sequence_number = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sequence_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMsg_UnitOrder)
}

::google::protobuf::uint8* CDOTAMsg_UnitOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMsg_UnitOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 issuer = 1 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->issuer(), target);
  }

  // optional .proto.dota.dotaunitorder_t order_type = 2 [default = DOTA_UNIT_ORDER_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->order_type(), target);
  }

  // repeated int32 units = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->units_, target);

  // optional int32 target_index = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->target_index(), target);
  }

  // optional int32 ability_index = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ability_index(), target);
  }

  // optional .proto.dota.CMsgVector position = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->position_, deterministic, target);
  }

  // optional bool queue = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->queue(), target);
  }

  // optional int32 sequence_number = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sequence_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMsg_UnitOrder)
  return target;
}

size_t CDOTAMsg_UnitOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMsg_UnitOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 units = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->units_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->units_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional .proto.dota.CMsgVector position = 6;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .proto.dota.dotaunitorder_t order_type = 2 [default = DOTA_UNIT_ORDER_NONE];
    if (has_order_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_type());
    }

    // optional int32 target_index = 4;
    if (has_target_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_index());
    }

    // optional int32 ability_index = 5;
    if (has_ability_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ability_index());
    }

    // optional bool queue = 7;
    if (has_queue()) {
      total_size += 1 + 1;
    }

    // optional int32 sequence_number = 8;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence_number());
    }

    // optional sint32 issuer = 1 [default = -1];
    if (has_issuer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->issuer());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMsg_UnitOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMsg_UnitOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMsg_UnitOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMsg_UnitOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMsg_UnitOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMsg_UnitOrder)
    MergeFrom(*source);
  }
}

void CDOTAMsg_UnitOrder::MergeFrom(const CDOTAMsg_UnitOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMsg_UnitOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::proto::dota::CMsgVector::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      order_type_ = from.order_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_index_ = from.target_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      ability_index_ = from.ability_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      queue_ = from.queue_;
    }
    if (cached_has_bits & 0x00000020u) {
      sequence_number_ = from.sequence_number_;
    }
    if (cached_has_bits & 0x00000040u) {
      issuer_ = from.issuer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMsg_UnitOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMsg_UnitOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMsg_UnitOrder::CopyFrom(const CDOTAMsg_UnitOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMsg_UnitOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMsg_UnitOrder::IsInitialized() const {
  return true;
}

void CDOTAMsg_UnitOrder::Swap(CDOTAMsg_UnitOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMsg_UnitOrder::InternalSwap(CDOTAMsg_UnitOrder* other) {
  units_.InternalSwap(&other->units_);
  std::swap(position_, other->position_);
  std::swap(order_type_, other->order_type_);
  std::swap(target_index_, other->target_index_);
  std::swap(ability_index_, other->ability_index_);
  std::swap(queue_, other->queue_);
  std::swap(sequence_number_, other->sequence_number_);
  std::swap(issuer_, other->issuer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMsg_UnitOrder::GetMetadata() const {
  protobuf_dota_5fcommonmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fcommonmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMsg_UnitOrder

// optional sint32 issuer = 1 [default = -1];
bool CDOTAMsg_UnitOrder::has_issuer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDOTAMsg_UnitOrder::set_has_issuer() {
  _has_bits_[0] |= 0x00000040u;
}
void CDOTAMsg_UnitOrder::clear_has_issuer() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDOTAMsg_UnitOrder::clear_issuer() {
  issuer_ = -1;
  clear_has_issuer();
}
::google::protobuf::int32 CDOTAMsg_UnitOrder::issuer() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_UnitOrder.issuer)
  return issuer_;
}
void CDOTAMsg_UnitOrder::set_issuer(::google::protobuf::int32 value) {
  set_has_issuer();
  issuer_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_UnitOrder.issuer)
}

// optional .proto.dota.dotaunitorder_t order_type = 2 [default = DOTA_UNIT_ORDER_NONE];
bool CDOTAMsg_UnitOrder::has_order_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAMsg_UnitOrder::set_has_order_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAMsg_UnitOrder::clear_has_order_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAMsg_UnitOrder::clear_order_type() {
  order_type_ = 0;
  clear_has_order_type();
}
::proto::dota::dotaunitorder_t CDOTAMsg_UnitOrder::order_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_UnitOrder.order_type)
  return static_cast< ::proto::dota::dotaunitorder_t >(order_type_);
}
void CDOTAMsg_UnitOrder::set_order_type(::proto::dota::dotaunitorder_t value) {
  assert(::proto::dota::dotaunitorder_t_IsValid(value));
  set_has_order_type();
  order_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_UnitOrder.order_type)
}

// repeated int32 units = 3;
int CDOTAMsg_UnitOrder::units_size() const {
  return units_.size();
}
void CDOTAMsg_UnitOrder::clear_units() {
  units_.Clear();
}
::google::protobuf::int32 CDOTAMsg_UnitOrder::units(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_UnitOrder.units)
  return units_.Get(index);
}
void CDOTAMsg_UnitOrder::set_units(int index, ::google::protobuf::int32 value) {
  units_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_UnitOrder.units)
}
void CDOTAMsg_UnitOrder::add_units(::google::protobuf::int32 value) {
  units_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMsg_UnitOrder.units)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CDOTAMsg_UnitOrder::units() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMsg_UnitOrder.units)
  return units_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CDOTAMsg_UnitOrder::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMsg_UnitOrder.units)
  return &units_;
}

// optional int32 target_index = 4;
bool CDOTAMsg_UnitOrder::has_target_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAMsg_UnitOrder::set_has_target_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAMsg_UnitOrder::clear_has_target_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAMsg_UnitOrder::clear_target_index() {
  target_index_ = 0;
  clear_has_target_index();
}
::google::protobuf::int32 CDOTAMsg_UnitOrder::target_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_UnitOrder.target_index)
  return target_index_;
}
void CDOTAMsg_UnitOrder::set_target_index(::google::protobuf::int32 value) {
  set_has_target_index();
  target_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_UnitOrder.target_index)
}

// optional int32 ability_index = 5;
bool CDOTAMsg_UnitOrder::has_ability_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAMsg_UnitOrder::set_has_ability_index() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAMsg_UnitOrder::clear_has_ability_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAMsg_UnitOrder::clear_ability_index() {
  ability_index_ = 0;
  clear_has_ability_index();
}
::google::protobuf::int32 CDOTAMsg_UnitOrder::ability_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_UnitOrder.ability_index)
  return ability_index_;
}
void CDOTAMsg_UnitOrder::set_ability_index(::google::protobuf::int32 value) {
  set_has_ability_index();
  ability_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_UnitOrder.ability_index)
}

// optional .proto.dota.CMsgVector position = 6;
bool CDOTAMsg_UnitOrder::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAMsg_UnitOrder::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAMsg_UnitOrder::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAMsg_UnitOrder::clear_position() {
  if (position_ != NULL) position_->::proto::dota::CMsgVector::Clear();
  clear_has_position();
}
const ::proto::dota::CMsgVector& CDOTAMsg_UnitOrder::position() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_UnitOrder.position)
  return position_ != NULL ? *position_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CDOTAMsg_UnitOrder::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMsg_UnitOrder.position)
  return position_;
}
::proto::dota::CMsgVector* CDOTAMsg_UnitOrder::release_position() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAMsg_UnitOrder.position)
  clear_has_position();
  ::proto::dota::CMsgVector* temp = position_;
  position_ = NULL;
  return temp;
}
void CDOTAMsg_UnitOrder::set_allocated_position(::proto::dota::CMsgVector* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAMsg_UnitOrder.position)
}

// optional bool queue = 7;
bool CDOTAMsg_UnitOrder::has_queue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAMsg_UnitOrder::set_has_queue() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAMsg_UnitOrder::clear_has_queue() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAMsg_UnitOrder::clear_queue() {
  queue_ = false;
  clear_has_queue();
}
bool CDOTAMsg_UnitOrder::queue() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_UnitOrder.queue)
  return queue_;
}
void CDOTAMsg_UnitOrder::set_queue(bool value) {
  set_has_queue();
  queue_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_UnitOrder.queue)
}

// optional int32 sequence_number = 8;
bool CDOTAMsg_UnitOrder::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAMsg_UnitOrder::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAMsg_UnitOrder::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAMsg_UnitOrder::clear_sequence_number() {
  sequence_number_ = 0;
  clear_has_sequence_number();
}
::google::protobuf::int32 CDOTAMsg_UnitOrder::sequence_number() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMsg_UnitOrder.sequence_number)
  return sequence_number_;
}
void CDOTAMsg_UnitOrder::set_sequence_number(::google::protobuf::int32 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMsg_UnitOrder.sequence_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
