// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_clientmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_clientmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CDOTAClientMsg_MapPingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_MapPing> {
} _CDOTAClientMsg_MapPing_default_instance_;
class CDOTAClientMsg_ItemAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_ItemAlert> {
} _CDOTAClientMsg_ItemAlert_default_instance_;
class CDOTAClientMsg_EnemyItemAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_EnemyItemAlert> {
} _CDOTAClientMsg_EnemyItemAlert_default_instance_;
class CDOTAClientMsg_ModifierAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_ModifierAlert> {
} _CDOTAClientMsg_ModifierAlert_default_instance_;
class CDOTAClientMsg_ClickedBuffDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_ClickedBuff> {
} _CDOTAClientMsg_ClickedBuff_default_instance_;
class CDOTAClientMsg_HPManaAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_HPManaAlert> {
} _CDOTAClientMsg_HPManaAlert_default_instance_;
class CDOTAClientMsg_GlyphAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_GlyphAlert> {
} _CDOTAClientMsg_GlyphAlert_default_instance_;
class CDOTAClientMsg_MapLineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_MapLine> {
} _CDOTAClientMsg_MapLine_default_instance_;
class CDOTAClientMsg_AspectRatioDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_AspectRatio> {
} _CDOTAClientMsg_AspectRatio_default_instance_;
class CDOTAClientMsg_UnitsAutoAttackModeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_UnitsAutoAttackMode> {
} _CDOTAClientMsg_UnitsAutoAttackMode_default_instance_;
class CDOTAClientMsg_UnitsAutoAttackAfterSpellDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_UnitsAutoAttackAfterSpell> {
} _CDOTAClientMsg_UnitsAutoAttackAfterSpell_default_instance_;
class CDOTAClientMsg_TeleportRequiresHaltDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_TeleportRequiresHalt> {
} _CDOTAClientMsg_TeleportRequiresHalt_default_instance_;
class CDOTAClientMsg_SearchStringDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_SearchString> {
} _CDOTAClientMsg_SearchString_default_instance_;
class CDOTAClientMsg_PauseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_Pause> {
} _CDOTAClientMsg_Pause_default_instance_;
class CDOTAClientMsg_ShopViewModeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_ShopViewMode> {
} _CDOTAClientMsg_ShopViewMode_default_instance_;
class CDOTAClientMsg_SetUnitShareFlagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_SetUnitShareFlag> {
} _CDOTAClientMsg_SetUnitShareFlag_default_instance_;
class CDOTAClientMsg_SwapRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_SwapRequest> {
} _CDOTAClientMsg_SwapRequest_default_instance_;
class CDOTAClientMsg_SwapAcceptDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_SwapAccept> {
} _CDOTAClientMsg_SwapAccept_default_instance_;
class CDOTAClientMsg_WorldLineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_WorldLine> {
} _CDOTAClientMsg_WorldLine_default_instance_;
class CDOTAClientMsg_RequestGraphUpdateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_RequestGraphUpdate> {
} _CDOTAClientMsg_RequestGraphUpdate_default_instance_;
class CDOTAClientMsg_ChatWheelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_ChatWheel> {
} _CDOTAClientMsg_ChatWheel_default_instance_;
class CDOTAClientMsg_SendStatPopupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_SendStatPopup> {
} _CDOTAClientMsg_SendStatPopup_default_instance_;
class CDOTAClientMsg_DismissAllStatPopupsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_DismissAllStatPopups> {
} _CDOTAClientMsg_DismissAllStatPopups_default_instance_;
class CDOTAClientMsg_BeginLastHitChallengeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_BeginLastHitChallenge> {
} _CDOTAClientMsg_BeginLastHitChallenge_default_instance_;
class CDOTAClientMsg_UpdateQuickBuyItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_UpdateQuickBuyItem> {
} _CDOTAClientMsg_UpdateQuickBuyItem_default_instance_;
class CDOTAClientMsg_UpdateQuickBuyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_UpdateQuickBuy> {
} _CDOTAClientMsg_UpdateQuickBuy_default_instance_;
class CDOTAClientMsg_RecordVoteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_RecordVote> {
} _CDOTAClientMsg_RecordVote_default_instance_;
class CDOTAClientMsg_WillPurchaseAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_WillPurchaseAlert> {
} _CDOTAClientMsg_WillPurchaseAlert_default_instance_;
class CDOTAClientMsg_BuyBackStateAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_BuyBackStateAlert> {
} _CDOTAClientMsg_BuyBackStateAlert_default_instance_;
class CDOTAClientMsg_QuickBuyAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_QuickBuyAlert> {
} _CDOTAClientMsg_QuickBuyAlert_default_instance_;
class CDOTAClientMsg_PlayerShowCaseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_PlayerShowCase> {
} _CDOTAClientMsg_PlayerShowCase_default_instance_;
class CDOTAClientMsg_CameraZoomAmountDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_CameraZoomAmount> {
} _CDOTAClientMsg_CameraZoomAmount_default_instance_;
class CDOTAClientMsg_BroadcasterUsingCameramanDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_BroadcasterUsingCameraman> {
} _CDOTAClientMsg_BroadcasterUsingCameraman_default_instance_;
class CDOTAClientMsg_BroadcasterUsingAssistedCameraOperatorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator> {
} _CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_default_instance_;
class CAdditionalEquipSlotClientMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CAdditionalEquipSlotClientMsg> {
} _CAdditionalEquipSlotClientMsg_default_instance_;
class CDOTAClientMsg_FreeInventoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_FreeInventory> {
} _CDOTAClientMsg_FreeInventory_default_instance_;
class CDOTAClientMsg_FillEmptySlotsWithBotsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_FillEmptySlotsWithBots> {
} _CDOTAClientMsg_FillEmptySlotsWithBots_default_instance_;
class CDOTAClientMsg_HeroStatueLikeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_HeroStatueLike> {
} _CDOTAClientMsg_HeroStatueLike_default_instance_;
class CDOTAClientMsg_EventCNY2015CmdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_EventCNY2015Cmd> {
} _CDOTAClientMsg_EventCNY2015Cmd_default_instance_;
class CDOTAClientMsg_DemoHeroDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_DemoHero> {
} _CDOTAClientMsg_DemoHero_default_instance_;
class CDOTAClientMsg_ChallengeSelectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_ChallengeSelect> {
} _CDOTAClientMsg_ChallengeSelect_default_instance_;
class CDOTAClientMsg_ChallengeRerollDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_ChallengeReroll> {
} _CDOTAClientMsg_ChallengeReroll_default_instance_;
class CDOTAClientMsg_CoinWagerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_CoinWager> {
} _CDOTAClientMsg_CoinWager_default_instance_;
class CDOTAClientMsg_CoinWagerTokenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_CoinWagerToken> {
} _CDOTAClientMsg_CoinWagerToken_default_instance_;
class CDOTAClientMsg_RankWagerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_RankWager> {
} _CDOTAClientMsg_RankWager_default_instance_;
class CDOTAClientMsg_EventPointsTipDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_EventPointsTip> {
} _CDOTAClientMsg_EventPointsTip_default_instance_;
class CDOTAClientMsg_ExecuteOrdersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_ExecuteOrders> {
} _CDOTAClientMsg_ExecuteOrders_default_instance_;
class CDOTAClientMsg_XPAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_XPAlert> {
} _CDOTAClientMsg_XPAlert_default_instance_;
class CDOTAClientMsg_KillcamDamageTakenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_KillcamDamageTaken> {
} _CDOTAClientMsg_KillcamDamageTaken_default_instance_;
class CDOTAClientMsg_MatchMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_MatchMetadata> {
} _CDOTAClientMsg_MatchMetadata_default_instance_;
class CDOTAClientMsg_KillMyHeroDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_KillMyHero> {
} _CDOTAClientMsg_KillMyHero_default_instance_;
class CDOTAClientMsg_QuestStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_QuestStatus> {
} _CDOTAClientMsg_QuestStatus_default_instance_;
class CDOTAClientMsg_ToggleAutoattackDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_ToggleAutoattack> {
} _CDOTAClientMsg_ToggleAutoattack_default_instance_;
class CDOTAClientMsg_SpecialAbilityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_SpecialAbility> {
} _CDOTAClientMsg_SpecialAbility_default_instance_;
class CDOTAClientMsg_SetEnemyStartingPositionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_SetEnemyStartingPosition> {
} _CDOTAClientMsg_SetEnemyStartingPosition_default_instance_;
class CDOTAClientMsg_SetDesiredWardPlacementDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_SetDesiredWardPlacement> {
} _CDOTAClientMsg_SetDesiredWardPlacement_default_instance_;
class CDOTAClientMsg_RollDiceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_RollDice> {
} _CDOTAClientMsg_RollDice_default_instance_;
class CDOTAClientMsg_FlipCoinDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_FlipCoin> {
} _CDOTAClientMsg_FlipCoin_default_instance_;
class CDOTAClientMsg_RequestItemSuggestionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_RequestItemSuggestions> {
} _CDOTAClientMsg_RequestItemSuggestions_default_instance_;
class CDOTAClientMsg_MakeTeamCaptainDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientMsg_MakeTeamCaptain> {
} _CDOTAClientMsg_MakeTeamCaptain_default_instance_;

namespace protobuf_dota_5fclientmessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[60];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapPing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapPing, location_ping_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ItemAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ItemAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ItemAlert, item_alert_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EnemyItemAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EnemyItemAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EnemyItemAlert, item_entindex_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ModifierAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ModifierAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ModifierAlert, buff_internal_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ModifierAlert, target_entindex_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ClickedBuff, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ClickedBuff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ClickedBuff, buff_internal_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ClickedBuff, target_entindex_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HPManaAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HPManaAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HPManaAlert, target_entindex_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_GlyphAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_GlyphAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_GlyphAlert, negative_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapLine, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MapLine, mapline_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_AspectRatio, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_AspectRatio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_AspectRatio, ratio_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackMode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackMode, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackMode, unit_type_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackAfterSpell, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackAfterSpell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UnitsAutoAttackAfterSpell, enabled_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeleportRequiresHalt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeleportRequiresHalt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_TeleportRequiresHalt, enabled_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SearchString, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SearchString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SearchString, search_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_Pause, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_Pause, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ShopViewMode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ShopViewMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ShopViewMode, mode_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetUnitShareFlag, state_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapRequest, player_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapAccept, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapAccept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SwapAccept, player_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WorldLine, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WorldLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WorldLine, worldline_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RequestGraphUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RequestGraphUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChatWheel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChatWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChatWheel, chat_message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChatWheel, param_hero_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SendStatPopup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SendStatPopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SendStatPopup, statpopup_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DismissAllStatPopups, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DismissAllStatPopups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DismissAllStatPopups, dismissallmsg_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BeginLastHitChallenge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BeginLastHitChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BeginLastHitChallenge, chosen_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BeginLastHitChallenge, helper_enabled_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuyItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuyItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuyItem, item_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuyItem, purchasable_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuy, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_UpdateQuickBuy, items_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RecordVote, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RecordVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RecordVote, choice_index_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WillPurchaseAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WillPurchaseAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WillPurchaseAlert, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WillPurchaseAlert, gold_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_WillPurchaseAlert, suggestion_player_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BuyBackStateAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BuyBackStateAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuickBuyAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuickBuyAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuickBuyAlert, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuickBuyAlert, gold_required_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_PlayerShowCase, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_PlayerShowCase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_PlayerShowCase, showcase_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CameraZoomAmount, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CameraZoomAmount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CameraZoomAmount, zoom_amount_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingCameraman, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingCameraman, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingCameraman, cameraman_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator, enabled_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, class_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, slot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlotClientMsg, def_index_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FreeInventory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FreeInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FreeInventory, equips_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FillEmptySlotsWithBots, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FillEmptySlotsWithBots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FillEmptySlotsWithBots, fillwithbots_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HeroStatueLike, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HeroStatueLike, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_HeroStatueLike, owner_player_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EventCNY2015Cmd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EventCNY2015Cmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EventCNY2015Cmd, data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, hero_id_to_spawn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, item_defs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, item_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, style_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_DemoHero, keep_existing_demohero_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeSelect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeSelect, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeSelect, slot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeSelect, sequence_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeReroll, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeReroll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeReroll, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeReroll, slot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ChallengeReroll, sequence_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoinWager, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoinWager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoinWager, wager_amount_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoinWagerToken, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoinWagerToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_CoinWagerToken, wager_token_item_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RankWager, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RankWager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RankWager, announce_wager_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EventPointsTip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EventPointsTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_EventPointsTip, recipient_player_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ExecuteOrders, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ExecuteOrders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ExecuteOrders, orders_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_XPAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_XPAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_XPAlert, target_entindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_XPAlert, damage_taken_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillcamDamageTaken, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillcamDamageTaken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillcamDamageTaken, target_entindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillcamDamageTaken, damage_taken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillcamDamageTaken, item_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillcamDamageTaken, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillcamDamageTaken, hero_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillcamDamageTaken, damage_color_),
  2,
  3,
  4,
  5,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MatchMetadata, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MatchMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MatchMetadata, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MatchMetadata, metadata_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillMyHero, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_KillMyHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, quest_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, challenge_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, goal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, fail_gametime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_QuestStatus, item_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ToggleAutoattack, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ToggleAutoattack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ToggleAutoattack, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_ToggleAutoattack, show_message_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SpecialAbility, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SpecialAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SpecialAbility, ability_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SpecialAbility, target_entindex_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetEnemyStartingPosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetEnemyStartingPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetEnemyStartingPosition, enemy_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetEnemyStartingPosition, enemy_starting_position_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetDesiredWardPlacement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetDesiredWardPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetDesiredWardPlacement, ward_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetDesiredWardPlacement, ward_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_SetDesiredWardPlacement, ward_y_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RollDice, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RollDice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RollDice, channel_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RollDice, roll_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RollDice, roll_max_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FlipCoin, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FlipCoin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_FlipCoin, channel_type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RequestItemSuggestions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_RequestItemSuggestions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MakeTeamCaptain, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MakeTeamCaptain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientMsg_MakeTeamCaptain, player_id_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(CDOTAClientMsg_MapPing)},
  { 7, 13, sizeof(CDOTAClientMsg_ItemAlert)},
  { 14, 20, sizeof(CDOTAClientMsg_EnemyItemAlert)},
  { 21, 28, sizeof(CDOTAClientMsg_ModifierAlert)},
  { 30, 37, sizeof(CDOTAClientMsg_ClickedBuff)},
  { 39, 45, sizeof(CDOTAClientMsg_HPManaAlert)},
  { 46, 52, sizeof(CDOTAClientMsg_GlyphAlert)},
  { 53, 59, sizeof(CDOTAClientMsg_MapLine)},
  { 60, 66, sizeof(CDOTAClientMsg_AspectRatio)},
  { 67, 74, sizeof(CDOTAClientMsg_UnitsAutoAttackMode)},
  { 76, 82, sizeof(CDOTAClientMsg_UnitsAutoAttackAfterSpell)},
  { 83, 89, sizeof(CDOTAClientMsg_TeleportRequiresHalt)},
  { 90, 96, sizeof(CDOTAClientMsg_SearchString)},
  { 97, 102, sizeof(CDOTAClientMsg_Pause)},
  { 102, 108, sizeof(CDOTAClientMsg_ShopViewMode)},
  { 109, 117, sizeof(CDOTAClientMsg_SetUnitShareFlag)},
  { 120, 126, sizeof(CDOTAClientMsg_SwapRequest)},
  { 127, 133, sizeof(CDOTAClientMsg_SwapAccept)},
  { 134, 140, sizeof(CDOTAClientMsg_WorldLine)},
  { 141, 146, sizeof(CDOTAClientMsg_RequestGraphUpdate)},
  { 146, 153, sizeof(CDOTAClientMsg_ChatWheel)},
  { 155, 161, sizeof(CDOTAClientMsg_SendStatPopup)},
  { 162, 168, sizeof(CDOTAClientMsg_DismissAllStatPopups)},
  { 169, 176, sizeof(CDOTAClientMsg_BeginLastHitChallenge)},
  { 178, 185, sizeof(CDOTAClientMsg_UpdateQuickBuyItem)},
  { 187, 193, sizeof(CDOTAClientMsg_UpdateQuickBuy)},
  { 194, 200, sizeof(CDOTAClientMsg_RecordVote)},
  { 201, 209, sizeof(CDOTAClientMsg_WillPurchaseAlert)},
  { 212, 217, sizeof(CDOTAClientMsg_BuyBackStateAlert)},
  { 217, 224, sizeof(CDOTAClientMsg_QuickBuyAlert)},
  { 226, 232, sizeof(CDOTAClientMsg_PlayerShowCase)},
  { 233, 239, sizeof(CDOTAClientMsg_CameraZoomAmount)},
  { 240, 246, sizeof(CDOTAClientMsg_BroadcasterUsingCameraman)},
  { 247, 253, sizeof(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)},
  { 254, 262, sizeof(CAdditionalEquipSlotClientMsg)},
  { 265, 271, sizeof(CDOTAClientMsg_FreeInventory)},
  { 272, 278, sizeof(CDOTAClientMsg_FillEmptySlotsWithBots)},
  { 279, 285, sizeof(CDOTAClientMsg_HeroStatueLike)},
  { 286, 292, sizeof(CDOTAClientMsg_EventCNY2015Cmd)},
  { 293, 304, sizeof(CDOTAClientMsg_DemoHero)},
  { 310, 318, sizeof(CDOTAClientMsg_ChallengeSelect)},
  { 321, 329, sizeof(CDOTAClientMsg_ChallengeReroll)},
  { 332, 338, sizeof(CDOTAClientMsg_CoinWager)},
  { 339, 345, sizeof(CDOTAClientMsg_CoinWagerToken)},
  { 346, 352, sizeof(CDOTAClientMsg_RankWager)},
  { 353, 359, sizeof(CDOTAClientMsg_EventPointsTip)},
  { 360, 366, sizeof(CDOTAClientMsg_ExecuteOrders)},
  { 367, 374, sizeof(CDOTAClientMsg_XPAlert)},
  { 376, 387, sizeof(CDOTAClientMsg_KillcamDamageTaken)},
  { 393, 400, sizeof(CDOTAClientMsg_MatchMetadata)},
  { 402, 407, sizeof(CDOTAClientMsg_KillMyHero)},
  { 407, 419, sizeof(CDOTAClientMsg_QuestStatus)},
  { 426, 433, sizeof(CDOTAClientMsg_ToggleAutoattack)},
  { 435, 442, sizeof(CDOTAClientMsg_SpecialAbility)},
  { 444, 451, sizeof(CDOTAClientMsg_SetEnemyStartingPosition)},
  { 453, 461, sizeof(CDOTAClientMsg_SetDesiredWardPlacement)},
  { 464, 472, sizeof(CDOTAClientMsg_RollDice)},
  { 475, 481, sizeof(CDOTAClientMsg_FlipCoin)},
  { 482, 487, sizeof(CDOTAClientMsg_RequestItemSuggestions)},
  { 487, 493, sizeof(CDOTAClientMsg_MakeTeamCaptain)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_MapPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_ItemAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_EnemyItemAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_ModifierAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_ClickedBuff_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_HPManaAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_GlyphAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_MapLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_AspectRatio_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_UnitsAutoAttackMode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_UnitsAutoAttackAfterSpell_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_TeleportRequiresHalt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_SearchString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_Pause_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_ShopViewMode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_SetUnitShareFlag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_SwapRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_SwapAccept_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_WorldLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_RequestGraphUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_ChatWheel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_SendStatPopup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_DismissAllStatPopups_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_BeginLastHitChallenge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_UpdateQuickBuyItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_UpdateQuickBuy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_RecordVote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_WillPurchaseAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_BuyBackStateAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_QuickBuyAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_PlayerShowCase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_CameraZoomAmount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_BroadcasterUsingCameraman_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CAdditionalEquipSlotClientMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_FreeInventory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_FillEmptySlotsWithBots_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_HeroStatueLike_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_EventCNY2015Cmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_DemoHero_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_ChallengeSelect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_ChallengeReroll_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_CoinWager_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_CoinWagerToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_RankWager_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_EventPointsTip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_ExecuteOrders_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_XPAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_KillcamDamageTaken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_MatchMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_KillMyHero_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_QuestStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_ToggleAutoattack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_SpecialAbility_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_SetEnemyStartingPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_SetDesiredWardPlacement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_RollDice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_FlipCoin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_RequestItemSuggestions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientMsg_MakeTeamCaptain_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dota_clientmessages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 60);
}

}  // namespace

void TableStruct::Shutdown() {
  _CDOTAClientMsg_MapPing_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CDOTAClientMsg_ItemAlert_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CDOTAClientMsg_EnemyItemAlert_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CDOTAClientMsg_ModifierAlert_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CDOTAClientMsg_ClickedBuff_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CDOTAClientMsg_HPManaAlert_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CDOTAClientMsg_GlyphAlert_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CDOTAClientMsg_MapLine_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CDOTAClientMsg_AspectRatio_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CDOTAClientMsg_UnitsAutoAttackMode_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CDOTAClientMsg_UnitsAutoAttackAfterSpell_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CDOTAClientMsg_TeleportRequiresHalt_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CDOTAClientMsg_SearchString_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CDOTAClientMsg_Pause_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CDOTAClientMsg_ShopViewMode_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CDOTAClientMsg_SetUnitShareFlag_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CDOTAClientMsg_SwapRequest_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CDOTAClientMsg_SwapAccept_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CDOTAClientMsg_WorldLine_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CDOTAClientMsg_RequestGraphUpdate_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CDOTAClientMsg_ChatWheel_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CDOTAClientMsg_SendStatPopup_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CDOTAClientMsg_DismissAllStatPopups_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CDOTAClientMsg_BeginLastHitChallenge_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CDOTAClientMsg_UpdateQuickBuyItem_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CDOTAClientMsg_UpdateQuickBuy_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CDOTAClientMsg_RecordVote_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CDOTAClientMsg_WillPurchaseAlert_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CDOTAClientMsg_BuyBackStateAlert_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CDOTAClientMsg_QuickBuyAlert_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CDOTAClientMsg_PlayerShowCase_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _CDOTAClientMsg_CameraZoomAmount_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CDOTAClientMsg_BroadcasterUsingCameraman_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CAdditionalEquipSlotClientMsg_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _CDOTAClientMsg_FreeInventory_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _CDOTAClientMsg_FillEmptySlotsWithBots_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _CDOTAClientMsg_HeroStatueLike_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _CDOTAClientMsg_EventCNY2015Cmd_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _CDOTAClientMsg_DemoHero_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _CDOTAClientMsg_ChallengeSelect_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _CDOTAClientMsg_ChallengeReroll_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _CDOTAClientMsg_CoinWager_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _CDOTAClientMsg_CoinWagerToken_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _CDOTAClientMsg_RankWager_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _CDOTAClientMsg_EventPointsTip_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _CDOTAClientMsg_ExecuteOrders_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _CDOTAClientMsg_XPAlert_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _CDOTAClientMsg_KillcamDamageTaken_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _CDOTAClientMsg_MatchMetadata_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _CDOTAClientMsg_KillMyHero_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _CDOTAClientMsg_QuestStatus_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _CDOTAClientMsg_ToggleAutoattack_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _CDOTAClientMsg_SpecialAbility_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _CDOTAClientMsg_SetEnemyStartingPosition_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _CDOTAClientMsg_SetDesiredWardPlacement_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _CDOTAClientMsg_RollDice_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _CDOTAClientMsg_FlipCoin_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _CDOTAClientMsg_RequestItemSuggestions_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _CDOTAClientMsg_MakeTeamCaptain_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_dota_5fcommonmessages_2eproto::InitDefaults();
  _CDOTAClientMsg_MapPing_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_ItemAlert_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_EnemyItemAlert_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_ModifierAlert_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_ClickedBuff_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_HPManaAlert_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_GlyphAlert_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_MapLine_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_AspectRatio_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_UnitsAutoAttackMode_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_UnitsAutoAttackAfterSpell_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_TeleportRequiresHalt_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_SearchString_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_Pause_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_ShopViewMode_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_SetUnitShareFlag_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_SwapRequest_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_SwapAccept_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_WorldLine_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_RequestGraphUpdate_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_ChatWheel_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_SendStatPopup_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_DismissAllStatPopups_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_BeginLastHitChallenge_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_UpdateQuickBuyItem_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_UpdateQuickBuy_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_RecordVote_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_WillPurchaseAlert_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_BuyBackStateAlert_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_QuickBuyAlert_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_PlayerShowCase_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_CameraZoomAmount_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_BroadcasterUsingCameraman_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_default_instance_.DefaultConstruct();
  _CAdditionalEquipSlotClientMsg_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_FreeInventory_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_FillEmptySlotsWithBots_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_HeroStatueLike_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_EventCNY2015Cmd_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_DemoHero_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_ChallengeSelect_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_ChallengeReroll_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_CoinWager_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_CoinWagerToken_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_RankWager_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_EventPointsTip_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_ExecuteOrders_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_XPAlert_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_KillcamDamageTaken_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_MatchMetadata_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_KillMyHero_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_QuestStatus_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_ToggleAutoattack_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_SpecialAbility_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_SetEnemyStartingPosition_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_SetDesiredWardPlacement_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_RollDice_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_FlipCoin_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_RequestItemSuggestions_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_MakeTeamCaptain_default_instance_.DefaultConstruct();
  _CDOTAClientMsg_MapPing_default_instance_.get_mutable()->location_ping_ = const_cast< ::proto::dota::CDOTAMsg_LocationPing*>(
      ::proto::dota::CDOTAMsg_LocationPing::internal_default_instance());
  _CDOTAClientMsg_ItemAlert_default_instance_.get_mutable()->item_alert_ = const_cast< ::proto::dota::CDOTAMsg_ItemAlert*>(
      ::proto::dota::CDOTAMsg_ItemAlert::internal_default_instance());
  _CDOTAClientMsg_MapLine_default_instance_.get_mutable()->mapline_ = const_cast< ::proto::dota::CDOTAMsg_MapLine*>(
      ::proto::dota::CDOTAMsg_MapLine::internal_default_instance());
  _CDOTAClientMsg_WorldLine_default_instance_.get_mutable()->worldline_ = const_cast< ::proto::dota::CDOTAMsg_WorldLine*>(
      ::proto::dota::CDOTAMsg_WorldLine::internal_default_instance());
  _CDOTAClientMsg_SendStatPopup_default_instance_.get_mutable()->statpopup_ = const_cast< ::proto::dota::CDOTAMsg_SendStatPopup*>(
      ::proto::dota::CDOTAMsg_SendStatPopup::internal_default_instance());
  _CDOTAClientMsg_DismissAllStatPopups_default_instance_.get_mutable()->dismissallmsg_ = const_cast< ::proto::dota::CDOTAMsg_DismissAllStatPopups*>(
      ::proto::dota::CDOTAMsg_DismissAllStatPopups::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\031dota_clientmessages.proto\022\nproto.dota\032"
      "\031dota_commonmessages.proto\"R\n\026CDOTAClien"
      "tMsg_MapPing\0228\n\rlocation_ping\030\001 \001(\0132!.pr"
      "oto.dota.CDOTAMsg_LocationPing\"N\n\030CDOTAC"
      "lientMsg_ItemAlert\0222\n\nitem_alert\030\001 \001(\0132\036"
      ".proto.dota.CDOTAMsg_ItemAlert\"6\n\035CDOTAC"
      "lientMsg_EnemyItemAlert\022\025\n\ritem_entindex"
      "\030\001 \001(\r\"T\n\034CDOTAClientMsg_ModifierAlert\022\033"
      "\n\023buff_internal_index\030\001 \001(\005\022\027\n\017target_en"
      "tindex\030\002 \001(\r\"R\n\032CDOTAClientMsg_ClickedBu"
      "ff\022\033\n\023buff_internal_index\030\001 \001(\005\022\027\n\017targe"
      "t_entindex\030\002 \001(\r\"5\n\032CDOTAClientMsg_HPMan"
      "aAlert\022\027\n\017target_entindex\030\001 \001(\r\"-\n\031CDOTA"
      "ClientMsg_GlyphAlert\022\020\n\010negative\030\001 \001(\010\"G"
      "\n\026CDOTAClientMsg_MapLine\022-\n\007mapline\030\001 \001("
      "\0132\034.proto.dota.CDOTAMsg_MapLine\"+\n\032CDOTA"
      "ClientMsg_AspectRatio\022\r\n\005ratio\030\001 \001(\002\"\270\002\n"
      "\"CDOTAClientMsg_UnitsAutoAttackMode\022K\n\004m"
      "ode\030\001 \001(\01624.proto.dota.CDOTAClientMsg_Un"
      "itsAutoAttackMode.EMode:\007INVALID\022S\n\tunit"
      "_type\030\002 \001(\01628.proto.dota.CDOTAClientMsg_"
      "UnitsAutoAttackMode.EUnitType:\006NORMAL\"I\n"
      "\005EMode\022\024\n\007INVALID\020\377\377\377\377\377\377\377\377\377\001\022\t\n\005NEVER\020\000\022"
      "\023\n\017AFTER_SPELLCAST\020\001\022\n\n\006ALWAYS\020\002\"%\n\tEUni"
      "tType\022\n\n\006NORMAL\020\000\022\014\n\010SUMMONED\020\001\";\n(CDOTA"
      "ClientMsg_UnitsAutoAttackAfterSpell\022\017\n\007e"
      "nabled\030\001 \001(\010\"6\n#CDOTAClientMsg_TeleportR"
      "equiresHalt\022\017\n\007enabled\030\001 \001(\010\"-\n\033CDOTACli"
      "entMsg_SearchString\022\016\n\006search\030\001 \001(\t\"\026\n\024C"
      "DOTAClientMsg_Pause\"+\n\033CDOTAClientMsg_Sh"
      "opViewMode\022\014\n\004mode\030\001 \001(\r\"P\n\037CDOTAClientM"
      "sg_SetUnitShareFlag\022\020\n\010playerID\030\001 \001(\r\022\014\n"
      "\004flag\030\002 \001(\r\022\r\n\005state\030\003 \001(\010\"/\n\032CDOTAClien"
      "tMsg_SwapRequest\022\021\n\tplayer_id\030\001 \001(\r\".\n\031C"
      "DOTAClientMsg_SwapAccept\022\021\n\tplayer_id\030\001 "
      "\001(\r\"M\n\030CDOTAClientMsg_WorldLine\0221\n\tworld"
      "line\030\001 \001(\0132\036.proto.dota.CDOTAMsg_WorldLi"
      "ne\"#\n!CDOTAClientMsg_RequestGraphUpdate\""
      "J\n\030CDOTAClientMsg_ChatWheel\022\027\n\017chat_mess"
      "age_id\030\001 \001(\r\022\025\n\rparam_hero_id\030\002 \001(\r\"U\n\034C"
      "DOTAClientMsg_SendStatPopup\0225\n\tstatpopup"
      "\030\001 \001(\0132\".proto.dota.CDOTAMsg_SendStatPop"
      "up\"g\n#CDOTAClientMsg_DismissAllStatPopup"
      "s\022@\n\rdismissallmsg\030\001 \001(\0132).proto.dota.CD"
      "OTAMsg_DismissAllStatPopups\"S\n$CDOTAClie"
      "ntMsg_BeginLastHitChallenge\022\023\n\013chosen_la"
      "ne\030\001 \001(\r\022\026\n\016helper_enabled\030\002 \001(\010\"K\n!CDOT"
      "AClientMsg_UpdateQuickBuyItem\022\021\n\titem_ty"
      "pe\030\001 \001(\005\022\023\n\013purchasable\030\002 \001(\010\"]\n\035CDOTACl"
      "ientMsg_UpdateQuickBuy\022<\n\005items\030\001 \003(\0132-."
      "proto.dota.CDOTAClientMsg_UpdateQuickBuy"
      "Item\"1\n\031CDOTAClientMsg_RecordVote\022\024\n\014cho"
      "ice_index\030\001 \001(\005\"h\n CDOTAClientMsg_WillPu"
      "rchaseAlert\022\016\n\006itemid\030\001 \001(\005\022\026\n\016gold_rema"
      "ining\030\002 \001(\r\022\034\n\024suggestion_player_id\030\003 \001("
      "\005\"\"\n CDOTAClientMsg_BuyBackStateAlert\"E\n"
      "\034CDOTAClientMsg_QuickBuyAlert\022\016\n\006itemid\030"
      "\001 \001(\005\022\025\n\rgold_required\030\002 \001(\005\"1\n\035CDOTACli"
      "entMsg_PlayerShowCase\022\020\n\010showcase\030\001 \001(\010\""
      "6\n\037CDOTAClientMsg_CameraZoomAmount\022\023\n\013zo"
      "om_amount\030\001 \001(\002\"=\n(CDOTAClientMsg_Broadc"
      "asterUsingCameraman\022\021\n\tcameraman\030\001 \001(\010\"H"
      "\n5CDOTAClientMsg_BroadcasterUsingAssiste"
      "dCameraOperator\022\017\n\007enabled\030\001 \001(\010\"U\n\035CAdd"
      "itionalEquipSlotClientMsg\022\020\n\010class_id\030\001 "
      "\001(\r\022\017\n\007slot_id\030\002 \001(\r\022\021\n\tdef_index\030\003 \001(\r\""
      "Y\n\034CDOTAClientMsg_FreeInventory\0229\n\006equip"
      "s\030\001 \003(\0132).proto.dota.CAdditionalEquipSlo"
      "tClientMsg\"=\n%CDOTAClientMsg_FillEmptySl"
      "otsWithBots\022\024\n\014fillwithbots\030\001 \001(\010\"8\n\035CDO"
      "TAClientMsg_HeroStatueLike\022\027\n\017owner_play"
      "er_id\030\001 \001(\r\".\n\036CDOTAClientMsg_EventCNY20"
      "15Cmd\022\014\n\004data\030\001 \001(\014\"\236\001\n\027CDOTAClientMsg_D"
      "emoHero\022\017\n\007hero_id\030\001 \001(\005\022\030\n\020hero_id_to_s"
      "pawn\030\002 \001(\005\022\021\n\titem_defs\030\003 \003(\r\022\020\n\010item_id"
      "s\030\004 \003(\004\022\023\n\013style_index\030\005 \001(\r\022\036\n\026keep_exi"
      "sting_demohero\030\006 \001(\010\"X\n\036CDOTAClientMsg_C"
      "hallengeSelect\022\020\n\010event_id\030\001 \001(\r\022\017\n\007slot"
      "_id\030\002 \001(\r\022\023\n\013sequence_id\030\003 \001(\r\"X\n\036CDOTAC"
      "lientMsg_ChallengeReroll\022\020\n\010event_id\030\001 \001"
      "(\r\022\017\n\007slot_id\030\002 \001(\r\022\023\n\013sequence_id\030\003 \001(\r"
      "\"0\n\030CDOTAClientMsg_CoinWager\022\024\n\014wager_am"
      "ount\030\001 \001(\r\"<\n\035CDOTAClientMsg_CoinWagerTo"
      "ken\022\033\n\023wager_token_item_id\030\001 \001(\004\"2\n\030CDOT"
      "AClientMsg_RankWager\022\026\n\016announce_wager\030\001"
      " \001(\010\"<\n\035CDOTAClientMsg_EventPointsTip\022\033\n"
      "\023recipient_player_id\030\001 \001(\r\"N\n\034CDOTAClien"
      "tMsg_ExecuteOrders\022.\n\006orders\030\001 \003(\0132\036.pro"
      "to.dota.CDOTAMsg_UnitOrder\"G\n\026CDOTAClien"
      "tMsg_XPAlert\022\027\n\017target_entindex\030\001 \001(\r\022\024\n"
      "\014damage_taken\030\002 \001(\r\"\237\001\n!CDOTAClientMsg_K"
      "illcamDamageTaken\022\027\n\017target_entindex\030\001 \001"
      "(\r\022\024\n\014damage_taken\030\002 \001(\r\022\021\n\titem_type\030\003 "
      "\001(\r\022\017\n\007item_id\030\004 \001(\r\022\021\n\thero_name\030\005 \001(\t\022"
      "\024\n\014damage_color\030\006 \001(\t\"B\n\034CDOTAClientMsg_"
      "MatchMetadata\022\020\n\010match_id\030\001 \001(\004\022\020\n\010metad"
      "ata\030\002 \001(\014\"\033\n\031CDOTAClientMsg_KillMyHero\"\233"
      "\001\n\032CDOTAClientMsg_QuestStatus\022\020\n\010quest_i"
      "d\030\001 \001(\r\022\024\n\014challenge_id\030\002 \001(\r\022\020\n\010progres"
      "s\030\003 \001(\r\022\014\n\004goal\030\004 \001(\r\022\r\n\005query\030\005 \001(\r\022\025\n\r"
      "fail_gametime\030\006 \001(\002\022\017\n\007item_id\030\007 \001(\r\"E\n\037"
      "CDOTAClientMsg_ToggleAutoattack\022\014\n\004mode\030"
      "\001 \001(\005\022\024\n\014show_message\030\002 \001(\010\"O\n\035CDOTAClie"
      "ntMsg_SpecialAbility\022\025\n\rability_index\030\001 "
      "\001(\r\022\027\n\017target_entindex\030\002 \001(\r\"c\n\'CDOTACli"
      "entMsg_SetEnemyStartingPosition\022\027\n\017enemy"
      "_player_id\030\001 \001(\r\022\037\n\027enemy_starting_posit"
      "ion\030\002 \001(\r\"\\\n&CDOTAClientMsg_SetDesiredWa"
      "rdPlacement\022\022\n\nward_index\030\001 \001(\r\022\016\n\006ward_"
      "x\030\002 \001(\002\022\016\n\006ward_y\030\003 \001(\002\"S\n\027CDOTAClientMs"
      "g_RollDice\022\024\n\014channel_type\030\001 \001(\r\022\020\n\010roll"
      "_min\030\002 \001(\r\022\020\n\010roll_max\030\003 \001(\r\"/\n\027CDOTACli"
      "entMsg_FlipCoin\022\024\n\014channel_type\030\001 \001(\r\"\'\n"
      "%CDOTAClientMsg_RequestItemSuggestions\"3"
      "\n\036CDOTAClientMsg_MakeTeamCaptain\022\021\n\tplay"
      "er_id\030\001 \001(\r*\225\017\n\023EDotaClientMessages\022\024\n\017D"
      "OTA_CM_MapLine\020\255\002\022\030\n\023DOTA_CM_AspectRatio"
      "\020\256\002\022\024\n\017DOTA_CM_MapPing\020\257\002\022\034\n\027DOTA_CM_Uni"
      "tsAutoAttack\020\260\002\022\031\n\024DOTA_CM_SearchString\020"
      "\263\002\022\022\n\rDOTA_CM_Pause\020\264\002\022\031\n\024DOTA_CM_ShopVi"
      "ewMode\020\265\002\022\035\n\030DOTA_CM_SetUnitShareFlag\020\266\002"
      "\022\030\n\023DOTA_CM_SwapRequest\020\267\002\022\027\n\022DOTA_CM_Sw"
      "apAccept\020\270\002\022\026\n\021DOTA_CM_WorldLine\020\271\002\022\037\n\032D"
      "OTA_CM_RequestGraphUpdate\020\272\002\022\026\n\021DOTA_CM_"
      "ItemAlert\020\273\002\022\026\n\021DOTA_CM_ChatWheel\020\274\002\022\032\n\025"
      "DOTA_CM_SendStatPopup\020\275\002\022\"\n\035DOTA_CM_Begi"
      "nLastHitChallenge\020\276\002\022\033\n\026DOTA_CM_UpdateQu"
      "ickBuy\020\277\002\022\036\n\031DOTA_CM_UpdateCoachListen\020\300"
      "\002\022\031\n\024DOTA_CM_CoachHUDPing\020\301\002\022\027\n\022DOTA_CM_"
      "RecordVote\020\302\002\022&\n!DOTA_CM_UnitsAutoAttack"
      "AfterSpell\020\303\002\022\036\n\031DOTA_CM_WillPurchaseAle"
      "rt\020\304\002\022\033\n\026DOTA_CM_PlayerShowCase\020\305\002\022!\n\034DO"
      "TA_CM_TeleportRequiresHalt\020\306\002\022\035\n\030DOTA_CM"
      "_CameraZoomAmount\020\307\002\022%\n DOTA_CM_Broadcas"
      "terUsingCamerman\020\310\002\0223\n.DOTA_CM_Broadcast"
      "erUsingAssistedCameraOperator\020\311\002\022\033\n\026DOTA"
      "_CM_EnemyItemAlert\020\312\002\022\032\n\025DOTA_CM_FreeInv"
      "entory\020\313\002\022\036\n\031DOTA_CM_BuyBackStateAlert\020\314"
      "\002\022\032\n\025DOTA_CM_QuickBuyAlert\020\315\002\022\033\n\026DOTA_CM"
      "_HeroStatueLike\020\316\002\022\032\n\025DOTA_CM_ModifierAl"
      "ert\020\317\002\022\037\n\032DOTA_CM_TeamShowcaseEditor\020\320\002\022"
      "\030\n\023DOTA_CM_HPManaAlert\020\321\002\022\027\n\022DOTA_CM_Gly"
      "phAlert\020\322\002\022#\n\036DOTA_CM_TeamShowcaseClient"
      "Data\020\323\002\022\035\n\030DOTA_CM_PlayTeamShowcase\020\324\002\022\034"
      "\n\027DOTA_CM_EventCNY2015Cmd\020\325\002\022#\n\036DOTA_CM_"
      "FillEmptySlotsWithBots\020\326\002\022\025\n\020DOTA_CM_Dem"
      "oHero\020\327\002\022$\n\037DOTA_CM_AbilityLearnModeTogg"
      "led\020\330\002\022\034\n\027DOTA_CM_AbilityStartUse\020\331\002\022\034\n\027"
      "DOTA_CM_ChallengeSelect\020\332\002\022\034\n\027DOTA_CM_Ch"
      "allengeReroll\020\333\002\022\030\n\023DOTA_CM_ClickedBuff\020"
      "\334\002\022\026\n\021DOTA_CM_CoinWager\020\335\002\022\032\n\025DOTA_CM_Ex"
      "ecuteOrders\020\336\002\022\024\n\017DOTA_CM_XPAlert\020\337\002\022\033\n\026"
      "DOTA_CM_EventPointsTip\020\341\002\022\032\n\025DOTA_CM_Mat"
      "chMetadata\020\342\002\022\027\n\022DOTA_CM_KillMyHero\020\343\002\022\030"
      "\n\023DOTA_CM_QuestStatus\020\344\002\022\035\n\030DOTA_CM_Togg"
      "leAutoattack\020\345\002\022\033\n\026DOTA_CM_SpecialAbilit"
      "y\020\346\002\022\037\n\032DOTA_CM_KillcamDamageTaken\020\347\002\022%\n"
      " DOTA_CM_SetEnemyStartingPosition\020\350\002\022$\n\037"
      "DOTA_CM_SetDesiredWardPlacement\020\351\002\022\025\n\020DO"
      "TA_CM_RollDice\020\352\002\022\025\n\020DOTA_CM_FlipCoin\020\353\002"
      "\022#\n\036DOTA_CM_RequestItemSuggestions\020\354\002\022\034\n"
      "\027DOTA_CM_MakeTeamCaptain\020\355\002\022\033\n\026DOTA_CM_C"
      "oinWagerToken\020\356\002\022\026\n\021DOTA_CM_RankWager\020\357\002"
      "\022!\n\034DOTA_CM_DismissAllStatPopups\020\360\002B\005H\001\200"
      "\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6562);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_clientmessages.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_dota_5fcommonmessages_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dota_5fclientmessages_2eproto

const ::google::protobuf::EnumDescriptor* CDOTAClientMsg_UnitsAutoAttackMode_EMode_descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_enum_descriptors[0];
}
bool CDOTAClientMsg_UnitsAutoAttackMode_EMode_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::INVALID;
const CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::NEVER;
const CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::AFTER_SPELLCAST;
const CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::ALWAYS;
const CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::EMode_MIN;
const CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::EMode_MAX;
const int CDOTAClientMsg_UnitsAutoAttackMode::EMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_enum_descriptors[1];
}
bool CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode::NORMAL;
const CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode::SUMMONED;
const CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode::EUnitType_MIN;
const CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode::EUnitType_MAX;
const int CDOTAClientMsg_UnitsAutoAttackMode::EUnitType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EDotaClientMessages_descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_enum_descriptors[2];
}
bool EDotaClientMessages_IsValid(int value) {
  switch (value) {
    case 301:
    case 302:
    case 303:
    case 304:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_MapPing::kLocationPingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_MapPing::CDOTAClientMsg_MapPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_MapPing)
}
CDOTAClientMsg_MapPing::CDOTAClientMsg_MapPing(const CDOTAClientMsg_MapPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location_ping()) {
    location_ping_ = new ::proto::dota::CDOTAMsg_LocationPing(*from.location_ping_);
  } else {
    location_ping_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_MapPing)
}

void CDOTAClientMsg_MapPing::SharedCtor() {
  _cached_size_ = 0;
  location_ping_ = NULL;
}

CDOTAClientMsg_MapPing::~CDOTAClientMsg_MapPing() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_MapPing)
  SharedDtor();
}

void CDOTAClientMsg_MapPing::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_ping_;
  }
}

void CDOTAClientMsg_MapPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_MapPing::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_MapPing& CDOTAClientMsg_MapPing::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_MapPing* CDOTAClientMsg_MapPing::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_MapPing* n = new CDOTAClientMsg_MapPing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_MapPing::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_MapPing)
  if (has_location_ping()) {
    GOOGLE_DCHECK(location_ping_ != NULL);
    location_ping_->::proto::dota::CDOTAMsg_LocationPing::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_MapPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_MapPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CDOTAMsg_LocationPing location_ping = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location_ping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_MapPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_MapPing)
  return false;
#undef DO_
}

void CDOTAClientMsg_MapPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_MapPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_LocationPing location_ping = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_ping_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_MapPing)
}

::google::protobuf::uint8* CDOTAClientMsg_MapPing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_MapPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_LocationPing location_ping = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->location_ping_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_MapPing)
  return target;
}

size_t CDOTAClientMsg_MapPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_MapPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CDOTAMsg_LocationPing location_ping = 1;
  if (has_location_ping()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_ping_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_MapPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_MapPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_MapPing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_MapPing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_MapPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_MapPing)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MapPing::MergeFrom(const CDOTAClientMsg_MapPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_MapPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location_ping()) {
    mutable_location_ping()->::proto::dota::CDOTAMsg_LocationPing::MergeFrom(from.location_ping());
  }
}

void CDOTAClientMsg_MapPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_MapPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MapPing::CopyFrom(const CDOTAClientMsg_MapPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_MapPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MapPing::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_MapPing::Swap(CDOTAClientMsg_MapPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_MapPing::InternalSwap(CDOTAClientMsg_MapPing* other) {
  std::swap(location_ping_, other->location_ping_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_MapPing::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_MapPing

// optional .proto.dota.CDOTAMsg_LocationPing location_ping = 1;
bool CDOTAClientMsg_MapPing::has_location_ping() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_MapPing::set_has_location_ping() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_MapPing::clear_has_location_ping() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_MapPing::clear_location_ping() {
  if (location_ping_ != NULL) location_ping_->::proto::dota::CDOTAMsg_LocationPing::Clear();
  clear_has_location_ping();
}
const ::proto::dota::CDOTAMsg_LocationPing& CDOTAClientMsg_MapPing::location_ping() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_MapPing.location_ping)
  return location_ping_ != NULL ? *location_ping_
                         : *::proto::dota::CDOTAMsg_LocationPing::internal_default_instance();
}
::proto::dota::CDOTAMsg_LocationPing* CDOTAClientMsg_MapPing::mutable_location_ping() {
  set_has_location_ping();
  if (location_ping_ == NULL) {
    location_ping_ = new ::proto::dota::CDOTAMsg_LocationPing;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAClientMsg_MapPing.location_ping)
  return location_ping_;
}
::proto::dota::CDOTAMsg_LocationPing* CDOTAClientMsg_MapPing::release_location_ping() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAClientMsg_MapPing.location_ping)
  clear_has_location_ping();
  ::proto::dota::CDOTAMsg_LocationPing* temp = location_ping_;
  location_ping_ = NULL;
  return temp;
}
void CDOTAClientMsg_MapPing::set_allocated_location_ping(::proto::dota::CDOTAMsg_LocationPing* location_ping) {
  delete location_ping_;
  location_ping_ = location_ping;
  if (location_ping) {
    set_has_location_ping();
  } else {
    clear_has_location_ping();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAClientMsg_MapPing.location_ping)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_ItemAlert::kItemAlertFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_ItemAlert::CDOTAClientMsg_ItemAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_ItemAlert)
}
CDOTAClientMsg_ItemAlert::CDOTAClientMsg_ItemAlert(const CDOTAClientMsg_ItemAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_item_alert()) {
    item_alert_ = new ::proto::dota::CDOTAMsg_ItemAlert(*from.item_alert_);
  } else {
    item_alert_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_ItemAlert)
}

void CDOTAClientMsg_ItemAlert::SharedCtor() {
  _cached_size_ = 0;
  item_alert_ = NULL;
}

CDOTAClientMsg_ItemAlert::~CDOTAClientMsg_ItemAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_ItemAlert)
  SharedDtor();
}

void CDOTAClientMsg_ItemAlert::SharedDtor() {
  if (this != internal_default_instance()) {
    delete item_alert_;
  }
}

void CDOTAClientMsg_ItemAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ItemAlert::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_ItemAlert& CDOTAClientMsg_ItemAlert::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_ItemAlert* CDOTAClientMsg_ItemAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_ItemAlert* n = new CDOTAClientMsg_ItemAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_ItemAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_ItemAlert)
  if (has_item_alert()) {
    GOOGLE_DCHECK(item_alert_ != NULL);
    item_alert_->::proto::dota::CDOTAMsg_ItemAlert::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_ItemAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_ItemAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CDOTAMsg_ItemAlert item_alert = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_alert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_ItemAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_ItemAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_ItemAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_ItemAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_ItemAlert item_alert = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->item_alert_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_ItemAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_ItemAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_ItemAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_ItemAlert item_alert = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->item_alert_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_ItemAlert)
  return target;
}

size_t CDOTAClientMsg_ItemAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_ItemAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CDOTAMsg_ItemAlert item_alert = 1;
  if (has_item_alert()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->item_alert_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ItemAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_ItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ItemAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_ItemAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_ItemAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_ItemAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ItemAlert::MergeFrom(const CDOTAClientMsg_ItemAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_ItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item_alert()) {
    mutable_item_alert()->::proto::dota::CDOTAMsg_ItemAlert::MergeFrom(from.item_alert());
  }
}

void CDOTAClientMsg_ItemAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_ItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ItemAlert::CopyFrom(const CDOTAClientMsg_ItemAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_ItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ItemAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ItemAlert::Swap(CDOTAClientMsg_ItemAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ItemAlert::InternalSwap(CDOTAClientMsg_ItemAlert* other) {
  std::swap(item_alert_, other->item_alert_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_ItemAlert::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_ItemAlert

// optional .proto.dota.CDOTAMsg_ItemAlert item_alert = 1;
bool CDOTAClientMsg_ItemAlert::has_item_alert() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_ItemAlert::set_has_item_alert() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_ItemAlert::clear_has_item_alert() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_ItemAlert::clear_item_alert() {
  if (item_alert_ != NULL) item_alert_->::proto::dota::CDOTAMsg_ItemAlert::Clear();
  clear_has_item_alert();
}
const ::proto::dota::CDOTAMsg_ItemAlert& CDOTAClientMsg_ItemAlert::item_alert() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_ItemAlert.item_alert)
  return item_alert_ != NULL ? *item_alert_
                         : *::proto::dota::CDOTAMsg_ItemAlert::internal_default_instance();
}
::proto::dota::CDOTAMsg_ItemAlert* CDOTAClientMsg_ItemAlert::mutable_item_alert() {
  set_has_item_alert();
  if (item_alert_ == NULL) {
    item_alert_ = new ::proto::dota::CDOTAMsg_ItemAlert;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAClientMsg_ItemAlert.item_alert)
  return item_alert_;
}
::proto::dota::CDOTAMsg_ItemAlert* CDOTAClientMsg_ItemAlert::release_item_alert() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAClientMsg_ItemAlert.item_alert)
  clear_has_item_alert();
  ::proto::dota::CDOTAMsg_ItemAlert* temp = item_alert_;
  item_alert_ = NULL;
  return temp;
}
void CDOTAClientMsg_ItemAlert::set_allocated_item_alert(::proto::dota::CDOTAMsg_ItemAlert* item_alert) {
  delete item_alert_;
  item_alert_ = item_alert;
  if (item_alert) {
    set_has_item_alert();
  } else {
    clear_has_item_alert();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAClientMsg_ItemAlert.item_alert)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_EnemyItemAlert::kItemEntindexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_EnemyItemAlert::CDOTAClientMsg_EnemyItemAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_EnemyItemAlert)
}
CDOTAClientMsg_EnemyItemAlert::CDOTAClientMsg_EnemyItemAlert(const CDOTAClientMsg_EnemyItemAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_entindex_ = from.item_entindex_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_EnemyItemAlert)
}

void CDOTAClientMsg_EnemyItemAlert::SharedCtor() {
  _cached_size_ = 0;
  item_entindex_ = 0u;
}

CDOTAClientMsg_EnemyItemAlert::~CDOTAClientMsg_EnemyItemAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  SharedDtor();
}

void CDOTAClientMsg_EnemyItemAlert::SharedDtor() {
}

void CDOTAClientMsg_EnemyItemAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_EnemyItemAlert::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_EnemyItemAlert& CDOTAClientMsg_EnemyItemAlert::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_EnemyItemAlert* CDOTAClientMsg_EnemyItemAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_EnemyItemAlert* n = new CDOTAClientMsg_EnemyItemAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_EnemyItemAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  item_entindex_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_EnemyItemAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_entindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_EnemyItemAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_entindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_EnemyItemAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_EnemyItemAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_entindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  return target;
}

size_t CDOTAClientMsg_EnemyItemAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 item_entindex = 1;
  if (has_item_entindex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->item_entindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_EnemyItemAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_EnemyItemAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_EnemyItemAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_EnemyItemAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_EnemyItemAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EnemyItemAlert::MergeFrom(const CDOTAClientMsg_EnemyItemAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item_entindex()) {
    set_item_entindex(from.item_entindex());
  }
}

void CDOTAClientMsg_EnemyItemAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EnemyItemAlert::CopyFrom(const CDOTAClientMsg_EnemyItemAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_EnemyItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EnemyItemAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_EnemyItemAlert::Swap(CDOTAClientMsg_EnemyItemAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_EnemyItemAlert::InternalSwap(CDOTAClientMsg_EnemyItemAlert* other) {
  std::swap(item_entindex_, other->item_entindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_EnemyItemAlert::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_EnemyItemAlert

// optional uint32 item_entindex = 1;
bool CDOTAClientMsg_EnemyItemAlert::has_item_entindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_EnemyItemAlert::set_has_item_entindex() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_EnemyItemAlert::clear_has_item_entindex() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_EnemyItemAlert::clear_item_entindex() {
  item_entindex_ = 0u;
  clear_has_item_entindex();
}
::google::protobuf::uint32 CDOTAClientMsg_EnemyItemAlert::item_entindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_EnemyItemAlert.item_entindex)
  return item_entindex_;
}
void CDOTAClientMsg_EnemyItemAlert::set_item_entindex(::google::protobuf::uint32 value) {
  set_has_item_entindex();
  item_entindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_EnemyItemAlert.item_entindex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_ModifierAlert::kBuffInternalIndexFieldNumber;
const int CDOTAClientMsg_ModifierAlert::kTargetEntindexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_ModifierAlert::CDOTAClientMsg_ModifierAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_ModifierAlert)
}
CDOTAClientMsg_ModifierAlert::CDOTAClientMsg_ModifierAlert(const CDOTAClientMsg_ModifierAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&buff_internal_index_, &from.buff_internal_index_,
    reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&buff_internal_index_) + sizeof(target_entindex_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_ModifierAlert)
}

void CDOTAClientMsg_ModifierAlert::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&buff_internal_index_, 0, reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&buff_internal_index_) + sizeof(target_entindex_));
}

CDOTAClientMsg_ModifierAlert::~CDOTAClientMsg_ModifierAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_ModifierAlert)
  SharedDtor();
}

void CDOTAClientMsg_ModifierAlert::SharedDtor() {
}

void CDOTAClientMsg_ModifierAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ModifierAlert::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_ModifierAlert& CDOTAClientMsg_ModifierAlert::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_ModifierAlert* CDOTAClientMsg_ModifierAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_ModifierAlert* n = new CDOTAClientMsg_ModifierAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_ModifierAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_ModifierAlert)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&buff_internal_index_, 0, reinterpret_cast<char*>(&target_entindex_) -
      reinterpret_cast<char*>(&buff_internal_index_) + sizeof(target_entindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_ModifierAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_ModifierAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buff_internal_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_buff_internal_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_internal_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_entindex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_target_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_ModifierAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_ModifierAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_ModifierAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_ModifierAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 buff_internal_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_internal_index(), output);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_entindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_ModifierAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_ModifierAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_ModifierAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 buff_internal_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_internal_index(), target);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_entindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_ModifierAlert)
  return target;
}

size_t CDOTAClientMsg_ModifierAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_ModifierAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 buff_internal_index = 1;
    if (has_buff_internal_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_internal_index());
    }

    // optional uint32 target_entindex = 2;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ModifierAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_ModifierAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ModifierAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_ModifierAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_ModifierAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_ModifierAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ModifierAlert::MergeFrom(const CDOTAClientMsg_ModifierAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_ModifierAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      buff_internal_index_ = from.buff_internal_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_entindex_ = from.target_entindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ModifierAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_ModifierAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ModifierAlert::CopyFrom(const CDOTAClientMsg_ModifierAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_ModifierAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ModifierAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ModifierAlert::Swap(CDOTAClientMsg_ModifierAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ModifierAlert::InternalSwap(CDOTAClientMsg_ModifierAlert* other) {
  std::swap(buff_internal_index_, other->buff_internal_index_);
  std::swap(target_entindex_, other->target_entindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_ModifierAlert::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_ModifierAlert

// optional int32 buff_internal_index = 1;
bool CDOTAClientMsg_ModifierAlert::has_buff_internal_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_ModifierAlert::set_has_buff_internal_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_ModifierAlert::clear_has_buff_internal_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_ModifierAlert::clear_buff_internal_index() {
  buff_internal_index_ = 0;
  clear_has_buff_internal_index();
}
::google::protobuf::int32 CDOTAClientMsg_ModifierAlert::buff_internal_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_ModifierAlert.buff_internal_index)
  return buff_internal_index_;
}
void CDOTAClientMsg_ModifierAlert::set_buff_internal_index(::google::protobuf::int32 value) {
  set_has_buff_internal_index();
  buff_internal_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_ModifierAlert.buff_internal_index)
}

// optional uint32 target_entindex = 2;
bool CDOTAClientMsg_ModifierAlert::has_target_entindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_ModifierAlert::set_has_target_entindex() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_ModifierAlert::clear_has_target_entindex() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_ModifierAlert::clear_target_entindex() {
  target_entindex_ = 0u;
  clear_has_target_entindex();
}
::google::protobuf::uint32 CDOTAClientMsg_ModifierAlert::target_entindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_ModifierAlert.target_entindex)
  return target_entindex_;
}
void CDOTAClientMsg_ModifierAlert::set_target_entindex(::google::protobuf::uint32 value) {
  set_has_target_entindex();
  target_entindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_ModifierAlert.target_entindex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_ClickedBuff::kBuffInternalIndexFieldNumber;
const int CDOTAClientMsg_ClickedBuff::kTargetEntindexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_ClickedBuff::CDOTAClientMsg_ClickedBuff()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_ClickedBuff)
}
CDOTAClientMsg_ClickedBuff::CDOTAClientMsg_ClickedBuff(const CDOTAClientMsg_ClickedBuff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&buff_internal_index_, &from.buff_internal_index_,
    reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&buff_internal_index_) + sizeof(target_entindex_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_ClickedBuff)
}

void CDOTAClientMsg_ClickedBuff::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&buff_internal_index_, 0, reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&buff_internal_index_) + sizeof(target_entindex_));
}

CDOTAClientMsg_ClickedBuff::~CDOTAClientMsg_ClickedBuff() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_ClickedBuff)
  SharedDtor();
}

void CDOTAClientMsg_ClickedBuff::SharedDtor() {
}

void CDOTAClientMsg_ClickedBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ClickedBuff::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_ClickedBuff& CDOTAClientMsg_ClickedBuff::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_ClickedBuff* CDOTAClientMsg_ClickedBuff::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_ClickedBuff* n = new CDOTAClientMsg_ClickedBuff;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_ClickedBuff::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_ClickedBuff)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&buff_internal_index_, 0, reinterpret_cast<char*>(&target_entindex_) -
      reinterpret_cast<char*>(&buff_internal_index_) + sizeof(target_entindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_ClickedBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_ClickedBuff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buff_internal_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_buff_internal_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_internal_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_entindex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_target_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_ClickedBuff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_ClickedBuff)
  return false;
#undef DO_
}

void CDOTAClientMsg_ClickedBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_ClickedBuff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 buff_internal_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_internal_index(), output);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_entindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_ClickedBuff)
}

::google::protobuf::uint8* CDOTAClientMsg_ClickedBuff::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_ClickedBuff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 buff_internal_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_internal_index(), target);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_entindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_ClickedBuff)
  return target;
}

size_t CDOTAClientMsg_ClickedBuff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_ClickedBuff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 buff_internal_index = 1;
    if (has_buff_internal_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_internal_index());
    }

    // optional uint32 target_entindex = 2;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ClickedBuff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_ClickedBuff)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ClickedBuff* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_ClickedBuff>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_ClickedBuff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_ClickedBuff)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ClickedBuff::MergeFrom(const CDOTAClientMsg_ClickedBuff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_ClickedBuff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      buff_internal_index_ = from.buff_internal_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_entindex_ = from.target_entindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ClickedBuff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_ClickedBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ClickedBuff::CopyFrom(const CDOTAClientMsg_ClickedBuff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_ClickedBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ClickedBuff::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ClickedBuff::Swap(CDOTAClientMsg_ClickedBuff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ClickedBuff::InternalSwap(CDOTAClientMsg_ClickedBuff* other) {
  std::swap(buff_internal_index_, other->buff_internal_index_);
  std::swap(target_entindex_, other->target_entindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_ClickedBuff::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_ClickedBuff

// optional int32 buff_internal_index = 1;
bool CDOTAClientMsg_ClickedBuff::has_buff_internal_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_ClickedBuff::set_has_buff_internal_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_ClickedBuff::clear_has_buff_internal_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_ClickedBuff::clear_buff_internal_index() {
  buff_internal_index_ = 0;
  clear_has_buff_internal_index();
}
::google::protobuf::int32 CDOTAClientMsg_ClickedBuff::buff_internal_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_ClickedBuff.buff_internal_index)
  return buff_internal_index_;
}
void CDOTAClientMsg_ClickedBuff::set_buff_internal_index(::google::protobuf::int32 value) {
  set_has_buff_internal_index();
  buff_internal_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_ClickedBuff.buff_internal_index)
}

// optional uint32 target_entindex = 2;
bool CDOTAClientMsg_ClickedBuff::has_target_entindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_ClickedBuff::set_has_target_entindex() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_ClickedBuff::clear_has_target_entindex() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_ClickedBuff::clear_target_entindex() {
  target_entindex_ = 0u;
  clear_has_target_entindex();
}
::google::protobuf::uint32 CDOTAClientMsg_ClickedBuff::target_entindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_ClickedBuff.target_entindex)
  return target_entindex_;
}
void CDOTAClientMsg_ClickedBuff::set_target_entindex(::google::protobuf::uint32 value) {
  set_has_target_entindex();
  target_entindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_ClickedBuff.target_entindex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_HPManaAlert::kTargetEntindexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_HPManaAlert::CDOTAClientMsg_HPManaAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_HPManaAlert)
}
CDOTAClientMsg_HPManaAlert::CDOTAClientMsg_HPManaAlert(const CDOTAClientMsg_HPManaAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_entindex_ = from.target_entindex_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_HPManaAlert)
}

void CDOTAClientMsg_HPManaAlert::SharedCtor() {
  _cached_size_ = 0;
  target_entindex_ = 0u;
}

CDOTAClientMsg_HPManaAlert::~CDOTAClientMsg_HPManaAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_HPManaAlert)
  SharedDtor();
}

void CDOTAClientMsg_HPManaAlert::SharedDtor() {
}

void CDOTAClientMsg_HPManaAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_HPManaAlert::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_HPManaAlert& CDOTAClientMsg_HPManaAlert::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_HPManaAlert* CDOTAClientMsg_HPManaAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_HPManaAlert* n = new CDOTAClientMsg_HPManaAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_HPManaAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_HPManaAlert)
  target_entindex_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_HPManaAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_HPManaAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 target_entindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_target_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_HPManaAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_HPManaAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_HPManaAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_HPManaAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_entindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_HPManaAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_HPManaAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_HPManaAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_entindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_HPManaAlert)
  return target;
}

size_t CDOTAClientMsg_HPManaAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_HPManaAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 target_entindex = 1;
  if (has_target_entindex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_entindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_HPManaAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_HPManaAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_HPManaAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_HPManaAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_HPManaAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_HPManaAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_HPManaAlert::MergeFrom(const CDOTAClientMsg_HPManaAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_HPManaAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target_entindex()) {
    set_target_entindex(from.target_entindex());
  }
}

void CDOTAClientMsg_HPManaAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_HPManaAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_HPManaAlert::CopyFrom(const CDOTAClientMsg_HPManaAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_HPManaAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_HPManaAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_HPManaAlert::Swap(CDOTAClientMsg_HPManaAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_HPManaAlert::InternalSwap(CDOTAClientMsg_HPManaAlert* other) {
  std::swap(target_entindex_, other->target_entindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_HPManaAlert::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_HPManaAlert

// optional uint32 target_entindex = 1;
bool CDOTAClientMsg_HPManaAlert::has_target_entindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_HPManaAlert::set_has_target_entindex() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_HPManaAlert::clear_has_target_entindex() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_HPManaAlert::clear_target_entindex() {
  target_entindex_ = 0u;
  clear_has_target_entindex();
}
::google::protobuf::uint32 CDOTAClientMsg_HPManaAlert::target_entindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_HPManaAlert.target_entindex)
  return target_entindex_;
}
void CDOTAClientMsg_HPManaAlert::set_target_entindex(::google::protobuf::uint32 value) {
  set_has_target_entindex();
  target_entindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_HPManaAlert.target_entindex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_GlyphAlert::kNegativeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_GlyphAlert::CDOTAClientMsg_GlyphAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_GlyphAlert)
}
CDOTAClientMsg_GlyphAlert::CDOTAClientMsg_GlyphAlert(const CDOTAClientMsg_GlyphAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  negative_ = from.negative_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_GlyphAlert)
}

void CDOTAClientMsg_GlyphAlert::SharedCtor() {
  _cached_size_ = 0;
  negative_ = false;
}

CDOTAClientMsg_GlyphAlert::~CDOTAClientMsg_GlyphAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_GlyphAlert)
  SharedDtor();
}

void CDOTAClientMsg_GlyphAlert::SharedDtor() {
}

void CDOTAClientMsg_GlyphAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_GlyphAlert::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_GlyphAlert& CDOTAClientMsg_GlyphAlert::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_GlyphAlert* CDOTAClientMsg_GlyphAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_GlyphAlert* n = new CDOTAClientMsg_GlyphAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_GlyphAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_GlyphAlert)
  negative_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_GlyphAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_GlyphAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool negative = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_negative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &negative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_GlyphAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_GlyphAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_GlyphAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_GlyphAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool negative = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->negative(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_GlyphAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_GlyphAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_GlyphAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool negative = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->negative(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_GlyphAlert)
  return target;
}

size_t CDOTAClientMsg_GlyphAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_GlyphAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool negative = 1;
  if (has_negative()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_GlyphAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_GlyphAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_GlyphAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_GlyphAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_GlyphAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_GlyphAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_GlyphAlert::MergeFrom(const CDOTAClientMsg_GlyphAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_GlyphAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_negative()) {
    set_negative(from.negative());
  }
}

void CDOTAClientMsg_GlyphAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_GlyphAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_GlyphAlert::CopyFrom(const CDOTAClientMsg_GlyphAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_GlyphAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_GlyphAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_GlyphAlert::Swap(CDOTAClientMsg_GlyphAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_GlyphAlert::InternalSwap(CDOTAClientMsg_GlyphAlert* other) {
  std::swap(negative_, other->negative_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_GlyphAlert::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_GlyphAlert

// optional bool negative = 1;
bool CDOTAClientMsg_GlyphAlert::has_negative() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_GlyphAlert::set_has_negative() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_GlyphAlert::clear_has_negative() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_GlyphAlert::clear_negative() {
  negative_ = false;
  clear_has_negative();
}
bool CDOTAClientMsg_GlyphAlert::negative() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_GlyphAlert.negative)
  return negative_;
}
void CDOTAClientMsg_GlyphAlert::set_negative(bool value) {
  set_has_negative();
  negative_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_GlyphAlert.negative)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_MapLine::kMaplineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_MapLine::CDOTAClientMsg_MapLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_MapLine)
}
CDOTAClientMsg_MapLine::CDOTAClientMsg_MapLine(const CDOTAClientMsg_MapLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mapline()) {
    mapline_ = new ::proto::dota::CDOTAMsg_MapLine(*from.mapline_);
  } else {
    mapline_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_MapLine)
}

void CDOTAClientMsg_MapLine::SharedCtor() {
  _cached_size_ = 0;
  mapline_ = NULL;
}

CDOTAClientMsg_MapLine::~CDOTAClientMsg_MapLine() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_MapLine)
  SharedDtor();
}

void CDOTAClientMsg_MapLine::SharedDtor() {
  if (this != internal_default_instance()) {
    delete mapline_;
  }
}

void CDOTAClientMsg_MapLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_MapLine::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_MapLine& CDOTAClientMsg_MapLine::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_MapLine* CDOTAClientMsg_MapLine::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_MapLine* n = new CDOTAClientMsg_MapLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_MapLine::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_MapLine)
  if (has_mapline()) {
    GOOGLE_DCHECK(mapline_ != NULL);
    mapline_->::proto::dota::CDOTAMsg_MapLine::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_MapLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_MapLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CDOTAMsg_MapLine mapline = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_MapLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_MapLine)
  return false;
#undef DO_
}

void CDOTAClientMsg_MapLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_MapLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_MapLine mapline = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->mapline_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_MapLine)
}

::google::protobuf::uint8* CDOTAClientMsg_MapLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_MapLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_MapLine mapline = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->mapline_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_MapLine)
  return target;
}

size_t CDOTAClientMsg_MapLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_MapLine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CDOTAMsg_MapLine mapline = 1;
  if (has_mapline()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mapline_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_MapLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_MapLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_MapLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_MapLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_MapLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_MapLine)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MapLine::MergeFrom(const CDOTAClientMsg_MapLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_MapLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mapline()) {
    mutable_mapline()->::proto::dota::CDOTAMsg_MapLine::MergeFrom(from.mapline());
  }
}

void CDOTAClientMsg_MapLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MapLine::CopyFrom(const CDOTAClientMsg_MapLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MapLine::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_MapLine::Swap(CDOTAClientMsg_MapLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_MapLine::InternalSwap(CDOTAClientMsg_MapLine* other) {
  std::swap(mapline_, other->mapline_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_MapLine::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_MapLine

// optional .proto.dota.CDOTAMsg_MapLine mapline = 1;
bool CDOTAClientMsg_MapLine::has_mapline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_MapLine::set_has_mapline() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_MapLine::clear_has_mapline() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_MapLine::clear_mapline() {
  if (mapline_ != NULL) mapline_->::proto::dota::CDOTAMsg_MapLine::Clear();
  clear_has_mapline();
}
const ::proto::dota::CDOTAMsg_MapLine& CDOTAClientMsg_MapLine::mapline() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_MapLine.mapline)
  return mapline_ != NULL ? *mapline_
                         : *::proto::dota::CDOTAMsg_MapLine::internal_default_instance();
}
::proto::dota::CDOTAMsg_MapLine* CDOTAClientMsg_MapLine::mutable_mapline() {
  set_has_mapline();
  if (mapline_ == NULL) {
    mapline_ = new ::proto::dota::CDOTAMsg_MapLine;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAClientMsg_MapLine.mapline)
  return mapline_;
}
::proto::dota::CDOTAMsg_MapLine* CDOTAClientMsg_MapLine::release_mapline() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAClientMsg_MapLine.mapline)
  clear_has_mapline();
  ::proto::dota::CDOTAMsg_MapLine* temp = mapline_;
  mapline_ = NULL;
  return temp;
}
void CDOTAClientMsg_MapLine::set_allocated_mapline(::proto::dota::CDOTAMsg_MapLine* mapline) {
  delete mapline_;
  mapline_ = mapline;
  if (mapline) {
    set_has_mapline();
  } else {
    clear_has_mapline();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAClientMsg_MapLine.mapline)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_AspectRatio::kRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_AspectRatio::CDOTAClientMsg_AspectRatio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_AspectRatio)
}
CDOTAClientMsg_AspectRatio::CDOTAClientMsg_AspectRatio(const CDOTAClientMsg_AspectRatio& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ratio_ = from.ratio_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_AspectRatio)
}

void CDOTAClientMsg_AspectRatio::SharedCtor() {
  _cached_size_ = 0;
  ratio_ = 0;
}

CDOTAClientMsg_AspectRatio::~CDOTAClientMsg_AspectRatio() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_AspectRatio)
  SharedDtor();
}

void CDOTAClientMsg_AspectRatio::SharedDtor() {
}

void CDOTAClientMsg_AspectRatio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_AspectRatio::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_AspectRatio& CDOTAClientMsg_AspectRatio::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_AspectRatio* CDOTAClientMsg_AspectRatio::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_AspectRatio* n = new CDOTAClientMsg_AspectRatio;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_AspectRatio::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_AspectRatio)
  ratio_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_AspectRatio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_AspectRatio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float ratio = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_AspectRatio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_AspectRatio)
  return false;
#undef DO_
}

void CDOTAClientMsg_AspectRatio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_AspectRatio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float ratio = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_AspectRatio)
}

::google::protobuf::uint8* CDOTAClientMsg_AspectRatio::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_AspectRatio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float ratio = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_AspectRatio)
  return target;
}

size_t CDOTAClientMsg_AspectRatio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_AspectRatio)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional float ratio = 1;
  if (has_ratio()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_AspectRatio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_AspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_AspectRatio* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_AspectRatio>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_AspectRatio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_AspectRatio)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_AspectRatio::MergeFrom(const CDOTAClientMsg_AspectRatio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_AspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ratio()) {
    set_ratio(from.ratio());
  }
}

void CDOTAClientMsg_AspectRatio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_AspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_AspectRatio::CopyFrom(const CDOTAClientMsg_AspectRatio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_AspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_AspectRatio::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_AspectRatio::Swap(CDOTAClientMsg_AspectRatio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_AspectRatio::InternalSwap(CDOTAClientMsg_AspectRatio* other) {
  std::swap(ratio_, other->ratio_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_AspectRatio::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_AspectRatio

// optional float ratio = 1;
bool CDOTAClientMsg_AspectRatio::has_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_AspectRatio::set_has_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_AspectRatio::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_AspectRatio::clear_ratio() {
  ratio_ = 0;
  clear_has_ratio();
}
float CDOTAClientMsg_AspectRatio::ratio() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_AspectRatio.ratio)
  return ratio_;
}
void CDOTAClientMsg_AspectRatio::set_ratio(float value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_AspectRatio.ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_UnitsAutoAttackMode::kModeFieldNumber;
const int CDOTAClientMsg_UnitsAutoAttackMode::kUnitTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_UnitsAutoAttackMode::CDOTAClientMsg_UnitsAutoAttackMode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
}
CDOTAClientMsg_UnitsAutoAttackMode::CDOTAClientMsg_UnitsAutoAttackMode(const CDOTAClientMsg_UnitsAutoAttackMode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&unit_type_, &from.unit_type_,
    reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&unit_type_) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
}

void CDOTAClientMsg_UnitsAutoAttackMode::SharedCtor() {
  _cached_size_ = 0;
  unit_type_ = 0;
  mode_ = -1;
}

CDOTAClientMsg_UnitsAutoAttackMode::~CDOTAClientMsg_UnitsAutoAttackMode() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  SharedDtor();
}

void CDOTAClientMsg_UnitsAutoAttackMode::SharedDtor() {
}

void CDOTAClientMsg_UnitsAutoAttackMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_UnitsAutoAttackMode::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_UnitsAutoAttackMode& CDOTAClientMsg_UnitsAutoAttackMode::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_UnitsAutoAttackMode* CDOTAClientMsg_UnitsAutoAttackMode::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_UnitsAutoAttackMode* n = new CDOTAClientMsg_UnitsAutoAttackMode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_UnitsAutoAttackMode::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  if (_has_bits_[0 / 32] & 3u) {
    unit_type_ = 0;
    mode_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_UnitsAutoAttackMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EMode mode = 1 [default = INVALID];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EMode_IsValid(value)) {
            set_mode(static_cast< ::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EUnitType unit_type = 2 [default = NORMAL];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_IsValid(value)) {
            set_unit_type(static_cast< ::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  return false;
#undef DO_
}

void CDOTAClientMsg_UnitsAutoAttackMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EMode mode = 1 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EUnitType unit_type = 2 [default = NORMAL];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->unit_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
}

::google::protobuf::uint8* CDOTAClientMsg_UnitsAutoAttackMode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EMode mode = 1 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EUnitType unit_type = 2 [default = NORMAL];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->unit_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  return target;
}

size_t CDOTAClientMsg_UnitsAutoAttackMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EUnitType unit_type = 2 [default = NORMAL];
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit_type());
    }

    // optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EMode mode = 1 [default = INVALID];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_UnitsAutoAttackMode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_UnitsAutoAttackMode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_UnitsAutoAttackMode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UnitsAutoAttackMode::MergeFrom(const CDOTAClientMsg_UnitsAutoAttackMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      unit_type_ = from.unit_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_UnitsAutoAttackMode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UnitsAutoAttackMode::CopyFrom(const CDOTAClientMsg_UnitsAutoAttackMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UnitsAutoAttackMode::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_UnitsAutoAttackMode::Swap(CDOTAClientMsg_UnitsAutoAttackMode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_UnitsAutoAttackMode::InternalSwap(CDOTAClientMsg_UnitsAutoAttackMode* other) {
  std::swap(unit_type_, other->unit_type_);
  std::swap(mode_, other->mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_UnitsAutoAttackMode::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_UnitsAutoAttackMode

// optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EMode mode = 1 [default = INVALID];
bool CDOTAClientMsg_UnitsAutoAttackMode::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_UnitsAutoAttackMode::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_UnitsAutoAttackMode::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_UnitsAutoAttackMode::clear_mode() {
  mode_ = -1;
  clear_has_mode();
}
::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.mode)
  return static_cast< ::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EMode >(mode_);
}
void CDOTAClientMsg_UnitsAutoAttackMode::set_mode(::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EMode value) {
  assert(::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.mode)
}

// optional .proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.EUnitType unit_type = 2 [default = NORMAL];
bool CDOTAClientMsg_UnitsAutoAttackMode::has_unit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_UnitsAutoAttackMode::set_has_unit_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_UnitsAutoAttackMode::clear_has_unit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_UnitsAutoAttackMode::clear_unit_type() {
  unit_type_ = 0;
  clear_has_unit_type();
}
::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode::unit_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.unit_type)
  return static_cast< ::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType >(unit_type_);
}
void CDOTAClientMsg_UnitsAutoAttackMode::set_unit_type(::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType value) {
  assert(::proto::dota::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_IsValid(value));
  set_has_unit_type();
  unit_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_UnitsAutoAttackMode.unit_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_UnitsAutoAttackAfterSpell::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_UnitsAutoAttackAfterSpell::CDOTAClientMsg_UnitsAutoAttackAfterSpell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
}
CDOTAClientMsg_UnitsAutoAttackAfterSpell::CDOTAClientMsg_UnitsAutoAttackAfterSpell(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
}

CDOTAClientMsg_UnitsAutoAttackAfterSpell::~CDOTAClientMsg_UnitsAutoAttackAfterSpell() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  SharedDtor();
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SharedDtor() {
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_UnitsAutoAttackAfterSpell::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_UnitsAutoAttackAfterSpell& CDOTAClientMsg_UnitsAutoAttackAfterSpell::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_UnitsAutoAttackAfterSpell* CDOTAClientMsg_UnitsAutoAttackAfterSpell::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_UnitsAutoAttackAfterSpell* n = new CDOTAClientMsg_UnitsAutoAttackAfterSpell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_UnitsAutoAttackAfterSpell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  return false;
#undef DO_
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
}

::google::protobuf::uint8* CDOTAClientMsg_UnitsAutoAttackAfterSpell::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  return target;
}

size_t CDOTAClientMsg_UnitsAutoAttackAfterSpell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool enabled = 1;
  if (has_enabled()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_UnitsAutoAttackAfterSpell* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_UnitsAutoAttackAfterSpell>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::MergeFrom(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::CopyFrom(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UnitsAutoAttackAfterSpell::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_UnitsAutoAttackAfterSpell::Swap(CDOTAClientMsg_UnitsAutoAttackAfterSpell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_UnitsAutoAttackAfterSpell::InternalSwap(CDOTAClientMsg_UnitsAutoAttackAfterSpell* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_UnitsAutoAttackAfterSpell::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_UnitsAutoAttackAfterSpell

// optional bool enabled = 1;
bool CDOTAClientMsg_UnitsAutoAttackAfterSpell::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_UnitsAutoAttackAfterSpell::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_UnitsAutoAttackAfterSpell::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_UnitsAutoAttackAfterSpell::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
bool CDOTAClientMsg_UnitsAutoAttackAfterSpell::enabled() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell.enabled)
  return enabled_;
}
void CDOTAClientMsg_UnitsAutoAttackAfterSpell::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_UnitsAutoAttackAfterSpell.enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_TeleportRequiresHalt::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_TeleportRequiresHalt::CDOTAClientMsg_TeleportRequiresHalt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
}
CDOTAClientMsg_TeleportRequiresHalt::CDOTAClientMsg_TeleportRequiresHalt(const CDOTAClientMsg_TeleportRequiresHalt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
}

void CDOTAClientMsg_TeleportRequiresHalt::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
}

CDOTAClientMsg_TeleportRequiresHalt::~CDOTAClientMsg_TeleportRequiresHalt() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  SharedDtor();
}

void CDOTAClientMsg_TeleportRequiresHalt::SharedDtor() {
}

void CDOTAClientMsg_TeleportRequiresHalt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_TeleportRequiresHalt::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_TeleportRequiresHalt& CDOTAClientMsg_TeleportRequiresHalt::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_TeleportRequiresHalt* CDOTAClientMsg_TeleportRequiresHalt::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_TeleportRequiresHalt* n = new CDOTAClientMsg_TeleportRequiresHalt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_TeleportRequiresHalt::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_TeleportRequiresHalt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  return false;
#undef DO_
}

void CDOTAClientMsg_TeleportRequiresHalt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
}

::google::protobuf::uint8* CDOTAClientMsg_TeleportRequiresHalt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  return target;
}

size_t CDOTAClientMsg_TeleportRequiresHalt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool enabled = 1;
  if (has_enabled()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_TeleportRequiresHalt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_TeleportRequiresHalt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_TeleportRequiresHalt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_TeleportRequiresHalt::MergeFrom(const CDOTAClientMsg_TeleportRequiresHalt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void CDOTAClientMsg_TeleportRequiresHalt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_TeleportRequiresHalt::CopyFrom(const CDOTAClientMsg_TeleportRequiresHalt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_TeleportRequiresHalt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_TeleportRequiresHalt::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_TeleportRequiresHalt::Swap(CDOTAClientMsg_TeleportRequiresHalt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_TeleportRequiresHalt::InternalSwap(CDOTAClientMsg_TeleportRequiresHalt* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_TeleportRequiresHalt::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_TeleportRequiresHalt

// optional bool enabled = 1;
bool CDOTAClientMsg_TeleportRequiresHalt::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_TeleportRequiresHalt::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_TeleportRequiresHalt::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_TeleportRequiresHalt::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
bool CDOTAClientMsg_TeleportRequiresHalt::enabled() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_TeleportRequiresHalt.enabled)
  return enabled_;
}
void CDOTAClientMsg_TeleportRequiresHalt::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_TeleportRequiresHalt.enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_SearchString::kSearchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_SearchString::CDOTAClientMsg_SearchString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_SearchString)
}
CDOTAClientMsg_SearchString::CDOTAClientMsg_SearchString(const CDOTAClientMsg_SearchString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search()) {
    search_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_SearchString)
}

void CDOTAClientMsg_SearchString::SharedCtor() {
  _cached_size_ = 0;
  search_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDOTAClientMsg_SearchString::~CDOTAClientMsg_SearchString() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_SearchString)
  SharedDtor();
}

void CDOTAClientMsg_SearchString::SharedDtor() {
  search_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_SearchString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SearchString::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_SearchString& CDOTAClientMsg_SearchString::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_SearchString* CDOTAClientMsg_SearchString::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_SearchString* n = new CDOTAClientMsg_SearchString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_SearchString::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_SearchString)
  if (has_search()) {
    GOOGLE_DCHECK(!search_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*search_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_SearchString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_SearchString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search().data(), this->search().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAClientMsg_SearchString.search");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_SearchString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_SearchString)
  return false;
#undef DO_
}

void CDOTAClientMsg_SearchString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_SearchString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search().data(), this->search().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAClientMsg_SearchString.search");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_SearchString)
}

::google::protobuf::uint8* CDOTAClientMsg_SearchString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_SearchString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search().data(), this->search().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAClientMsg_SearchString.search");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_SearchString)
  return target;
}

size_t CDOTAClientMsg_SearchString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_SearchString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string search = 1;
  if (has_search()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->search());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SearchString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_SearchString)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SearchString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_SearchString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_SearchString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_SearchString)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SearchString::MergeFrom(const CDOTAClientMsg_SearchString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_SearchString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_search()) {
    set_has_search();
    search_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_);
  }
}

void CDOTAClientMsg_SearchString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_SearchString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SearchString::CopyFrom(const CDOTAClientMsg_SearchString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_SearchString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SearchString::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SearchString::Swap(CDOTAClientMsg_SearchString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SearchString::InternalSwap(CDOTAClientMsg_SearchString* other) {
  search_.Swap(&other->search_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_SearchString::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_SearchString

// optional string search = 1;
bool CDOTAClientMsg_SearchString::has_search() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_SearchString::set_has_search() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_SearchString::clear_has_search() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_SearchString::clear_search() {
  search_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search();
}
const ::std::string& CDOTAClientMsg_SearchString::search() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_SearchString.search)
  return search_.GetNoArena();
}
void CDOTAClientMsg_SearchString::set_search(const ::std::string& value) {
  set_has_search();
  search_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_SearchString.search)
}
#if LANG_CXX11
void CDOTAClientMsg_SearchString::set_search(::std::string&& value) {
  set_has_search();
  search_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAClientMsg_SearchString.search)
}
#endif
void CDOTAClientMsg_SearchString::set_search(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search();
  search_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAClientMsg_SearchString.search)
}
void CDOTAClientMsg_SearchString::set_search(const char* value, size_t size) {
  set_has_search();
  search_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAClientMsg_SearchString.search)
}
::std::string* CDOTAClientMsg_SearchString::mutable_search() {
  set_has_search();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAClientMsg_SearchString.search)
  return search_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAClientMsg_SearchString::release_search() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAClientMsg_SearchString.search)
  clear_has_search();
  return search_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAClientMsg_SearchString::set_allocated_search(::std::string* search) {
  if (search != NULL) {
    set_has_search();
  } else {
    clear_has_search();
  }
  search_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAClientMsg_SearchString.search)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_Pause::CDOTAClientMsg_Pause()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_Pause)
}
CDOTAClientMsg_Pause::CDOTAClientMsg_Pause(const CDOTAClientMsg_Pause& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_Pause)
}

void CDOTAClientMsg_Pause::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAClientMsg_Pause::~CDOTAClientMsg_Pause() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_Pause)
  SharedDtor();
}

void CDOTAClientMsg_Pause::SharedDtor() {
}

void CDOTAClientMsg_Pause::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_Pause::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_Pause& CDOTAClientMsg_Pause::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_Pause* CDOTAClientMsg_Pause::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_Pause* n = new CDOTAClientMsg_Pause;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_Pause::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_Pause)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_Pause::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_Pause)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_Pause)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_Pause)
  return false;
#undef DO_
}

void CDOTAClientMsg_Pause::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_Pause)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_Pause)
}

::google::protobuf::uint8* CDOTAClientMsg_Pause::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_Pause)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_Pause)
  return target;
}

size_t CDOTAClientMsg_Pause::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_Pause)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_Pause::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_Pause)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_Pause* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_Pause>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_Pause)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_Pause)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_Pause::MergeFrom(const CDOTAClientMsg_Pause& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_Pause)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAClientMsg_Pause::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_Pause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_Pause::CopyFrom(const CDOTAClientMsg_Pause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_Pause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_Pause::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_Pause::Swap(CDOTAClientMsg_Pause* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_Pause::InternalSwap(CDOTAClientMsg_Pause* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_Pause::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_Pause

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_ShopViewMode::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_ShopViewMode::CDOTAClientMsg_ShopViewMode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_ShopViewMode)
}
CDOTAClientMsg_ShopViewMode::CDOTAClientMsg_ShopViewMode(const CDOTAClientMsg_ShopViewMode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_ShopViewMode)
}

void CDOTAClientMsg_ShopViewMode::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0u;
}

CDOTAClientMsg_ShopViewMode::~CDOTAClientMsg_ShopViewMode() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_ShopViewMode)
  SharedDtor();
}

void CDOTAClientMsg_ShopViewMode::SharedDtor() {
}

void CDOTAClientMsg_ShopViewMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ShopViewMode::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_ShopViewMode& CDOTAClientMsg_ShopViewMode::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_ShopViewMode* CDOTAClientMsg_ShopViewMode::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_ShopViewMode* n = new CDOTAClientMsg_ShopViewMode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_ShopViewMode::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_ShopViewMode)
  mode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_ShopViewMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_ShopViewMode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_ShopViewMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_ShopViewMode)
  return false;
#undef DO_
}

void CDOTAClientMsg_ShopViewMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_ShopViewMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_ShopViewMode)
}

::google::protobuf::uint8* CDOTAClientMsg_ShopViewMode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_ShopViewMode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_ShopViewMode)
  return target;
}

size_t CDOTAClientMsg_ShopViewMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_ShopViewMode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 mode = 1;
  if (has_mode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ShopViewMode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_ShopViewMode)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ShopViewMode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_ShopViewMode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_ShopViewMode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_ShopViewMode)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ShopViewMode::MergeFrom(const CDOTAClientMsg_ShopViewMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_ShopViewMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mode()) {
    set_mode(from.mode());
  }
}

void CDOTAClientMsg_ShopViewMode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_ShopViewMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ShopViewMode::CopyFrom(const CDOTAClientMsg_ShopViewMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_ShopViewMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ShopViewMode::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ShopViewMode::Swap(CDOTAClientMsg_ShopViewMode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ShopViewMode::InternalSwap(CDOTAClientMsg_ShopViewMode* other) {
  std::swap(mode_, other->mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_ShopViewMode::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_ShopViewMode

// optional uint32 mode = 1;
bool CDOTAClientMsg_ShopViewMode::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_ShopViewMode::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_ShopViewMode::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_ShopViewMode::clear_mode() {
  mode_ = 0u;
  clear_has_mode();
}
::google::protobuf::uint32 CDOTAClientMsg_ShopViewMode::mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_ShopViewMode.mode)
  return mode_;
}
void CDOTAClientMsg_ShopViewMode::set_mode(::google::protobuf::uint32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_ShopViewMode.mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_SetUnitShareFlag::kPlayerIDFieldNumber;
const int CDOTAClientMsg_SetUnitShareFlag::kFlagFieldNumber;
const int CDOTAClientMsg_SetUnitShareFlag::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_SetUnitShareFlag::CDOTAClientMsg_SetUnitShareFlag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
}
CDOTAClientMsg_SetUnitShareFlag::CDOTAClientMsg_SetUnitShareFlag(const CDOTAClientMsg_SetUnitShareFlag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&playerid_) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
}

void CDOTAClientMsg_SetUnitShareFlag::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&playerid_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&playerid_) + sizeof(state_));
}

CDOTAClientMsg_SetUnitShareFlag::~CDOTAClientMsg_SetUnitShareFlag() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  SharedDtor();
}

void CDOTAClientMsg_SetUnitShareFlag::SharedDtor() {
}

void CDOTAClientMsg_SetUnitShareFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SetUnitShareFlag::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_SetUnitShareFlag& CDOTAClientMsg_SetUnitShareFlag::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_SetUnitShareFlag* CDOTAClientMsg_SetUnitShareFlag::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_SetUnitShareFlag* n = new CDOTAClientMsg_SetUnitShareFlag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_SetUnitShareFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&playerid_, 0, reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&playerid_) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_SetUnitShareFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_playerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  return false;
#undef DO_
}

void CDOTAClientMsg_SetUnitShareFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 playerID = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // optional uint32 flag = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  // optional bool state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
}

::google::protobuf::uint8* CDOTAClientMsg_SetUnitShareFlag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 playerID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // optional uint32 flag = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  // optional bool state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  return target;
}

size_t CDOTAClientMsg_SetUnitShareFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional bool state = 3;
    if (has_state()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SetUnitShareFlag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SetUnitShareFlag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_SetUnitShareFlag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SetUnitShareFlag::MergeFrom(const CDOTAClientMsg_SetUnitShareFlag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_SetUnitShareFlag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SetUnitShareFlag::CopyFrom(const CDOTAClientMsg_SetUnitShareFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_SetUnitShareFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SetUnitShareFlag::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SetUnitShareFlag::Swap(CDOTAClientMsg_SetUnitShareFlag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SetUnitShareFlag::InternalSwap(CDOTAClientMsg_SetUnitShareFlag* other) {
  std::swap(playerid_, other->playerid_);
  std::swap(flag_, other->flag_);
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_SetUnitShareFlag::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_SetUnitShareFlag

// optional uint32 playerID = 1;
bool CDOTAClientMsg_SetUnitShareFlag::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_SetUnitShareFlag::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_SetUnitShareFlag::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_SetUnitShareFlag::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
::google::protobuf::uint32 CDOTAClientMsg_SetUnitShareFlag::playerid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_SetUnitShareFlag.playerID)
  return playerid_;
}
void CDOTAClientMsg_SetUnitShareFlag::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_SetUnitShareFlag.playerID)
}

// optional uint32 flag = 2;
bool CDOTAClientMsg_SetUnitShareFlag::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_SetUnitShareFlag::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_SetUnitShareFlag::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_SetUnitShareFlag::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
::google::protobuf::uint32 CDOTAClientMsg_SetUnitShareFlag::flag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_SetUnitShareFlag.flag)
  return flag_;
}
void CDOTAClientMsg_SetUnitShareFlag::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_SetUnitShareFlag.flag)
}

// optional bool state = 3;
bool CDOTAClientMsg_SetUnitShareFlag::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAClientMsg_SetUnitShareFlag::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAClientMsg_SetUnitShareFlag::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAClientMsg_SetUnitShareFlag::clear_state() {
  state_ = false;
  clear_has_state();
}
bool CDOTAClientMsg_SetUnitShareFlag::state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_SetUnitShareFlag.state)
  return state_;
}
void CDOTAClientMsg_SetUnitShareFlag::set_state(bool value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_SetUnitShareFlag.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_SwapRequest::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_SwapRequest::CDOTAClientMsg_SwapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_SwapRequest)
}
CDOTAClientMsg_SwapRequest::CDOTAClientMsg_SwapRequest(const CDOTAClientMsg_SwapRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_SwapRequest)
}

void CDOTAClientMsg_SwapRequest::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
}

CDOTAClientMsg_SwapRequest::~CDOTAClientMsg_SwapRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_SwapRequest)
  SharedDtor();
}

void CDOTAClientMsg_SwapRequest::SharedDtor() {
}

void CDOTAClientMsg_SwapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SwapRequest::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_SwapRequest& CDOTAClientMsg_SwapRequest::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_SwapRequest* CDOTAClientMsg_SwapRequest::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_SwapRequest* n = new CDOTAClientMsg_SwapRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_SwapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_SwapRequest)
  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_SwapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_SwapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_SwapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_SwapRequest)
  return false;
#undef DO_
}

void CDOTAClientMsg_SwapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_SwapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_SwapRequest)
}

::google::protobuf::uint8* CDOTAClientMsg_SwapRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_SwapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_SwapRequest)
  return target;
}

size_t CDOTAClientMsg_SwapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_SwapRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SwapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_SwapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SwapRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_SwapRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_SwapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_SwapRequest)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SwapRequest::MergeFrom(const CDOTAClientMsg_SwapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_SwapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    set_player_id(from.player_id());
  }
}

void CDOTAClientMsg_SwapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_SwapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SwapRequest::CopyFrom(const CDOTAClientMsg_SwapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_SwapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SwapRequest::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SwapRequest::Swap(CDOTAClientMsg_SwapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SwapRequest::InternalSwap(CDOTAClientMsg_SwapRequest* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_SwapRequest::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_SwapRequest

// optional uint32 player_id = 1;
bool CDOTAClientMsg_SwapRequest::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_SwapRequest::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_SwapRequest::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_SwapRequest::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAClientMsg_SwapRequest::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_SwapRequest.player_id)
  return player_id_;
}
void CDOTAClientMsg_SwapRequest::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_SwapRequest.player_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_SwapAccept::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_SwapAccept::CDOTAClientMsg_SwapAccept()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_SwapAccept)
}
CDOTAClientMsg_SwapAccept::CDOTAClientMsg_SwapAccept(const CDOTAClientMsg_SwapAccept& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_SwapAccept)
}

void CDOTAClientMsg_SwapAccept::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
}

CDOTAClientMsg_SwapAccept::~CDOTAClientMsg_SwapAccept() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_SwapAccept)
  SharedDtor();
}

void CDOTAClientMsg_SwapAccept::SharedDtor() {
}

void CDOTAClientMsg_SwapAccept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SwapAccept::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_SwapAccept& CDOTAClientMsg_SwapAccept::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_SwapAccept* CDOTAClientMsg_SwapAccept::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_SwapAccept* n = new CDOTAClientMsg_SwapAccept;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_SwapAccept::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_SwapAccept)
  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_SwapAccept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_SwapAccept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_SwapAccept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_SwapAccept)
  return false;
#undef DO_
}

void CDOTAClientMsg_SwapAccept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_SwapAccept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_SwapAccept)
}

::google::protobuf::uint8* CDOTAClientMsg_SwapAccept::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_SwapAccept)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_SwapAccept)
  return target;
}

size_t CDOTAClientMsg_SwapAccept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_SwapAccept)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SwapAccept::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_SwapAccept)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SwapAccept* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_SwapAccept>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_SwapAccept)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_SwapAccept)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SwapAccept::MergeFrom(const CDOTAClientMsg_SwapAccept& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_SwapAccept)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    set_player_id(from.player_id());
  }
}

void CDOTAClientMsg_SwapAccept::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_SwapAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SwapAccept::CopyFrom(const CDOTAClientMsg_SwapAccept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_SwapAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SwapAccept::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SwapAccept::Swap(CDOTAClientMsg_SwapAccept* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SwapAccept::InternalSwap(CDOTAClientMsg_SwapAccept* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_SwapAccept::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_SwapAccept

// optional uint32 player_id = 1;
bool CDOTAClientMsg_SwapAccept::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_SwapAccept::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_SwapAccept::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_SwapAccept::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAClientMsg_SwapAccept::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_SwapAccept.player_id)
  return player_id_;
}
void CDOTAClientMsg_SwapAccept::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_SwapAccept.player_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_WorldLine::kWorldlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_WorldLine::CDOTAClientMsg_WorldLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_WorldLine)
}
CDOTAClientMsg_WorldLine::CDOTAClientMsg_WorldLine(const CDOTAClientMsg_WorldLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_worldline()) {
    worldline_ = new ::proto::dota::CDOTAMsg_WorldLine(*from.worldline_);
  } else {
    worldline_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_WorldLine)
}

void CDOTAClientMsg_WorldLine::SharedCtor() {
  _cached_size_ = 0;
  worldline_ = NULL;
}

CDOTAClientMsg_WorldLine::~CDOTAClientMsg_WorldLine() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_WorldLine)
  SharedDtor();
}

void CDOTAClientMsg_WorldLine::SharedDtor() {
  if (this != internal_default_instance()) {
    delete worldline_;
  }
}

void CDOTAClientMsg_WorldLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_WorldLine::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_WorldLine& CDOTAClientMsg_WorldLine::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_WorldLine* CDOTAClientMsg_WorldLine::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_WorldLine* n = new CDOTAClientMsg_WorldLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_WorldLine::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_WorldLine)
  if (has_worldline()) {
    GOOGLE_DCHECK(worldline_ != NULL);
    worldline_->::proto::dota::CDOTAMsg_WorldLine::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_WorldLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_WorldLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CDOTAMsg_WorldLine worldline = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worldline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_WorldLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_WorldLine)
  return false;
#undef DO_
}

void CDOTAClientMsg_WorldLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_WorldLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_WorldLine worldline = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->worldline_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_WorldLine)
}

::google::protobuf::uint8* CDOTAClientMsg_WorldLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_WorldLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_WorldLine worldline = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->worldline_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_WorldLine)
  return target;
}

size_t CDOTAClientMsg_WorldLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_WorldLine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CDOTAMsg_WorldLine worldline = 1;
  if (has_worldline()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->worldline_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_WorldLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_WorldLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_WorldLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_WorldLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_WorldLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_WorldLine)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_WorldLine::MergeFrom(const CDOTAClientMsg_WorldLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_WorldLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_worldline()) {
    mutable_worldline()->::proto::dota::CDOTAMsg_WorldLine::MergeFrom(from.worldline());
  }
}

void CDOTAClientMsg_WorldLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_WorldLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_WorldLine::CopyFrom(const CDOTAClientMsg_WorldLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_WorldLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_WorldLine::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_WorldLine::Swap(CDOTAClientMsg_WorldLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_WorldLine::InternalSwap(CDOTAClientMsg_WorldLine* other) {
  std::swap(worldline_, other->worldline_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_WorldLine::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_WorldLine

// optional .proto.dota.CDOTAMsg_WorldLine worldline = 1;
bool CDOTAClientMsg_WorldLine::has_worldline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_WorldLine::set_has_worldline() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_WorldLine::clear_has_worldline() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_WorldLine::clear_worldline() {
  if (worldline_ != NULL) worldline_->::proto::dota::CDOTAMsg_WorldLine::Clear();
  clear_has_worldline();
}
const ::proto::dota::CDOTAMsg_WorldLine& CDOTAClientMsg_WorldLine::worldline() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_WorldLine.worldline)
  return worldline_ != NULL ? *worldline_
                         : *::proto::dota::CDOTAMsg_WorldLine::internal_default_instance();
}
::proto::dota::CDOTAMsg_WorldLine* CDOTAClientMsg_WorldLine::mutable_worldline() {
  set_has_worldline();
  if (worldline_ == NULL) {
    worldline_ = new ::proto::dota::CDOTAMsg_WorldLine;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAClientMsg_WorldLine.worldline)
  return worldline_;
}
::proto::dota::CDOTAMsg_WorldLine* CDOTAClientMsg_WorldLine::release_worldline() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAClientMsg_WorldLine.worldline)
  clear_has_worldline();
  ::proto::dota::CDOTAMsg_WorldLine* temp = worldline_;
  worldline_ = NULL;
  return temp;
}
void CDOTAClientMsg_WorldLine::set_allocated_worldline(::proto::dota::CDOTAMsg_WorldLine* worldline) {
  delete worldline_;
  worldline_ = worldline;
  if (worldline) {
    set_has_worldline();
  } else {
    clear_has_worldline();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAClientMsg_WorldLine.worldline)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_RequestGraphUpdate::CDOTAClientMsg_RequestGraphUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
}
CDOTAClientMsg_RequestGraphUpdate::CDOTAClientMsg_RequestGraphUpdate(const CDOTAClientMsg_RequestGraphUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
}

void CDOTAClientMsg_RequestGraphUpdate::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAClientMsg_RequestGraphUpdate::~CDOTAClientMsg_RequestGraphUpdate() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  SharedDtor();
}

void CDOTAClientMsg_RequestGraphUpdate::SharedDtor() {
}

void CDOTAClientMsg_RequestGraphUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_RequestGraphUpdate::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_RequestGraphUpdate& CDOTAClientMsg_RequestGraphUpdate::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_RequestGraphUpdate* CDOTAClientMsg_RequestGraphUpdate::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_RequestGraphUpdate* n = new CDOTAClientMsg_RequestGraphUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_RequestGraphUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_RequestGraphUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  return false;
#undef DO_
}

void CDOTAClientMsg_RequestGraphUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
}

::google::protobuf::uint8* CDOTAClientMsg_RequestGraphUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  return target;
}

size_t CDOTAClientMsg_RequestGraphUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_RequestGraphUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_RequestGraphUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_RequestGraphUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RequestGraphUpdate::MergeFrom(const CDOTAClientMsg_RequestGraphUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAClientMsg_RequestGraphUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RequestGraphUpdate::CopyFrom(const CDOTAClientMsg_RequestGraphUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_RequestGraphUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RequestGraphUpdate::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RequestGraphUpdate::Swap(CDOTAClientMsg_RequestGraphUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_RequestGraphUpdate::InternalSwap(CDOTAClientMsg_RequestGraphUpdate* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_RequestGraphUpdate::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_RequestGraphUpdate

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_ChatWheel::kChatMessageIdFieldNumber;
const int CDOTAClientMsg_ChatWheel::kParamHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_ChatWheel::CDOTAClientMsg_ChatWheel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_ChatWheel)
}
CDOTAClientMsg_ChatWheel::CDOTAClientMsg_ChatWheel(const CDOTAClientMsg_ChatWheel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_message_id_, &from.chat_message_id_,
    reinterpret_cast<char*>(&param_hero_id_) -
    reinterpret_cast<char*>(&chat_message_id_) + sizeof(param_hero_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_ChatWheel)
}

void CDOTAClientMsg_ChatWheel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chat_message_id_, 0, reinterpret_cast<char*>(&param_hero_id_) -
    reinterpret_cast<char*>(&chat_message_id_) + sizeof(param_hero_id_));
}

CDOTAClientMsg_ChatWheel::~CDOTAClientMsg_ChatWheel() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_ChatWheel)
  SharedDtor();
}

void CDOTAClientMsg_ChatWheel::SharedDtor() {
}

void CDOTAClientMsg_ChatWheel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ChatWheel::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_ChatWheel& CDOTAClientMsg_ChatWheel::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_ChatWheel* CDOTAClientMsg_ChatWheel::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_ChatWheel* n = new CDOTAClientMsg_ChatWheel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_ChatWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_ChatWheel)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chat_message_id_, 0, reinterpret_cast<char*>(&param_hero_id_) -
      reinterpret_cast<char*>(&chat_message_id_) + sizeof(param_hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_ChatWheel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_ChatWheel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chat_message_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chat_message_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 param_hero_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_param_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_ChatWheel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_ChatWheel)
  return false;
#undef DO_
}

void CDOTAClientMsg_ChatWheel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_ChatWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 chat_message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chat_message_id(), output);
  }

  // optional uint32 param_hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param_hero_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_ChatWheel)
}

::google::protobuf::uint8* CDOTAClientMsg_ChatWheel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_ChatWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 chat_message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chat_message_id(), target);
  }

  // optional uint32 param_hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param_hero_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_ChatWheel)
  return target;
}

size_t CDOTAClientMsg_ChatWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_ChatWheel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 chat_message_id = 1;
    if (has_chat_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chat_message_id());
    }

    // optional uint32 param_hero_id = 2;
    if (has_param_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param_hero_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ChatWheel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_ChatWheel)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ChatWheel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_ChatWheel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_ChatWheel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_ChatWheel)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChatWheel::MergeFrom(const CDOTAClientMsg_ChatWheel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_ChatWheel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chat_message_id_ = from.chat_message_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      param_hero_id_ = from.param_hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ChatWheel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_ChatWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChatWheel::CopyFrom(const CDOTAClientMsg_ChatWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_ChatWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChatWheel::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ChatWheel::Swap(CDOTAClientMsg_ChatWheel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ChatWheel::InternalSwap(CDOTAClientMsg_ChatWheel* other) {
  std::swap(chat_message_id_, other->chat_message_id_);
  std::swap(param_hero_id_, other->param_hero_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_ChatWheel::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_ChatWheel

// optional uint32 chat_message_id = 1;
bool CDOTAClientMsg_ChatWheel::has_chat_message_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_ChatWheel::set_has_chat_message_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_ChatWheel::clear_has_chat_message_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_ChatWheel::clear_chat_message_id() {
  chat_message_id_ = 0u;
  clear_has_chat_message_id();
}
::google::protobuf::uint32 CDOTAClientMsg_ChatWheel::chat_message_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_ChatWheel.chat_message_id)
  return chat_message_id_;
}
void CDOTAClientMsg_ChatWheel::set_chat_message_id(::google::protobuf::uint32 value) {
  set_has_chat_message_id();
  chat_message_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_ChatWheel.chat_message_id)
}

// optional uint32 param_hero_id = 2;
bool CDOTAClientMsg_ChatWheel::has_param_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_ChatWheel::set_has_param_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_ChatWheel::clear_has_param_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_ChatWheel::clear_param_hero_id() {
  param_hero_id_ = 0u;
  clear_has_param_hero_id();
}
::google::protobuf::uint32 CDOTAClientMsg_ChatWheel::param_hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_ChatWheel.param_hero_id)
  return param_hero_id_;
}
void CDOTAClientMsg_ChatWheel::set_param_hero_id(::google::protobuf::uint32 value) {
  set_has_param_hero_id();
  param_hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_ChatWheel.param_hero_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_SendStatPopup::kStatpopupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_SendStatPopup::CDOTAClientMsg_SendStatPopup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_SendStatPopup)
}
CDOTAClientMsg_SendStatPopup::CDOTAClientMsg_SendStatPopup(const CDOTAClientMsg_SendStatPopup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_statpopup()) {
    statpopup_ = new ::proto::dota::CDOTAMsg_SendStatPopup(*from.statpopup_);
  } else {
    statpopup_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_SendStatPopup)
}

void CDOTAClientMsg_SendStatPopup::SharedCtor() {
  _cached_size_ = 0;
  statpopup_ = NULL;
}

CDOTAClientMsg_SendStatPopup::~CDOTAClientMsg_SendStatPopup() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_SendStatPopup)
  SharedDtor();
}

void CDOTAClientMsg_SendStatPopup::SharedDtor() {
  if (this != internal_default_instance()) {
    delete statpopup_;
  }
}

void CDOTAClientMsg_SendStatPopup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SendStatPopup::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_SendStatPopup& CDOTAClientMsg_SendStatPopup::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_SendStatPopup* CDOTAClientMsg_SendStatPopup::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_SendStatPopup* n = new CDOTAClientMsg_SendStatPopup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_SendStatPopup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_SendStatPopup)
  if (has_statpopup()) {
    GOOGLE_DCHECK(statpopup_ != NULL);
    statpopup_->::proto::dota::CDOTAMsg_SendStatPopup::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_SendStatPopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_SendStatPopup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CDOTAMsg_SendStatPopup statpopup = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statpopup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_SendStatPopup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_SendStatPopup)
  return false;
#undef DO_
}

void CDOTAClientMsg_SendStatPopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_SendStatPopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_SendStatPopup statpopup = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->statpopup_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_SendStatPopup)
}

::google::protobuf::uint8* CDOTAClientMsg_SendStatPopup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_SendStatPopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_SendStatPopup statpopup = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->statpopup_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_SendStatPopup)
  return target;
}

size_t CDOTAClientMsg_SendStatPopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_SendStatPopup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CDOTAMsg_SendStatPopup statpopup = 1;
  if (has_statpopup()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->statpopup_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SendStatPopup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_SendStatPopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SendStatPopup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_SendStatPopup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_SendStatPopup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_SendStatPopup)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SendStatPopup::MergeFrom(const CDOTAClientMsg_SendStatPopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_SendStatPopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statpopup()) {
    mutable_statpopup()->::proto::dota::CDOTAMsg_SendStatPopup::MergeFrom(from.statpopup());
  }
}

void CDOTAClientMsg_SendStatPopup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_SendStatPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SendStatPopup::CopyFrom(const CDOTAClientMsg_SendStatPopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_SendStatPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SendStatPopup::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SendStatPopup::Swap(CDOTAClientMsg_SendStatPopup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SendStatPopup::InternalSwap(CDOTAClientMsg_SendStatPopup* other) {
  std::swap(statpopup_, other->statpopup_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_SendStatPopup::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_SendStatPopup

// optional .proto.dota.CDOTAMsg_SendStatPopup statpopup = 1;
bool CDOTAClientMsg_SendStatPopup::has_statpopup() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_SendStatPopup::set_has_statpopup() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_SendStatPopup::clear_has_statpopup() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_SendStatPopup::clear_statpopup() {
  if (statpopup_ != NULL) statpopup_->::proto::dota::CDOTAMsg_SendStatPopup::Clear();
  clear_has_statpopup();
}
const ::proto::dota::CDOTAMsg_SendStatPopup& CDOTAClientMsg_SendStatPopup::statpopup() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_SendStatPopup.statpopup)
  return statpopup_ != NULL ? *statpopup_
                         : *::proto::dota::CDOTAMsg_SendStatPopup::internal_default_instance();
}
::proto::dota::CDOTAMsg_SendStatPopup* CDOTAClientMsg_SendStatPopup::mutable_statpopup() {
  set_has_statpopup();
  if (statpopup_ == NULL) {
    statpopup_ = new ::proto::dota::CDOTAMsg_SendStatPopup;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAClientMsg_SendStatPopup.statpopup)
  return statpopup_;
}
::proto::dota::CDOTAMsg_SendStatPopup* CDOTAClientMsg_SendStatPopup::release_statpopup() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAClientMsg_SendStatPopup.statpopup)
  clear_has_statpopup();
  ::proto::dota::CDOTAMsg_SendStatPopup* temp = statpopup_;
  statpopup_ = NULL;
  return temp;
}
void CDOTAClientMsg_SendStatPopup::set_allocated_statpopup(::proto::dota::CDOTAMsg_SendStatPopup* statpopup) {
  delete statpopup_;
  statpopup_ = statpopup;
  if (statpopup) {
    set_has_statpopup();
  } else {
    clear_has_statpopup();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAClientMsg_SendStatPopup.statpopup)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_DismissAllStatPopups::kDismissallmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_DismissAllStatPopups::CDOTAClientMsg_DismissAllStatPopups()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
}
CDOTAClientMsg_DismissAllStatPopups::CDOTAClientMsg_DismissAllStatPopups(const CDOTAClientMsg_DismissAllStatPopups& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dismissallmsg()) {
    dismissallmsg_ = new ::proto::dota::CDOTAMsg_DismissAllStatPopups(*from.dismissallmsg_);
  } else {
    dismissallmsg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
}

void CDOTAClientMsg_DismissAllStatPopups::SharedCtor() {
  _cached_size_ = 0;
  dismissallmsg_ = NULL;
}

CDOTAClientMsg_DismissAllStatPopups::~CDOTAClientMsg_DismissAllStatPopups() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  SharedDtor();
}

void CDOTAClientMsg_DismissAllStatPopups::SharedDtor() {
  if (this != internal_default_instance()) {
    delete dismissallmsg_;
  }
}

void CDOTAClientMsg_DismissAllStatPopups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_DismissAllStatPopups::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_DismissAllStatPopups& CDOTAClientMsg_DismissAllStatPopups::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_DismissAllStatPopups* CDOTAClientMsg_DismissAllStatPopups::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_DismissAllStatPopups* n = new CDOTAClientMsg_DismissAllStatPopups;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_DismissAllStatPopups::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  if (has_dismissallmsg()) {
    GOOGLE_DCHECK(dismissallmsg_ != NULL);
    dismissallmsg_->::proto::dota::CDOTAMsg_DismissAllStatPopups::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_DismissAllStatPopups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dismissallmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  return false;
#undef DO_
}

void CDOTAClientMsg_DismissAllStatPopups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->dismissallmsg_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
}

::google::protobuf::uint8* CDOTAClientMsg_DismissAllStatPopups::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->dismissallmsg_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  return target;
}

size_t CDOTAClientMsg_DismissAllStatPopups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
  if (has_dismissallmsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dismissallmsg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_DismissAllStatPopups::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_DismissAllStatPopups* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_DismissAllStatPopups>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_DismissAllStatPopups::MergeFrom(const CDOTAClientMsg_DismissAllStatPopups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dismissallmsg()) {
    mutable_dismissallmsg()->::proto::dota::CDOTAMsg_DismissAllStatPopups::MergeFrom(from.dismissallmsg());
  }
}

void CDOTAClientMsg_DismissAllStatPopups::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_DismissAllStatPopups::CopyFrom(const CDOTAClientMsg_DismissAllStatPopups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_DismissAllStatPopups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_DismissAllStatPopups::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_DismissAllStatPopups::Swap(CDOTAClientMsg_DismissAllStatPopups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_DismissAllStatPopups::InternalSwap(CDOTAClientMsg_DismissAllStatPopups* other) {
  std::swap(dismissallmsg_, other->dismissallmsg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_DismissAllStatPopups::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_DismissAllStatPopups

// optional .proto.dota.CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
bool CDOTAClientMsg_DismissAllStatPopups::has_dismissallmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_DismissAllStatPopups::set_has_dismissallmsg() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_DismissAllStatPopups::clear_has_dismissallmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_DismissAllStatPopups::clear_dismissallmsg() {
  if (dismissallmsg_ != NULL) dismissallmsg_->::proto::dota::CDOTAMsg_DismissAllStatPopups::Clear();
  clear_has_dismissallmsg();
}
const ::proto::dota::CDOTAMsg_DismissAllStatPopups& CDOTAClientMsg_DismissAllStatPopups::dismissallmsg() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_DismissAllStatPopups.dismissallmsg)
  return dismissallmsg_ != NULL ? *dismissallmsg_
                         : *::proto::dota::CDOTAMsg_DismissAllStatPopups::internal_default_instance();
}
::proto::dota::CDOTAMsg_DismissAllStatPopups* CDOTAClientMsg_DismissAllStatPopups::mutable_dismissallmsg() {
  set_has_dismissallmsg();
  if (dismissallmsg_ == NULL) {
    dismissallmsg_ = new ::proto::dota::CDOTAMsg_DismissAllStatPopups;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAClientMsg_DismissAllStatPopups.dismissallmsg)
  return dismissallmsg_;
}
::proto::dota::CDOTAMsg_DismissAllStatPopups* CDOTAClientMsg_DismissAllStatPopups::release_dismissallmsg() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAClientMsg_DismissAllStatPopups.dismissallmsg)
  clear_has_dismissallmsg();
  ::proto::dota::CDOTAMsg_DismissAllStatPopups* temp = dismissallmsg_;
  dismissallmsg_ = NULL;
  return temp;
}
void CDOTAClientMsg_DismissAllStatPopups::set_allocated_dismissallmsg(::proto::dota::CDOTAMsg_DismissAllStatPopups* dismissallmsg) {
  delete dismissallmsg_;
  dismissallmsg_ = dismissallmsg;
  if (dismissallmsg) {
    set_has_dismissallmsg();
  } else {
    clear_has_dismissallmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAClientMsg_DismissAllStatPopups.dismissallmsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_BeginLastHitChallenge::kChosenLaneFieldNumber;
const int CDOTAClientMsg_BeginLastHitChallenge::kHelperEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_BeginLastHitChallenge::CDOTAClientMsg_BeginLastHitChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
}
CDOTAClientMsg_BeginLastHitChallenge::CDOTAClientMsg_BeginLastHitChallenge(const CDOTAClientMsg_BeginLastHitChallenge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chosen_lane_, &from.chosen_lane_,
    reinterpret_cast<char*>(&helper_enabled_) -
    reinterpret_cast<char*>(&chosen_lane_) + sizeof(helper_enabled_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
}

void CDOTAClientMsg_BeginLastHitChallenge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chosen_lane_, 0, reinterpret_cast<char*>(&helper_enabled_) -
    reinterpret_cast<char*>(&chosen_lane_) + sizeof(helper_enabled_));
}

CDOTAClientMsg_BeginLastHitChallenge::~CDOTAClientMsg_BeginLastHitChallenge() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  SharedDtor();
}

void CDOTAClientMsg_BeginLastHitChallenge::SharedDtor() {
}

void CDOTAClientMsg_BeginLastHitChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_BeginLastHitChallenge::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_BeginLastHitChallenge& CDOTAClientMsg_BeginLastHitChallenge::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_BeginLastHitChallenge* CDOTAClientMsg_BeginLastHitChallenge::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_BeginLastHitChallenge* n = new CDOTAClientMsg_BeginLastHitChallenge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_BeginLastHitChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chosen_lane_, 0, reinterpret_cast<char*>(&helper_enabled_) -
      reinterpret_cast<char*>(&chosen_lane_) + sizeof(helper_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_BeginLastHitChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chosen_lane = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chosen_lane();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chosen_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool helper_enabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_helper_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &helper_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  return false;
#undef DO_
}

void CDOTAClientMsg_BeginLastHitChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 chosen_lane = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chosen_lane(), output);
  }

  // optional bool helper_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->helper_enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
}

::google::protobuf::uint8* CDOTAClientMsg_BeginLastHitChallenge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 chosen_lane = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chosen_lane(), target);
  }

  // optional bool helper_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->helper_enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  return target;
}

size_t CDOTAClientMsg_BeginLastHitChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 chosen_lane = 1;
    if (has_chosen_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chosen_lane());
    }

    // optional bool helper_enabled = 2;
    if (has_helper_enabled()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_BeginLastHitChallenge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_BeginLastHitChallenge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_BeginLastHitChallenge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BeginLastHitChallenge::MergeFrom(const CDOTAClientMsg_BeginLastHitChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chosen_lane_ = from.chosen_lane_;
    }
    if (cached_has_bits & 0x00000002u) {
      helper_enabled_ = from.helper_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_BeginLastHitChallenge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BeginLastHitChallenge::CopyFrom(const CDOTAClientMsg_BeginLastHitChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_BeginLastHitChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BeginLastHitChallenge::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_BeginLastHitChallenge::Swap(CDOTAClientMsg_BeginLastHitChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_BeginLastHitChallenge::InternalSwap(CDOTAClientMsg_BeginLastHitChallenge* other) {
  std::swap(chosen_lane_, other->chosen_lane_);
  std::swap(helper_enabled_, other->helper_enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_BeginLastHitChallenge::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_BeginLastHitChallenge

// optional uint32 chosen_lane = 1;
bool CDOTAClientMsg_BeginLastHitChallenge::has_chosen_lane() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_BeginLastHitChallenge::set_has_chosen_lane() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_BeginLastHitChallenge::clear_has_chosen_lane() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_BeginLastHitChallenge::clear_chosen_lane() {
  chosen_lane_ = 0u;
  clear_has_chosen_lane();
}
::google::protobuf::uint32 CDOTAClientMsg_BeginLastHitChallenge::chosen_lane() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_BeginLastHitChallenge.chosen_lane)
  return chosen_lane_;
}
void CDOTAClientMsg_BeginLastHitChallenge::set_chosen_lane(::google::protobuf::uint32 value) {
  set_has_chosen_lane();
  chosen_lane_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_BeginLastHitChallenge.chosen_lane)
}

// optional bool helper_enabled = 2;
bool CDOTAClientMsg_BeginLastHitChallenge::has_helper_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_BeginLastHitChallenge::set_has_helper_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_BeginLastHitChallenge::clear_has_helper_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_BeginLastHitChallenge::clear_helper_enabled() {
  helper_enabled_ = false;
  clear_has_helper_enabled();
}
bool CDOTAClientMsg_BeginLastHitChallenge::helper_enabled() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_BeginLastHitChallenge.helper_enabled)
  return helper_enabled_;
}
void CDOTAClientMsg_BeginLastHitChallenge::set_helper_enabled(bool value) {
  set_has_helper_enabled();
  helper_enabled_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_BeginLastHitChallenge.helper_enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_UpdateQuickBuyItem::kItemTypeFieldNumber;
const int CDOTAClientMsg_UpdateQuickBuyItem::kPurchasableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_UpdateQuickBuyItem::CDOTAClientMsg_UpdateQuickBuyItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
}
CDOTAClientMsg_UpdateQuickBuyItem::CDOTAClientMsg_UpdateQuickBuyItem(const CDOTAClientMsg_UpdateQuickBuyItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_type_, &from.item_type_,
    reinterpret_cast<char*>(&purchasable_) -
    reinterpret_cast<char*>(&item_type_) + sizeof(purchasable_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
}

void CDOTAClientMsg_UpdateQuickBuyItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_type_, 0, reinterpret_cast<char*>(&purchasable_) -
    reinterpret_cast<char*>(&item_type_) + sizeof(purchasable_));
}

CDOTAClientMsg_UpdateQuickBuyItem::~CDOTAClientMsg_UpdateQuickBuyItem() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  SharedDtor();
}

void CDOTAClientMsg_UpdateQuickBuyItem::SharedDtor() {
}

void CDOTAClientMsg_UpdateQuickBuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateQuickBuyItem::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_UpdateQuickBuyItem& CDOTAClientMsg_UpdateQuickBuyItem::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_UpdateQuickBuyItem* CDOTAClientMsg_UpdateQuickBuyItem::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_UpdateQuickBuyItem* n = new CDOTAClientMsg_UpdateQuickBuyItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_UpdateQuickBuyItem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&item_type_, 0, reinterpret_cast<char*>(&purchasable_) -
      reinterpret_cast<char*>(&item_type_) + sizeof(purchasable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_UpdateQuickBuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool purchasable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_purchasable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &purchasable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  return false;
#undef DO_
}

void CDOTAClientMsg_UpdateQuickBuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_type(), output);
  }

  // optional bool purchasable = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->purchasable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
}

::google::protobuf::uint8* CDOTAClientMsg_UpdateQuickBuyItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_type(), target);
  }

  // optional bool purchasable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->purchasable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  return target;
}

size_t CDOTAClientMsg_UpdateQuickBuyItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 item_type = 1;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_type());
    }

    // optional bool purchasable = 2;
    if (has_purchasable()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_UpdateQuickBuyItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_UpdateQuickBuyItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_UpdateQuickBuyItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UpdateQuickBuyItem::MergeFrom(const CDOTAClientMsg_UpdateQuickBuyItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      item_type_ = from.item_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      purchasable_ = from.purchasable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_UpdateQuickBuyItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UpdateQuickBuyItem::CopyFrom(const CDOTAClientMsg_UpdateQuickBuyItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UpdateQuickBuyItem::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_UpdateQuickBuyItem::Swap(CDOTAClientMsg_UpdateQuickBuyItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_UpdateQuickBuyItem::InternalSwap(CDOTAClientMsg_UpdateQuickBuyItem* other) {
  std::swap(item_type_, other->item_type_);
  std::swap(purchasable_, other->purchasable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_UpdateQuickBuyItem::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_UpdateQuickBuyItem

// optional int32 item_type = 1;
bool CDOTAClientMsg_UpdateQuickBuyItem::has_item_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_UpdateQuickBuyItem::set_has_item_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_UpdateQuickBuyItem::clear_has_item_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_UpdateQuickBuyItem::clear_item_type() {
  item_type_ = 0;
  clear_has_item_type();
}
::google::protobuf::int32 CDOTAClientMsg_UpdateQuickBuyItem::item_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem.item_type)
  return item_type_;
}
void CDOTAClientMsg_UpdateQuickBuyItem::set_item_type(::google::protobuf::int32 value) {
  set_has_item_type();
  item_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem.item_type)
}

// optional bool purchasable = 2;
bool CDOTAClientMsg_UpdateQuickBuyItem::has_purchasable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_UpdateQuickBuyItem::set_has_purchasable() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_UpdateQuickBuyItem::clear_has_purchasable() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_UpdateQuickBuyItem::clear_purchasable() {
  purchasable_ = false;
  clear_has_purchasable();
}
bool CDOTAClientMsg_UpdateQuickBuyItem::purchasable() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem.purchasable)
  return purchasable_;
}
void CDOTAClientMsg_UpdateQuickBuyItem::set_purchasable(bool value) {
  set_has_purchasable();
  purchasable_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_UpdateQuickBuyItem.purchasable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_UpdateQuickBuy::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_UpdateQuickBuy::CDOTAClientMsg_UpdateQuickBuy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
}
CDOTAClientMsg_UpdateQuickBuy::CDOTAClientMsg_UpdateQuickBuy(const CDOTAClientMsg_UpdateQuickBuy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
}

void CDOTAClientMsg_UpdateQuickBuy::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAClientMsg_UpdateQuickBuy::~CDOTAClientMsg_UpdateQuickBuy() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  SharedDtor();
}

void CDOTAClientMsg_UpdateQuickBuy::SharedDtor() {
}

void CDOTAClientMsg_UpdateQuickBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_UpdateQuickBuy::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_UpdateQuickBuy& CDOTAClientMsg_UpdateQuickBuy::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_UpdateQuickBuy* CDOTAClientMsg_UpdateQuickBuy::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_UpdateQuickBuy* n = new CDOTAClientMsg_UpdateQuickBuy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_UpdateQuickBuy::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  items_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_UpdateQuickBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CDOTAClientMsg_UpdateQuickBuyItem items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  return false;
#undef DO_
}

void CDOTAClientMsg_UpdateQuickBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAClientMsg_UpdateQuickBuyItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
}

::google::protobuf::uint8* CDOTAClientMsg_UpdateQuickBuy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAClientMsg_UpdateQuickBuyItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  return target;
}

size_t CDOTAClientMsg_UpdateQuickBuy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTAClientMsg_UpdateQuickBuyItem items = 1;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_UpdateQuickBuy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_UpdateQuickBuy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_UpdateQuickBuy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_UpdateQuickBuy::MergeFrom(const CDOTAClientMsg_UpdateQuickBuy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void CDOTAClientMsg_UpdateQuickBuy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_UpdateQuickBuy::CopyFrom(const CDOTAClientMsg_UpdateQuickBuy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_UpdateQuickBuy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_UpdateQuickBuy::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_UpdateQuickBuy::Swap(CDOTAClientMsg_UpdateQuickBuy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_UpdateQuickBuy::InternalSwap(CDOTAClientMsg_UpdateQuickBuy* other) {
  items_.InternalSwap(&other->items_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_UpdateQuickBuy::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_UpdateQuickBuy

// repeated .proto.dota.CDOTAClientMsg_UpdateQuickBuyItem items = 1;
int CDOTAClientMsg_UpdateQuickBuy::items_size() const {
  return items_.size();
}
void CDOTAClientMsg_UpdateQuickBuy::clear_items() {
  items_.Clear();
}
const ::proto::dota::CDOTAClientMsg_UpdateQuickBuyItem& CDOTAClientMsg_UpdateQuickBuy::items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_UpdateQuickBuy.items)
  return items_.Get(index);
}
::proto::dota::CDOTAClientMsg_UpdateQuickBuyItem* CDOTAClientMsg_UpdateQuickBuy::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAClientMsg_UpdateQuickBuy.items)
  return items_.Mutable(index);
}
::proto::dota::CDOTAClientMsg_UpdateQuickBuyItem* CDOTAClientMsg_UpdateQuickBuy::add_items() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAClientMsg_UpdateQuickBuy.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAClientMsg_UpdateQuickBuyItem >*
CDOTAClientMsg_UpdateQuickBuy::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAClientMsg_UpdateQuickBuy.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAClientMsg_UpdateQuickBuyItem >&
CDOTAClientMsg_UpdateQuickBuy::items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAClientMsg_UpdateQuickBuy.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_RecordVote::kChoiceIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_RecordVote::CDOTAClientMsg_RecordVote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_RecordVote)
}
CDOTAClientMsg_RecordVote::CDOTAClientMsg_RecordVote(const CDOTAClientMsg_RecordVote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  choice_index_ = from.choice_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_RecordVote)
}

void CDOTAClientMsg_RecordVote::SharedCtor() {
  _cached_size_ = 0;
  choice_index_ = 0;
}

CDOTAClientMsg_RecordVote::~CDOTAClientMsg_RecordVote() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_RecordVote)
  SharedDtor();
}

void CDOTAClientMsg_RecordVote::SharedDtor() {
}

void CDOTAClientMsg_RecordVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_RecordVote::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_RecordVote& CDOTAClientMsg_RecordVote::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_RecordVote* CDOTAClientMsg_RecordVote::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_RecordVote* n = new CDOTAClientMsg_RecordVote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_RecordVote::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_RecordVote)
  choice_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_RecordVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_RecordVote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 choice_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_choice_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &choice_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_RecordVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_RecordVote)
  return false;
#undef DO_
}

void CDOTAClientMsg_RecordVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_RecordVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 choice_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->choice_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_RecordVote)
}

::google::protobuf::uint8* CDOTAClientMsg_RecordVote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_RecordVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 choice_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->choice_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_RecordVote)
  return target;
}

size_t CDOTAClientMsg_RecordVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_RecordVote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 choice_index = 1;
  if (has_choice_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->choice_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_RecordVote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_RecordVote)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_RecordVote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_RecordVote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_RecordVote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_RecordVote)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RecordVote::MergeFrom(const CDOTAClientMsg_RecordVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_RecordVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_choice_index()) {
    set_choice_index(from.choice_index());
  }
}

void CDOTAClientMsg_RecordVote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_RecordVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RecordVote::CopyFrom(const CDOTAClientMsg_RecordVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_RecordVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RecordVote::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RecordVote::Swap(CDOTAClientMsg_RecordVote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_RecordVote::InternalSwap(CDOTAClientMsg_RecordVote* other) {
  std::swap(choice_index_, other->choice_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_RecordVote::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_RecordVote

// optional int32 choice_index = 1;
bool CDOTAClientMsg_RecordVote::has_choice_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_RecordVote::set_has_choice_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_RecordVote::clear_has_choice_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_RecordVote::clear_choice_index() {
  choice_index_ = 0;
  clear_has_choice_index();
}
::google::protobuf::int32 CDOTAClientMsg_RecordVote::choice_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_RecordVote.choice_index)
  return choice_index_;
}
void CDOTAClientMsg_RecordVote::set_choice_index(::google::protobuf::int32 value) {
  set_has_choice_index();
  choice_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_RecordVote.choice_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_WillPurchaseAlert::kItemidFieldNumber;
const int CDOTAClientMsg_WillPurchaseAlert::kGoldRemainingFieldNumber;
const int CDOTAClientMsg_WillPurchaseAlert::kSuggestionPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_WillPurchaseAlert::CDOTAClientMsg_WillPurchaseAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
}
CDOTAClientMsg_WillPurchaseAlert::CDOTAClientMsg_WillPurchaseAlert(const CDOTAClientMsg_WillPurchaseAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&itemid_, &from.itemid_,
    reinterpret_cast<char*>(&suggestion_player_id_) -
    reinterpret_cast<char*>(&itemid_) + sizeof(suggestion_player_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
}

void CDOTAClientMsg_WillPurchaseAlert::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&itemid_, 0, reinterpret_cast<char*>(&suggestion_player_id_) -
    reinterpret_cast<char*>(&itemid_) + sizeof(suggestion_player_id_));
}

CDOTAClientMsg_WillPurchaseAlert::~CDOTAClientMsg_WillPurchaseAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  SharedDtor();
}

void CDOTAClientMsg_WillPurchaseAlert::SharedDtor() {
}

void CDOTAClientMsg_WillPurchaseAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_WillPurchaseAlert::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_WillPurchaseAlert& CDOTAClientMsg_WillPurchaseAlert::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_WillPurchaseAlert* CDOTAClientMsg_WillPurchaseAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_WillPurchaseAlert* n = new CDOTAClientMsg_WillPurchaseAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_WillPurchaseAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&itemid_, 0, reinterpret_cast<char*>(&suggestion_player_id_) -
      reinterpret_cast<char*>(&itemid_) + sizeof(suggestion_player_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_WillPurchaseAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold_remaining = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_gold_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 suggestion_player_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_suggestion_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suggestion_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_WillPurchaseAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 itemid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional uint32 gold_remaining = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gold_remaining(), output);
  }

  // optional int32 suggestion_player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->suggestion_player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_WillPurchaseAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 itemid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 gold_remaining = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gold_remaining(), target);
  }

  // optional int32 suggestion_player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->suggestion_player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  return target;
}

size_t CDOTAClientMsg_WillPurchaseAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional uint32 gold_remaining = 2;
    if (has_gold_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_remaining());
    }

    // optional int32 suggestion_player_id = 3;
    if (has_suggestion_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suggestion_player_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_WillPurchaseAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_WillPurchaseAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_WillPurchaseAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_WillPurchaseAlert::MergeFrom(const CDOTAClientMsg_WillPurchaseAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gold_remaining_ = from.gold_remaining_;
    }
    if (cached_has_bits & 0x00000004u) {
      suggestion_player_id_ = from.suggestion_player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_WillPurchaseAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_WillPurchaseAlert::CopyFrom(const CDOTAClientMsg_WillPurchaseAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_WillPurchaseAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_WillPurchaseAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_WillPurchaseAlert::Swap(CDOTAClientMsg_WillPurchaseAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_WillPurchaseAlert::InternalSwap(CDOTAClientMsg_WillPurchaseAlert* other) {
  std::swap(itemid_, other->itemid_);
  std::swap(gold_remaining_, other->gold_remaining_);
  std::swap(suggestion_player_id_, other->suggestion_player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_WillPurchaseAlert::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_WillPurchaseAlert

// optional int32 itemid = 1;
bool CDOTAClientMsg_WillPurchaseAlert::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_WillPurchaseAlert::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_WillPurchaseAlert::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_WillPurchaseAlert::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
::google::protobuf::int32 CDOTAClientMsg_WillPurchaseAlert::itemid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_WillPurchaseAlert.itemid)
  return itemid_;
}
void CDOTAClientMsg_WillPurchaseAlert::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_WillPurchaseAlert.itemid)
}

// optional uint32 gold_remaining = 2;
bool CDOTAClientMsg_WillPurchaseAlert::has_gold_remaining() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_WillPurchaseAlert::set_has_gold_remaining() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_WillPurchaseAlert::clear_has_gold_remaining() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_WillPurchaseAlert::clear_gold_remaining() {
  gold_remaining_ = 0u;
  clear_has_gold_remaining();
}
::google::protobuf::uint32 CDOTAClientMsg_WillPurchaseAlert::gold_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_WillPurchaseAlert.gold_remaining)
  return gold_remaining_;
}
void CDOTAClientMsg_WillPurchaseAlert::set_gold_remaining(::google::protobuf::uint32 value) {
  set_has_gold_remaining();
  gold_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_WillPurchaseAlert.gold_remaining)
}

// optional int32 suggestion_player_id = 3;
bool CDOTAClientMsg_WillPurchaseAlert::has_suggestion_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAClientMsg_WillPurchaseAlert::set_has_suggestion_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAClientMsg_WillPurchaseAlert::clear_has_suggestion_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAClientMsg_WillPurchaseAlert::clear_suggestion_player_id() {
  suggestion_player_id_ = 0;
  clear_has_suggestion_player_id();
}
::google::protobuf::int32 CDOTAClientMsg_WillPurchaseAlert::suggestion_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_WillPurchaseAlert.suggestion_player_id)
  return suggestion_player_id_;
}
void CDOTAClientMsg_WillPurchaseAlert::set_suggestion_player_id(::google::protobuf::int32 value) {
  set_has_suggestion_player_id();
  suggestion_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_WillPurchaseAlert.suggestion_player_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_BuyBackStateAlert::CDOTAClientMsg_BuyBackStateAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
}
CDOTAClientMsg_BuyBackStateAlert::CDOTAClientMsg_BuyBackStateAlert(const CDOTAClientMsg_BuyBackStateAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
}

void CDOTAClientMsg_BuyBackStateAlert::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAClientMsg_BuyBackStateAlert::~CDOTAClientMsg_BuyBackStateAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  SharedDtor();
}

void CDOTAClientMsg_BuyBackStateAlert::SharedDtor() {
}

void CDOTAClientMsg_BuyBackStateAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_BuyBackStateAlert::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_BuyBackStateAlert& CDOTAClientMsg_BuyBackStateAlert::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_BuyBackStateAlert* CDOTAClientMsg_BuyBackStateAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_BuyBackStateAlert* n = new CDOTAClientMsg_BuyBackStateAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_BuyBackStateAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_BuyBackStateAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_BuyBackStateAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_BuyBackStateAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  return target;
}

size_t CDOTAClientMsg_BuyBackStateAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_BuyBackStateAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_BuyBackStateAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_BuyBackStateAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BuyBackStateAlert::MergeFrom(const CDOTAClientMsg_BuyBackStateAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAClientMsg_BuyBackStateAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BuyBackStateAlert::CopyFrom(const CDOTAClientMsg_BuyBackStateAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_BuyBackStateAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BuyBackStateAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_BuyBackStateAlert::Swap(CDOTAClientMsg_BuyBackStateAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_BuyBackStateAlert::InternalSwap(CDOTAClientMsg_BuyBackStateAlert* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_BuyBackStateAlert::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_BuyBackStateAlert

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_QuickBuyAlert::kItemidFieldNumber;
const int CDOTAClientMsg_QuickBuyAlert::kGoldRequiredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_QuickBuyAlert::CDOTAClientMsg_QuickBuyAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_QuickBuyAlert)
}
CDOTAClientMsg_QuickBuyAlert::CDOTAClientMsg_QuickBuyAlert(const CDOTAClientMsg_QuickBuyAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&itemid_, &from.itemid_,
    reinterpret_cast<char*>(&gold_required_) -
    reinterpret_cast<char*>(&itemid_) + sizeof(gold_required_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_QuickBuyAlert)
}

void CDOTAClientMsg_QuickBuyAlert::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&itemid_, 0, reinterpret_cast<char*>(&gold_required_) -
    reinterpret_cast<char*>(&itemid_) + sizeof(gold_required_));
}

CDOTAClientMsg_QuickBuyAlert::~CDOTAClientMsg_QuickBuyAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  SharedDtor();
}

void CDOTAClientMsg_QuickBuyAlert::SharedDtor() {
}

void CDOTAClientMsg_QuickBuyAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_QuickBuyAlert::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_QuickBuyAlert& CDOTAClientMsg_QuickBuyAlert::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_QuickBuyAlert* CDOTAClientMsg_QuickBuyAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_QuickBuyAlert* n = new CDOTAClientMsg_QuickBuyAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_QuickBuyAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&itemid_, 0, reinterpret_cast<char*>(&gold_required_) -
      reinterpret_cast<char*>(&itemid_) + sizeof(gold_required_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_QuickBuyAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gold_required = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_gold_required();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_QuickBuyAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 itemid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 gold_required = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold_required(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_QuickBuyAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_QuickBuyAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 itemid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 gold_required = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold_required(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  return target;
}

size_t CDOTAClientMsg_QuickBuyAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 gold_required = 2;
    if (has_gold_required()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_required());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_QuickBuyAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_QuickBuyAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_QuickBuyAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_QuickBuyAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_QuickBuyAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_QuickBuyAlert::MergeFrom(const CDOTAClientMsg_QuickBuyAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gold_required_ = from.gold_required_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_QuickBuyAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_QuickBuyAlert::CopyFrom(const CDOTAClientMsg_QuickBuyAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_QuickBuyAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_QuickBuyAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_QuickBuyAlert::Swap(CDOTAClientMsg_QuickBuyAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_QuickBuyAlert::InternalSwap(CDOTAClientMsg_QuickBuyAlert* other) {
  std::swap(itemid_, other->itemid_);
  std::swap(gold_required_, other->gold_required_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_QuickBuyAlert::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_QuickBuyAlert

// optional int32 itemid = 1;
bool CDOTAClientMsg_QuickBuyAlert::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_QuickBuyAlert::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_QuickBuyAlert::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_QuickBuyAlert::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
::google::protobuf::int32 CDOTAClientMsg_QuickBuyAlert::itemid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_QuickBuyAlert.itemid)
  return itemid_;
}
void CDOTAClientMsg_QuickBuyAlert::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_QuickBuyAlert.itemid)
}

// optional int32 gold_required = 2;
bool CDOTAClientMsg_QuickBuyAlert::has_gold_required() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_QuickBuyAlert::set_has_gold_required() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_QuickBuyAlert::clear_has_gold_required() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_QuickBuyAlert::clear_gold_required() {
  gold_required_ = 0;
  clear_has_gold_required();
}
::google::protobuf::int32 CDOTAClientMsg_QuickBuyAlert::gold_required() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_QuickBuyAlert.gold_required)
  return gold_required_;
}
void CDOTAClientMsg_QuickBuyAlert::set_gold_required(::google::protobuf::int32 value) {
  set_has_gold_required();
  gold_required_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_QuickBuyAlert.gold_required)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_PlayerShowCase::kShowcaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_PlayerShowCase::CDOTAClientMsg_PlayerShowCase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_PlayerShowCase)
}
CDOTAClientMsg_PlayerShowCase::CDOTAClientMsg_PlayerShowCase(const CDOTAClientMsg_PlayerShowCase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  showcase_ = from.showcase_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_PlayerShowCase)
}

void CDOTAClientMsg_PlayerShowCase::SharedCtor() {
  _cached_size_ = 0;
  showcase_ = false;
}

CDOTAClientMsg_PlayerShowCase::~CDOTAClientMsg_PlayerShowCase() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_PlayerShowCase)
  SharedDtor();
}

void CDOTAClientMsg_PlayerShowCase::SharedDtor() {
}

void CDOTAClientMsg_PlayerShowCase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_PlayerShowCase::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_PlayerShowCase& CDOTAClientMsg_PlayerShowCase::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_PlayerShowCase* CDOTAClientMsg_PlayerShowCase::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_PlayerShowCase* n = new CDOTAClientMsg_PlayerShowCase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_PlayerShowCase::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_PlayerShowCase)
  showcase_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_PlayerShowCase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_PlayerShowCase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool showcase = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_showcase();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showcase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_PlayerShowCase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_PlayerShowCase)
  return false;
#undef DO_
}

void CDOTAClientMsg_PlayerShowCase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_PlayerShowCase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool showcase = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->showcase(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_PlayerShowCase)
}

::google::protobuf::uint8* CDOTAClientMsg_PlayerShowCase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_PlayerShowCase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool showcase = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->showcase(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_PlayerShowCase)
  return target;
}

size_t CDOTAClientMsg_PlayerShowCase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_PlayerShowCase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool showcase = 1;
  if (has_showcase()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_PlayerShowCase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_PlayerShowCase)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_PlayerShowCase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_PlayerShowCase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_PlayerShowCase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_PlayerShowCase)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_PlayerShowCase::MergeFrom(const CDOTAClientMsg_PlayerShowCase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_PlayerShowCase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_showcase()) {
    set_showcase(from.showcase());
  }
}

void CDOTAClientMsg_PlayerShowCase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_PlayerShowCase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_PlayerShowCase::CopyFrom(const CDOTAClientMsg_PlayerShowCase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_PlayerShowCase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_PlayerShowCase::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_PlayerShowCase::Swap(CDOTAClientMsg_PlayerShowCase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_PlayerShowCase::InternalSwap(CDOTAClientMsg_PlayerShowCase* other) {
  std::swap(showcase_, other->showcase_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_PlayerShowCase::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_PlayerShowCase

// optional bool showcase = 1;
bool CDOTAClientMsg_PlayerShowCase::has_showcase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_PlayerShowCase::set_has_showcase() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_PlayerShowCase::clear_has_showcase() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_PlayerShowCase::clear_showcase() {
  showcase_ = false;
  clear_has_showcase();
}
bool CDOTAClientMsg_PlayerShowCase::showcase() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_PlayerShowCase.showcase)
  return showcase_;
}
void CDOTAClientMsg_PlayerShowCase::set_showcase(bool value) {
  set_has_showcase();
  showcase_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_PlayerShowCase.showcase)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_CameraZoomAmount::kZoomAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_CameraZoomAmount::CDOTAClientMsg_CameraZoomAmount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_CameraZoomAmount)
}
CDOTAClientMsg_CameraZoomAmount::CDOTAClientMsg_CameraZoomAmount(const CDOTAClientMsg_CameraZoomAmount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  zoom_amount_ = from.zoom_amount_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_CameraZoomAmount)
}

void CDOTAClientMsg_CameraZoomAmount::SharedCtor() {
  _cached_size_ = 0;
  zoom_amount_ = 0;
}

CDOTAClientMsg_CameraZoomAmount::~CDOTAClientMsg_CameraZoomAmount() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  SharedDtor();
}

void CDOTAClientMsg_CameraZoomAmount::SharedDtor() {
}

void CDOTAClientMsg_CameraZoomAmount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_CameraZoomAmount::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_CameraZoomAmount& CDOTAClientMsg_CameraZoomAmount::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_CameraZoomAmount* CDOTAClientMsg_CameraZoomAmount::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_CameraZoomAmount* n = new CDOTAClientMsg_CameraZoomAmount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_CameraZoomAmount::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  zoom_amount_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_CameraZoomAmount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float zoom_amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_zoom_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zoom_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  return false;
#undef DO_
}

void CDOTAClientMsg_CameraZoomAmount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float zoom_amount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->zoom_amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_CameraZoomAmount)
}

::google::protobuf::uint8* CDOTAClientMsg_CameraZoomAmount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float zoom_amount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->zoom_amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  return target;
}

size_t CDOTAClientMsg_CameraZoomAmount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional float zoom_amount = 1;
  if (has_zoom_amount()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_CameraZoomAmount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_CameraZoomAmount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_CameraZoomAmount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_CameraZoomAmount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_CameraZoomAmount)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_CameraZoomAmount::MergeFrom(const CDOTAClientMsg_CameraZoomAmount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_zoom_amount()) {
    set_zoom_amount(from.zoom_amount());
  }
}

void CDOTAClientMsg_CameraZoomAmount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_CameraZoomAmount::CopyFrom(const CDOTAClientMsg_CameraZoomAmount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_CameraZoomAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_CameraZoomAmount::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_CameraZoomAmount::Swap(CDOTAClientMsg_CameraZoomAmount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_CameraZoomAmount::InternalSwap(CDOTAClientMsg_CameraZoomAmount* other) {
  std::swap(zoom_amount_, other->zoom_amount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_CameraZoomAmount::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_CameraZoomAmount

// optional float zoom_amount = 1;
bool CDOTAClientMsg_CameraZoomAmount::has_zoom_amount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_CameraZoomAmount::set_has_zoom_amount() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_CameraZoomAmount::clear_has_zoom_amount() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_CameraZoomAmount::clear_zoom_amount() {
  zoom_amount_ = 0;
  clear_has_zoom_amount();
}
float CDOTAClientMsg_CameraZoomAmount::zoom_amount() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_CameraZoomAmount.zoom_amount)
  return zoom_amount_;
}
void CDOTAClientMsg_CameraZoomAmount::set_zoom_amount(float value) {
  set_has_zoom_amount();
  zoom_amount_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_CameraZoomAmount.zoom_amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_BroadcasterUsingCameraman::kCameramanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_BroadcasterUsingCameraman::CDOTAClientMsg_BroadcasterUsingCameraman()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
}
CDOTAClientMsg_BroadcasterUsingCameraman::CDOTAClientMsg_BroadcasterUsingCameraman(const CDOTAClientMsg_BroadcasterUsingCameraman& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cameraman_ = from.cameraman_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SharedCtor() {
  _cached_size_ = 0;
  cameraman_ = false;
}

CDOTAClientMsg_BroadcasterUsingCameraman::~CDOTAClientMsg_BroadcasterUsingCameraman() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  SharedDtor();
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SharedDtor() {
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_BroadcasterUsingCameraman::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_BroadcasterUsingCameraman& CDOTAClientMsg_BroadcasterUsingCameraman::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_BroadcasterUsingCameraman* CDOTAClientMsg_BroadcasterUsingCameraman::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_BroadcasterUsingCameraman* n = new CDOTAClientMsg_BroadcasterUsingCameraman;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_BroadcasterUsingCameraman::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  cameraman_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_BroadcasterUsingCameraman::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool cameraman = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cameraman();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cameraman_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  return false;
#undef DO_
}

void CDOTAClientMsg_BroadcasterUsingCameraman::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool cameraman = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->cameraman(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
}

::google::protobuf::uint8* CDOTAClientMsg_BroadcasterUsingCameraman::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool cameraman = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->cameraman(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  return target;
}

size_t CDOTAClientMsg_BroadcasterUsingCameraman::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool cameraman = 1;
  if (has_cameraman()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_BroadcasterUsingCameraman::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_BroadcasterUsingCameraman* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_BroadcasterUsingCameraman>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BroadcasterUsingCameraman::MergeFrom(const CDOTAClientMsg_BroadcasterUsingCameraman& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cameraman()) {
    set_cameraman(from.cameraman());
  }
}

void CDOTAClientMsg_BroadcasterUsingCameraman::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BroadcasterUsingCameraman::CopyFrom(const CDOTAClientMsg_BroadcasterUsingCameraman& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BroadcasterUsingCameraman::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_BroadcasterUsingCameraman::Swap(CDOTAClientMsg_BroadcasterUsingCameraman* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_BroadcasterUsingCameraman::InternalSwap(CDOTAClientMsg_BroadcasterUsingCameraman* other) {
  std::swap(cameraman_, other->cameraman_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_BroadcasterUsingCameraman::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_BroadcasterUsingCameraman

// optional bool cameraman = 1;
bool CDOTAClientMsg_BroadcasterUsingCameraman::has_cameraman() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_BroadcasterUsingCameraman::set_has_cameraman() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_BroadcasterUsingCameraman::clear_has_cameraman() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_BroadcasterUsingCameraman::clear_cameraman() {
  cameraman_ = false;
  clear_has_cameraman();
}
bool CDOTAClientMsg_BroadcasterUsingCameraman::cameraman() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman.cameraman)
  return cameraman_;
}
void CDOTAClientMsg_BroadcasterUsingCameraman::set_cameraman(bool value) {
  set_has_cameraman();
  cameraman_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_BroadcasterUsingCameraman.cameraman)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
}
CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
}

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::~CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  SharedDtor();
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SharedDtor() {
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* n = new CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  return false;
#undef DO_
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
}

::google::protobuf::uint8* CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  return target;
}

size_t CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool enabled = 1;
  if (has_enabled()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::MergeFrom(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::CopyFrom(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::Swap(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::InternalSwap(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator

// optional bool enabled = 1;
bool CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
bool CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::enabled() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator.enabled)
  return enabled_;
}
void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator.enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAdditionalEquipSlotClientMsg::kClassIdFieldNumber;
const int CAdditionalEquipSlotClientMsg::kSlotIdFieldNumber;
const int CAdditionalEquipSlotClientMsg::kDefIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAdditionalEquipSlotClientMsg::CAdditionalEquipSlotClientMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CAdditionalEquipSlotClientMsg)
}
CAdditionalEquipSlotClientMsg::CAdditionalEquipSlotClientMsg(const CAdditionalEquipSlotClientMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&class_id_, &from.class_id_,
    reinterpret_cast<char*>(&def_index_) -
    reinterpret_cast<char*>(&class_id_) + sizeof(def_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CAdditionalEquipSlotClientMsg)
}

void CAdditionalEquipSlotClientMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&class_id_, 0, reinterpret_cast<char*>(&def_index_) -
    reinterpret_cast<char*>(&class_id_) + sizeof(def_index_));
}

CAdditionalEquipSlotClientMsg::~CAdditionalEquipSlotClientMsg() {
  // @@protoc_insertion_point(destructor:proto.dota.CAdditionalEquipSlotClientMsg)
  SharedDtor();
}

void CAdditionalEquipSlotClientMsg::SharedDtor() {
}

void CAdditionalEquipSlotClientMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAdditionalEquipSlotClientMsg::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAdditionalEquipSlotClientMsg& CAdditionalEquipSlotClientMsg::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CAdditionalEquipSlotClientMsg* CAdditionalEquipSlotClientMsg::New(::google::protobuf::Arena* arena) const {
  CAdditionalEquipSlotClientMsg* n = new CAdditionalEquipSlotClientMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CAdditionalEquipSlotClientMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CAdditionalEquipSlotClientMsg)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&class_id_, 0, reinterpret_cast<char*>(&def_index_) -
      reinterpret_cast<char*>(&class_id_) + sizeof(def_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAdditionalEquipSlotClientMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CAdditionalEquipSlotClientMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 class_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_class_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_slot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 def_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_def_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CAdditionalEquipSlotClientMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CAdditionalEquipSlotClientMsg)
  return false;
#undef DO_
}

void CAdditionalEquipSlotClientMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CAdditionalEquipSlotClientMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 class_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->class_id(), output);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_id(), output);
  }

  // optional uint32 def_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CAdditionalEquipSlotClientMsg)
}

::google::protobuf::uint8* CAdditionalEquipSlotClientMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CAdditionalEquipSlotClientMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 class_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->class_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_id(), target);
  }

  // optional uint32 def_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->def_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CAdditionalEquipSlotClientMsg)
  return target;
}

size_t CAdditionalEquipSlotClientMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CAdditionalEquipSlotClientMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_id());
    }

    // optional uint32 slot_id = 2;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 def_index = 3;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAdditionalEquipSlotClientMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CAdditionalEquipSlotClientMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CAdditionalEquipSlotClientMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAdditionalEquipSlotClientMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CAdditionalEquipSlotClientMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CAdditionalEquipSlotClientMsg)
    MergeFrom(*source);
  }
}

void CAdditionalEquipSlotClientMsg::MergeFrom(const CAdditionalEquipSlotClientMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CAdditionalEquipSlotClientMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      class_id_ = from.class_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      def_index_ = from.def_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAdditionalEquipSlotClientMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CAdditionalEquipSlotClientMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAdditionalEquipSlotClientMsg::CopyFrom(const CAdditionalEquipSlotClientMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CAdditionalEquipSlotClientMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAdditionalEquipSlotClientMsg::IsInitialized() const {
  return true;
}

void CAdditionalEquipSlotClientMsg::Swap(CAdditionalEquipSlotClientMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAdditionalEquipSlotClientMsg::InternalSwap(CAdditionalEquipSlotClientMsg* other) {
  std::swap(class_id_, other->class_id_);
  std::swap(slot_id_, other->slot_id_);
  std::swap(def_index_, other->def_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CAdditionalEquipSlotClientMsg::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CAdditionalEquipSlotClientMsg

// optional uint32 class_id = 1;
bool CAdditionalEquipSlotClientMsg::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CAdditionalEquipSlotClientMsg::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CAdditionalEquipSlotClientMsg::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CAdditionalEquipSlotClientMsg::clear_class_id() {
  class_id_ = 0u;
  clear_has_class_id();
}
::google::protobuf::uint32 CAdditionalEquipSlotClientMsg::class_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CAdditionalEquipSlotClientMsg.class_id)
  return class_id_;
}
void CAdditionalEquipSlotClientMsg::set_class_id(::google::protobuf::uint32 value) {
  set_has_class_id();
  class_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CAdditionalEquipSlotClientMsg.class_id)
}

// optional uint32 slot_id = 2;
bool CAdditionalEquipSlotClientMsg::has_slot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CAdditionalEquipSlotClientMsg::set_has_slot_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CAdditionalEquipSlotClientMsg::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CAdditionalEquipSlotClientMsg::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
::google::protobuf::uint32 CAdditionalEquipSlotClientMsg::slot_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CAdditionalEquipSlotClientMsg.slot_id)
  return slot_id_;
}
void CAdditionalEquipSlotClientMsg::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CAdditionalEquipSlotClientMsg.slot_id)
}

// optional uint32 def_index = 3;
bool CAdditionalEquipSlotClientMsg::has_def_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CAdditionalEquipSlotClientMsg::set_has_def_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CAdditionalEquipSlotClientMsg::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CAdditionalEquipSlotClientMsg::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
::google::protobuf::uint32 CAdditionalEquipSlotClientMsg::def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CAdditionalEquipSlotClientMsg.def_index)
  return def_index_;
}
void CAdditionalEquipSlotClientMsg::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CAdditionalEquipSlotClientMsg.def_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_FreeInventory::kEquipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_FreeInventory::CDOTAClientMsg_FreeInventory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_FreeInventory)
}
CDOTAClientMsg_FreeInventory::CDOTAClientMsg_FreeInventory(const CDOTAClientMsg_FreeInventory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      equips_(from.equips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_FreeInventory)
}

void CDOTAClientMsg_FreeInventory::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAClientMsg_FreeInventory::~CDOTAClientMsg_FreeInventory() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_FreeInventory)
  SharedDtor();
}

void CDOTAClientMsg_FreeInventory::SharedDtor() {
}

void CDOTAClientMsg_FreeInventory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_FreeInventory::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_FreeInventory& CDOTAClientMsg_FreeInventory::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_FreeInventory* CDOTAClientMsg_FreeInventory::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_FreeInventory* n = new CDOTAClientMsg_FreeInventory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_FreeInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_FreeInventory)
  equips_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_FreeInventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_FreeInventory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CAdditionalEquipSlotClientMsg equips = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_FreeInventory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_FreeInventory)
  return false;
#undef DO_
}

void CDOTAClientMsg_FreeInventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_FreeInventory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CAdditionalEquipSlotClientMsg equips = 1;
  for (unsigned int i = 0, n = this->equips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_FreeInventory)
}

::google::protobuf::uint8* CDOTAClientMsg_FreeInventory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_FreeInventory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CAdditionalEquipSlotClientMsg equips = 1;
  for (unsigned int i = 0, n = this->equips_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->equips(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_FreeInventory)
  return target;
}

size_t CDOTAClientMsg_FreeInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_FreeInventory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CAdditionalEquipSlotClientMsg equips = 1;
  {
    unsigned int count = this->equips_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equips(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_FreeInventory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_FreeInventory)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_FreeInventory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_FreeInventory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_FreeInventory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_FreeInventory)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_FreeInventory::MergeFrom(const CDOTAClientMsg_FreeInventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_FreeInventory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equips_.MergeFrom(from.equips_);
}

void CDOTAClientMsg_FreeInventory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_FreeInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_FreeInventory::CopyFrom(const CDOTAClientMsg_FreeInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_FreeInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_FreeInventory::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_FreeInventory::Swap(CDOTAClientMsg_FreeInventory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_FreeInventory::InternalSwap(CDOTAClientMsg_FreeInventory* other) {
  equips_.InternalSwap(&other->equips_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_FreeInventory::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_FreeInventory

// repeated .proto.dota.CAdditionalEquipSlotClientMsg equips = 1;
int CDOTAClientMsg_FreeInventory::equips_size() const {
  return equips_.size();
}
void CDOTAClientMsg_FreeInventory::clear_equips() {
  equips_.Clear();
}
const ::proto::dota::CAdditionalEquipSlotClientMsg& CDOTAClientMsg_FreeInventory::equips(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_FreeInventory.equips)
  return equips_.Get(index);
}
::proto::dota::CAdditionalEquipSlotClientMsg* CDOTAClientMsg_FreeInventory::mutable_equips(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAClientMsg_FreeInventory.equips)
  return equips_.Mutable(index);
}
::proto::dota::CAdditionalEquipSlotClientMsg* CDOTAClientMsg_FreeInventory::add_equips() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAClientMsg_FreeInventory.equips)
  return equips_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CAdditionalEquipSlotClientMsg >*
CDOTAClientMsg_FreeInventory::mutable_equips() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAClientMsg_FreeInventory.equips)
  return &equips_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CAdditionalEquipSlotClientMsg >&
CDOTAClientMsg_FreeInventory::equips() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAClientMsg_FreeInventory.equips)
  return equips_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_FillEmptySlotsWithBots::kFillwithbotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_FillEmptySlotsWithBots::CDOTAClientMsg_FillEmptySlotsWithBots()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
}
CDOTAClientMsg_FillEmptySlotsWithBots::CDOTAClientMsg_FillEmptySlotsWithBots(const CDOTAClientMsg_FillEmptySlotsWithBots& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fillwithbots_ = from.fillwithbots_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
}

void CDOTAClientMsg_FillEmptySlotsWithBots::SharedCtor() {
  _cached_size_ = 0;
  fillwithbots_ = false;
}

CDOTAClientMsg_FillEmptySlotsWithBots::~CDOTAClientMsg_FillEmptySlotsWithBots() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  SharedDtor();
}

void CDOTAClientMsg_FillEmptySlotsWithBots::SharedDtor() {
}

void CDOTAClientMsg_FillEmptySlotsWithBots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_FillEmptySlotsWithBots::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_FillEmptySlotsWithBots& CDOTAClientMsg_FillEmptySlotsWithBots::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_FillEmptySlotsWithBots* CDOTAClientMsg_FillEmptySlotsWithBots::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_FillEmptySlotsWithBots* n = new CDOTAClientMsg_FillEmptySlotsWithBots;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_FillEmptySlotsWithBots::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  fillwithbots_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_FillEmptySlotsWithBots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool fillwithbots = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fillwithbots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fillwithbots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  return false;
#undef DO_
}

void CDOTAClientMsg_FillEmptySlotsWithBots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool fillwithbots = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->fillwithbots(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
}

::google::protobuf::uint8* CDOTAClientMsg_FillEmptySlotsWithBots::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool fillwithbots = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->fillwithbots(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  return target;
}

size_t CDOTAClientMsg_FillEmptySlotsWithBots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool fillwithbots = 1;
  if (has_fillwithbots()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_FillEmptySlotsWithBots::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_FillEmptySlotsWithBots* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_FillEmptySlotsWithBots>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_FillEmptySlotsWithBots::MergeFrom(const CDOTAClientMsg_FillEmptySlotsWithBots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fillwithbots()) {
    set_fillwithbots(from.fillwithbots());
  }
}

void CDOTAClientMsg_FillEmptySlotsWithBots::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_FillEmptySlotsWithBots::CopyFrom(const CDOTAClientMsg_FillEmptySlotsWithBots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_FillEmptySlotsWithBots::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_FillEmptySlotsWithBots::Swap(CDOTAClientMsg_FillEmptySlotsWithBots* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_FillEmptySlotsWithBots::InternalSwap(CDOTAClientMsg_FillEmptySlotsWithBots* other) {
  std::swap(fillwithbots_, other->fillwithbots_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_FillEmptySlotsWithBots::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_FillEmptySlotsWithBots

// optional bool fillwithbots = 1;
bool CDOTAClientMsg_FillEmptySlotsWithBots::has_fillwithbots() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_FillEmptySlotsWithBots::set_has_fillwithbots() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_FillEmptySlotsWithBots::clear_has_fillwithbots() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_FillEmptySlotsWithBots::clear_fillwithbots() {
  fillwithbots_ = false;
  clear_has_fillwithbots();
}
bool CDOTAClientMsg_FillEmptySlotsWithBots::fillwithbots() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots.fillwithbots)
  return fillwithbots_;
}
void CDOTAClientMsg_FillEmptySlotsWithBots::set_fillwithbots(bool value) {
  set_has_fillwithbots();
  fillwithbots_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_FillEmptySlotsWithBots.fillwithbots)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_HeroStatueLike::kOwnerPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_HeroStatueLike::CDOTAClientMsg_HeroStatueLike()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_HeroStatueLike)
}
CDOTAClientMsg_HeroStatueLike::CDOTAClientMsg_HeroStatueLike(const CDOTAClientMsg_HeroStatueLike& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_player_id_ = from.owner_player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_HeroStatueLike)
}

void CDOTAClientMsg_HeroStatueLike::SharedCtor() {
  _cached_size_ = 0;
  owner_player_id_ = 0u;
}

CDOTAClientMsg_HeroStatueLike::~CDOTAClientMsg_HeroStatueLike() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_HeroStatueLike)
  SharedDtor();
}

void CDOTAClientMsg_HeroStatueLike::SharedDtor() {
}

void CDOTAClientMsg_HeroStatueLike::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_HeroStatueLike::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_HeroStatueLike& CDOTAClientMsg_HeroStatueLike::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_HeroStatueLike* CDOTAClientMsg_HeroStatueLike::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_HeroStatueLike* n = new CDOTAClientMsg_HeroStatueLike;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_HeroStatueLike::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_HeroStatueLike)
  owner_player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_HeroStatueLike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_HeroStatueLike)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 owner_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_owner_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_HeroStatueLike)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_HeroStatueLike)
  return false;
#undef DO_
}

void CDOTAClientMsg_HeroStatueLike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_HeroStatueLike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->owner_player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_HeroStatueLike)
}

::google::protobuf::uint8* CDOTAClientMsg_HeroStatueLike::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_HeroStatueLike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->owner_player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_HeroStatueLike)
  return target;
}

size_t CDOTAClientMsg_HeroStatueLike::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_HeroStatueLike)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 owner_player_id = 1;
  if (has_owner_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_HeroStatueLike::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_HeroStatueLike)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_HeroStatueLike* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_HeroStatueLike>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_HeroStatueLike)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_HeroStatueLike)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_HeroStatueLike::MergeFrom(const CDOTAClientMsg_HeroStatueLike& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_HeroStatueLike)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_owner_player_id()) {
    set_owner_player_id(from.owner_player_id());
  }
}

void CDOTAClientMsg_HeroStatueLike::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_HeroStatueLike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_HeroStatueLike::CopyFrom(const CDOTAClientMsg_HeroStatueLike& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_HeroStatueLike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_HeroStatueLike::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_HeroStatueLike::Swap(CDOTAClientMsg_HeroStatueLike* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_HeroStatueLike::InternalSwap(CDOTAClientMsg_HeroStatueLike* other) {
  std::swap(owner_player_id_, other->owner_player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_HeroStatueLike::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_HeroStatueLike

// optional uint32 owner_player_id = 1;
bool CDOTAClientMsg_HeroStatueLike::has_owner_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_HeroStatueLike::set_has_owner_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_HeroStatueLike::clear_has_owner_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_HeroStatueLike::clear_owner_player_id() {
  owner_player_id_ = 0u;
  clear_has_owner_player_id();
}
::google::protobuf::uint32 CDOTAClientMsg_HeroStatueLike::owner_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_HeroStatueLike.owner_player_id)
  return owner_player_id_;
}
void CDOTAClientMsg_HeroStatueLike::set_owner_player_id(::google::protobuf::uint32 value) {
  set_has_owner_player_id();
  owner_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_HeroStatueLike.owner_player_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_EventCNY2015Cmd::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_EventCNY2015Cmd::CDOTAClientMsg_EventCNY2015Cmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
}
CDOTAClientMsg_EventCNY2015Cmd::CDOTAClientMsg_EventCNY2015Cmd(const CDOTAClientMsg_EventCNY2015Cmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
}

void CDOTAClientMsg_EventCNY2015Cmd::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDOTAClientMsg_EventCNY2015Cmd::~CDOTAClientMsg_EventCNY2015Cmd() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  SharedDtor();
}

void CDOTAClientMsg_EventCNY2015Cmd::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_EventCNY2015Cmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_EventCNY2015Cmd::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_EventCNY2015Cmd& CDOTAClientMsg_EventCNY2015Cmd::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_EventCNY2015Cmd* CDOTAClientMsg_EventCNY2015Cmd::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_EventCNY2015Cmd* n = new CDOTAClientMsg_EventCNY2015Cmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_EventCNY2015Cmd::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_EventCNY2015Cmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  return false;
#undef DO_
}

void CDOTAClientMsg_EventCNY2015Cmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
}

::google::protobuf::uint8* CDOTAClientMsg_EventCNY2015Cmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  return target;
}

size_t CDOTAClientMsg_EventCNY2015Cmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bytes data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_EventCNY2015Cmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_EventCNY2015Cmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_EventCNY2015Cmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EventCNY2015Cmd::MergeFrom(const CDOTAClientMsg_EventCNY2015Cmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    set_has_data();
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void CDOTAClientMsg_EventCNY2015Cmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EventCNY2015Cmd::CopyFrom(const CDOTAClientMsg_EventCNY2015Cmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_EventCNY2015Cmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EventCNY2015Cmd::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_EventCNY2015Cmd::Swap(CDOTAClientMsg_EventCNY2015Cmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_EventCNY2015Cmd::InternalSwap(CDOTAClientMsg_EventCNY2015Cmd* other) {
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_EventCNY2015Cmd::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_EventCNY2015Cmd

// optional bytes data = 1;
bool CDOTAClientMsg_EventCNY2015Cmd::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_EventCNY2015Cmd::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_EventCNY2015Cmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_EventCNY2015Cmd::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CDOTAClientMsg_EventCNY2015Cmd::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_EventCNY2015Cmd.data)
  return data_.GetNoArena();
}
void CDOTAClientMsg_EventCNY2015Cmd::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_EventCNY2015Cmd.data)
}
#if LANG_CXX11
void CDOTAClientMsg_EventCNY2015Cmd::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAClientMsg_EventCNY2015Cmd.data)
}
#endif
void CDOTAClientMsg_EventCNY2015Cmd::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAClientMsg_EventCNY2015Cmd.data)
}
void CDOTAClientMsg_EventCNY2015Cmd::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAClientMsg_EventCNY2015Cmd.data)
}
::std::string* CDOTAClientMsg_EventCNY2015Cmd::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAClientMsg_EventCNY2015Cmd.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAClientMsg_EventCNY2015Cmd::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAClientMsg_EventCNY2015Cmd.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAClientMsg_EventCNY2015Cmd::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAClientMsg_EventCNY2015Cmd.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_DemoHero::kHeroIdFieldNumber;
const int CDOTAClientMsg_DemoHero::kHeroIdToSpawnFieldNumber;
const int CDOTAClientMsg_DemoHero::kItemDefsFieldNumber;
const int CDOTAClientMsg_DemoHero::kItemIdsFieldNumber;
const int CDOTAClientMsg_DemoHero::kStyleIndexFieldNumber;
const int CDOTAClientMsg_DemoHero::kKeepExistingDemoheroFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_DemoHero::CDOTAClientMsg_DemoHero()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_DemoHero)
}
CDOTAClientMsg_DemoHero::CDOTAClientMsg_DemoHero(const CDOTAClientMsg_DemoHero& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      item_defs_(from.item_defs_),
      item_ids_(from.item_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    reinterpret_cast<char*>(&keep_existing_demohero_) -
    reinterpret_cast<char*>(&hero_id_) + sizeof(keep_existing_demohero_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_DemoHero)
}

void CDOTAClientMsg_DemoHero::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hero_id_, 0, reinterpret_cast<char*>(&keep_existing_demohero_) -
    reinterpret_cast<char*>(&hero_id_) + sizeof(keep_existing_demohero_));
}

CDOTAClientMsg_DemoHero::~CDOTAClientMsg_DemoHero() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_DemoHero)
  SharedDtor();
}

void CDOTAClientMsg_DemoHero::SharedDtor() {
}

void CDOTAClientMsg_DemoHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_DemoHero::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_DemoHero& CDOTAClientMsg_DemoHero::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_DemoHero* CDOTAClientMsg_DemoHero::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_DemoHero* n = new CDOTAClientMsg_DemoHero;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_DemoHero::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_DemoHero)
  item_defs_.Clear();
  item_ids_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&hero_id_, 0, reinterpret_cast<char*>(&keep_existing_demohero_) -
      reinterpret_cast<char*>(&hero_id_) + sizeof(keep_existing_demohero_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_DemoHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_DemoHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hero_id_to_spawn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hero_id_to_spawn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_id_to_spawn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 item_defs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_item_defs())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_defs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 item_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32u, input, this->mutable_item_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 style_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_style_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool keep_existing_demohero = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_keep_existing_demohero();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_existing_demohero_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_DemoHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_DemoHero)
  return false;
#undef DO_
}

void CDOTAClientMsg_DemoHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_DemoHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hero_id(), output);
  }

  // optional int32 hero_id_to_spawn = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hero_id_to_spawn(), output);
  }

  // repeated uint32 item_defs = 3;
  for (int i = 0, n = this->item_defs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->item_defs(i), output);
  }

  // repeated uint64 item_ids = 4;
  for (int i = 0, n = this->item_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->item_ids(i), output);
  }

  // optional uint32 style_index = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->style_index(), output);
  }

  // optional bool keep_existing_demohero = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->keep_existing_demohero(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_DemoHero)
}

::google::protobuf::uint8* CDOTAClientMsg_DemoHero::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_DemoHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hero_id(), target);
  }

  // optional int32 hero_id_to_spawn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hero_id_to_spawn(), target);
  }

  // repeated uint32 item_defs = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->item_defs_, target);

  // repeated uint64 item_ids = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(4, this->item_ids_, target);

  // optional uint32 style_index = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->style_index(), target);
  }

  // optional bool keep_existing_demohero = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->keep_existing_demohero(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_DemoHero)
  return target;
}

size_t CDOTAClientMsg_DemoHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_DemoHero)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 item_defs = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->item_defs_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->item_defs_size());
    total_size += data_size;
  }

  // repeated uint64 item_ids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->item_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->item_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_id());
    }

    // optional int32 hero_id_to_spawn = 2;
    if (has_hero_id_to_spawn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_id_to_spawn());
    }

    // optional uint32 style_index = 5;
    if (has_style_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style_index());
    }

    // optional bool keep_existing_demohero = 6;
    if (has_keep_existing_demohero()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_DemoHero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_DemoHero)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_DemoHero* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_DemoHero>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_DemoHero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_DemoHero)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_DemoHero::MergeFrom(const CDOTAClientMsg_DemoHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_DemoHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_defs_.MergeFrom(from.item_defs_);
  item_ids_.MergeFrom(from.item_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_to_spawn_ = from.hero_id_to_spawn_;
    }
    if (cached_has_bits & 0x00000004u) {
      style_index_ = from.style_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      keep_existing_demohero_ = from.keep_existing_demohero_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_DemoHero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_DemoHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_DemoHero::CopyFrom(const CDOTAClientMsg_DemoHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_DemoHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_DemoHero::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_DemoHero::Swap(CDOTAClientMsg_DemoHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_DemoHero::InternalSwap(CDOTAClientMsg_DemoHero* other) {
  item_defs_.InternalSwap(&other->item_defs_);
  item_ids_.InternalSwap(&other->item_ids_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(hero_id_to_spawn_, other->hero_id_to_spawn_);
  std::swap(style_index_, other->style_index_);
  std::swap(keep_existing_demohero_, other->keep_existing_demohero_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_DemoHero::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_DemoHero

// optional int32 hero_id = 1;
bool CDOTAClientMsg_DemoHero::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_DemoHero::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_DemoHero::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_DemoHero::clear_hero_id() {
  hero_id_ = 0;
  clear_has_hero_id();
}
::google::protobuf::int32 CDOTAClientMsg_DemoHero::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_DemoHero.hero_id)
  return hero_id_;
}
void CDOTAClientMsg_DemoHero::set_hero_id(::google::protobuf::int32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_DemoHero.hero_id)
}

// optional int32 hero_id_to_spawn = 2;
bool CDOTAClientMsg_DemoHero::has_hero_id_to_spawn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_DemoHero::set_has_hero_id_to_spawn() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_DemoHero::clear_has_hero_id_to_spawn() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_DemoHero::clear_hero_id_to_spawn() {
  hero_id_to_spawn_ = 0;
  clear_has_hero_id_to_spawn();
}
::google::protobuf::int32 CDOTAClientMsg_DemoHero::hero_id_to_spawn() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_DemoHero.hero_id_to_spawn)
  return hero_id_to_spawn_;
}
void CDOTAClientMsg_DemoHero::set_hero_id_to_spawn(::google::protobuf::int32 value) {
  set_has_hero_id_to_spawn();
  hero_id_to_spawn_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_DemoHero.hero_id_to_spawn)
}

// repeated uint32 item_defs = 3;
int CDOTAClientMsg_DemoHero::item_defs_size() const {
  return item_defs_.size();
}
void CDOTAClientMsg_DemoHero::clear_item_defs() {
  item_defs_.Clear();
}
::google::protobuf::uint32 CDOTAClientMsg_DemoHero::item_defs(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_DemoHero.item_defs)
  return item_defs_.Get(index);
}
void CDOTAClientMsg_DemoHero::set_item_defs(int index, ::google::protobuf::uint32 value) {
  item_defs_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_DemoHero.item_defs)
}
void CDOTAClientMsg_DemoHero::add_item_defs(::google::protobuf::uint32 value) {
  item_defs_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAClientMsg_DemoHero.item_defs)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAClientMsg_DemoHero::item_defs() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAClientMsg_DemoHero.item_defs)
  return item_defs_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAClientMsg_DemoHero::mutable_item_defs() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAClientMsg_DemoHero.item_defs)
  return &item_defs_;
}

// repeated uint64 item_ids = 4;
int CDOTAClientMsg_DemoHero::item_ids_size() const {
  return item_ids_.size();
}
void CDOTAClientMsg_DemoHero::clear_item_ids() {
  item_ids_.Clear();
}
::google::protobuf::uint64 CDOTAClientMsg_DemoHero::item_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_DemoHero.item_ids)
  return item_ids_.Get(index);
}
void CDOTAClientMsg_DemoHero::set_item_ids(int index, ::google::protobuf::uint64 value) {
  item_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_DemoHero.item_ids)
}
void CDOTAClientMsg_DemoHero::add_item_ids(::google::protobuf::uint64 value) {
  item_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAClientMsg_DemoHero.item_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CDOTAClientMsg_DemoHero::item_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAClientMsg_DemoHero.item_ids)
  return item_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CDOTAClientMsg_DemoHero::mutable_item_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAClientMsg_DemoHero.item_ids)
  return &item_ids_;
}

// optional uint32 style_index = 5;
bool CDOTAClientMsg_DemoHero::has_style_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAClientMsg_DemoHero::set_has_style_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAClientMsg_DemoHero::clear_has_style_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAClientMsg_DemoHero::clear_style_index() {
  style_index_ = 0u;
  clear_has_style_index();
}
::google::protobuf::uint32 CDOTAClientMsg_DemoHero::style_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_DemoHero.style_index)
  return style_index_;
}
void CDOTAClientMsg_DemoHero::set_style_index(::google::protobuf::uint32 value) {
  set_has_style_index();
  style_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_DemoHero.style_index)
}

// optional bool keep_existing_demohero = 6;
bool CDOTAClientMsg_DemoHero::has_keep_existing_demohero() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAClientMsg_DemoHero::set_has_keep_existing_demohero() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAClientMsg_DemoHero::clear_has_keep_existing_demohero() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAClientMsg_DemoHero::clear_keep_existing_demohero() {
  keep_existing_demohero_ = false;
  clear_has_keep_existing_demohero();
}
bool CDOTAClientMsg_DemoHero::keep_existing_demohero() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_DemoHero.keep_existing_demohero)
  return keep_existing_demohero_;
}
void CDOTAClientMsg_DemoHero::set_keep_existing_demohero(bool value) {
  set_has_keep_existing_demohero();
  keep_existing_demohero_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_DemoHero.keep_existing_demohero)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_ChallengeSelect::kEventIdFieldNumber;
const int CDOTAClientMsg_ChallengeSelect::kSlotIdFieldNumber;
const int CDOTAClientMsg_ChallengeSelect::kSequenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_ChallengeSelect::CDOTAClientMsg_ChallengeSelect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_ChallengeSelect)
}
CDOTAClientMsg_ChallengeSelect::CDOTAClientMsg_ChallengeSelect(const CDOTAClientMsg_ChallengeSelect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    reinterpret_cast<char*>(&sequence_id_) -
    reinterpret_cast<char*>(&event_id_) + sizeof(sequence_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_ChallengeSelect)
}

void CDOTAClientMsg_ChallengeSelect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&event_id_, 0, reinterpret_cast<char*>(&sequence_id_) -
    reinterpret_cast<char*>(&event_id_) + sizeof(sequence_id_));
}

CDOTAClientMsg_ChallengeSelect::~CDOTAClientMsg_ChallengeSelect() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_ChallengeSelect)
  SharedDtor();
}

void CDOTAClientMsg_ChallengeSelect::SharedDtor() {
}

void CDOTAClientMsg_ChallengeSelect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ChallengeSelect::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_ChallengeSelect& CDOTAClientMsg_ChallengeSelect::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_ChallengeSelect* CDOTAClientMsg_ChallengeSelect::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_ChallengeSelect* n = new CDOTAClientMsg_ChallengeSelect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_ChallengeSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_ChallengeSelect)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&event_id_, 0, reinterpret_cast<char*>(&sequence_id_) -
      reinterpret_cast<char*>(&event_id_) + sizeof(sequence_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_ChallengeSelect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_ChallengeSelect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_slot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_sequence_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_ChallengeSelect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_ChallengeSelect)
  return false;
#undef DO_
}

void CDOTAClientMsg_ChallengeSelect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_ChallengeSelect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_id(), output);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_ChallengeSelect)
}

::google::protobuf::uint8* CDOTAClientMsg_ChallengeSelect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_ChallengeSelect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_ChallengeSelect)
  return target;
}

size_t CDOTAClientMsg_ChallengeSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_ChallengeSelect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 slot_id = 2;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 sequence_id = 3;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ChallengeSelect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_ChallengeSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ChallengeSelect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_ChallengeSelect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_ChallengeSelect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_ChallengeSelect)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChallengeSelect::MergeFrom(const CDOTAClientMsg_ChallengeSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_ChallengeSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_id_ = from.sequence_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ChallengeSelect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_ChallengeSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChallengeSelect::CopyFrom(const CDOTAClientMsg_ChallengeSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_ChallengeSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChallengeSelect::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ChallengeSelect::Swap(CDOTAClientMsg_ChallengeSelect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ChallengeSelect::InternalSwap(CDOTAClientMsg_ChallengeSelect* other) {
  std::swap(event_id_, other->event_id_);
  std::swap(slot_id_, other->slot_id_);
  std::swap(sequence_id_, other->sequence_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_ChallengeSelect::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_ChallengeSelect

// optional uint32 event_id = 1;
bool CDOTAClientMsg_ChallengeSelect::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_ChallengeSelect::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_ChallengeSelect::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_ChallengeSelect::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CDOTAClientMsg_ChallengeSelect::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_ChallengeSelect.event_id)
  return event_id_;
}
void CDOTAClientMsg_ChallengeSelect::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_ChallengeSelect.event_id)
}

// optional uint32 slot_id = 2;
bool CDOTAClientMsg_ChallengeSelect::has_slot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_ChallengeSelect::set_has_slot_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_ChallengeSelect::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_ChallengeSelect::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
::google::protobuf::uint32 CDOTAClientMsg_ChallengeSelect::slot_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_ChallengeSelect.slot_id)
  return slot_id_;
}
void CDOTAClientMsg_ChallengeSelect::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_ChallengeSelect.slot_id)
}

// optional uint32 sequence_id = 3;
bool CDOTAClientMsg_ChallengeSelect::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAClientMsg_ChallengeSelect::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAClientMsg_ChallengeSelect::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAClientMsg_ChallengeSelect::clear_sequence_id() {
  sequence_id_ = 0u;
  clear_has_sequence_id();
}
::google::protobuf::uint32 CDOTAClientMsg_ChallengeSelect::sequence_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_ChallengeSelect.sequence_id)
  return sequence_id_;
}
void CDOTAClientMsg_ChallengeSelect::set_sequence_id(::google::protobuf::uint32 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_ChallengeSelect.sequence_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_ChallengeReroll::kEventIdFieldNumber;
const int CDOTAClientMsg_ChallengeReroll::kSlotIdFieldNumber;
const int CDOTAClientMsg_ChallengeReroll::kSequenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_ChallengeReroll::CDOTAClientMsg_ChallengeReroll()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_ChallengeReroll)
}
CDOTAClientMsg_ChallengeReroll::CDOTAClientMsg_ChallengeReroll(const CDOTAClientMsg_ChallengeReroll& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    reinterpret_cast<char*>(&sequence_id_) -
    reinterpret_cast<char*>(&event_id_) + sizeof(sequence_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_ChallengeReroll)
}

void CDOTAClientMsg_ChallengeReroll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&event_id_, 0, reinterpret_cast<char*>(&sequence_id_) -
    reinterpret_cast<char*>(&event_id_) + sizeof(sequence_id_));
}

CDOTAClientMsg_ChallengeReroll::~CDOTAClientMsg_ChallengeReroll() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_ChallengeReroll)
  SharedDtor();
}

void CDOTAClientMsg_ChallengeReroll::SharedDtor() {
}

void CDOTAClientMsg_ChallengeReroll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ChallengeReroll::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_ChallengeReroll& CDOTAClientMsg_ChallengeReroll::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_ChallengeReroll* CDOTAClientMsg_ChallengeReroll::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_ChallengeReroll* n = new CDOTAClientMsg_ChallengeReroll;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_ChallengeReroll::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_ChallengeReroll)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&event_id_, 0, reinterpret_cast<char*>(&sequence_id_) -
      reinterpret_cast<char*>(&event_id_) + sizeof(sequence_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_ChallengeReroll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_ChallengeReroll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_slot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_sequence_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_ChallengeReroll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_ChallengeReroll)
  return false;
#undef DO_
}

void CDOTAClientMsg_ChallengeReroll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_ChallengeReroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_id(), output);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_ChallengeReroll)
}

::google::protobuf::uint8* CDOTAClientMsg_ChallengeReroll::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_ChallengeReroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_ChallengeReroll)
  return target;
}

size_t CDOTAClientMsg_ChallengeReroll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_ChallengeReroll)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 slot_id = 2;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 sequence_id = 3;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ChallengeReroll::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_ChallengeReroll)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ChallengeReroll* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_ChallengeReroll>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_ChallengeReroll)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_ChallengeReroll)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ChallengeReroll::MergeFrom(const CDOTAClientMsg_ChallengeReroll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_ChallengeReroll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_id_ = from.sequence_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ChallengeReroll::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_ChallengeReroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ChallengeReroll::CopyFrom(const CDOTAClientMsg_ChallengeReroll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_ChallengeReroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ChallengeReroll::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ChallengeReroll::Swap(CDOTAClientMsg_ChallengeReroll* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ChallengeReroll::InternalSwap(CDOTAClientMsg_ChallengeReroll* other) {
  std::swap(event_id_, other->event_id_);
  std::swap(slot_id_, other->slot_id_);
  std::swap(sequence_id_, other->sequence_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_ChallengeReroll::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_ChallengeReroll

// optional uint32 event_id = 1;
bool CDOTAClientMsg_ChallengeReroll::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_ChallengeReroll::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_ChallengeReroll::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_ChallengeReroll::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CDOTAClientMsg_ChallengeReroll::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_ChallengeReroll.event_id)
  return event_id_;
}
void CDOTAClientMsg_ChallengeReroll::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_ChallengeReroll.event_id)
}

// optional uint32 slot_id = 2;
bool CDOTAClientMsg_ChallengeReroll::has_slot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_ChallengeReroll::set_has_slot_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_ChallengeReroll::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_ChallengeReroll::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
::google::protobuf::uint32 CDOTAClientMsg_ChallengeReroll::slot_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_ChallengeReroll.slot_id)
  return slot_id_;
}
void CDOTAClientMsg_ChallengeReroll::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_ChallengeReroll.slot_id)
}

// optional uint32 sequence_id = 3;
bool CDOTAClientMsg_ChallengeReroll::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAClientMsg_ChallengeReroll::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAClientMsg_ChallengeReroll::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAClientMsg_ChallengeReroll::clear_sequence_id() {
  sequence_id_ = 0u;
  clear_has_sequence_id();
}
::google::protobuf::uint32 CDOTAClientMsg_ChallengeReroll::sequence_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_ChallengeReroll.sequence_id)
  return sequence_id_;
}
void CDOTAClientMsg_ChallengeReroll::set_sequence_id(::google::protobuf::uint32 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_ChallengeReroll.sequence_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_CoinWager::kWagerAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_CoinWager::CDOTAClientMsg_CoinWager()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_CoinWager)
}
CDOTAClientMsg_CoinWager::CDOTAClientMsg_CoinWager(const CDOTAClientMsg_CoinWager& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wager_amount_ = from.wager_amount_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_CoinWager)
}

void CDOTAClientMsg_CoinWager::SharedCtor() {
  _cached_size_ = 0;
  wager_amount_ = 0u;
}

CDOTAClientMsg_CoinWager::~CDOTAClientMsg_CoinWager() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_CoinWager)
  SharedDtor();
}

void CDOTAClientMsg_CoinWager::SharedDtor() {
}

void CDOTAClientMsg_CoinWager::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_CoinWager::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_CoinWager& CDOTAClientMsg_CoinWager::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_CoinWager* CDOTAClientMsg_CoinWager::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_CoinWager* n = new CDOTAClientMsg_CoinWager;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_CoinWager::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_CoinWager)
  wager_amount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_CoinWager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_CoinWager)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wager_amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_wager_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wager_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_CoinWager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_CoinWager)
  return false;
#undef DO_
}

void CDOTAClientMsg_CoinWager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_CoinWager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wager_amount = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wager_amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_CoinWager)
}

::google::protobuf::uint8* CDOTAClientMsg_CoinWager::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_CoinWager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wager_amount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wager_amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_CoinWager)
  return target;
}

size_t CDOTAClientMsg_CoinWager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_CoinWager)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 wager_amount = 1;
  if (has_wager_amount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wager_amount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_CoinWager::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_CoinWager)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_CoinWager* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_CoinWager>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_CoinWager)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_CoinWager)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_CoinWager::MergeFrom(const CDOTAClientMsg_CoinWager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_CoinWager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wager_amount()) {
    set_wager_amount(from.wager_amount());
  }
}

void CDOTAClientMsg_CoinWager::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_CoinWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_CoinWager::CopyFrom(const CDOTAClientMsg_CoinWager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_CoinWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_CoinWager::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_CoinWager::Swap(CDOTAClientMsg_CoinWager* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_CoinWager::InternalSwap(CDOTAClientMsg_CoinWager* other) {
  std::swap(wager_amount_, other->wager_amount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_CoinWager::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_CoinWager

// optional uint32 wager_amount = 1;
bool CDOTAClientMsg_CoinWager::has_wager_amount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_CoinWager::set_has_wager_amount() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_CoinWager::clear_has_wager_amount() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_CoinWager::clear_wager_amount() {
  wager_amount_ = 0u;
  clear_has_wager_amount();
}
::google::protobuf::uint32 CDOTAClientMsg_CoinWager::wager_amount() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_CoinWager.wager_amount)
  return wager_amount_;
}
void CDOTAClientMsg_CoinWager::set_wager_amount(::google::protobuf::uint32 value) {
  set_has_wager_amount();
  wager_amount_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_CoinWager.wager_amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_CoinWagerToken::kWagerTokenItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_CoinWagerToken::CDOTAClientMsg_CoinWagerToken()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_CoinWagerToken)
}
CDOTAClientMsg_CoinWagerToken::CDOTAClientMsg_CoinWagerToken(const CDOTAClientMsg_CoinWagerToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wager_token_item_id_ = from.wager_token_item_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_CoinWagerToken)
}

void CDOTAClientMsg_CoinWagerToken::SharedCtor() {
  _cached_size_ = 0;
  wager_token_item_id_ = GOOGLE_ULONGLONG(0);
}

CDOTAClientMsg_CoinWagerToken::~CDOTAClientMsg_CoinWagerToken() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_CoinWagerToken)
  SharedDtor();
}

void CDOTAClientMsg_CoinWagerToken::SharedDtor() {
}

void CDOTAClientMsg_CoinWagerToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_CoinWagerToken::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_CoinWagerToken& CDOTAClientMsg_CoinWagerToken::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_CoinWagerToken* CDOTAClientMsg_CoinWagerToken::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_CoinWagerToken* n = new CDOTAClientMsg_CoinWagerToken;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_CoinWagerToken::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_CoinWagerToken)
  wager_token_item_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_CoinWagerToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_CoinWagerToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 wager_token_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_wager_token_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wager_token_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_CoinWagerToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_CoinWagerToken)
  return false;
#undef DO_
}

void CDOTAClientMsg_CoinWagerToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_CoinWagerToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 wager_token_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->wager_token_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_CoinWagerToken)
}

::google::protobuf::uint8* CDOTAClientMsg_CoinWagerToken::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_CoinWagerToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 wager_token_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->wager_token_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_CoinWagerToken)
  return target;
}

size_t CDOTAClientMsg_CoinWagerToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_CoinWagerToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint64 wager_token_item_id = 1;
  if (has_wager_token_item_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->wager_token_item_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_CoinWagerToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_CoinWagerToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_CoinWagerToken* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_CoinWagerToken>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_CoinWagerToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_CoinWagerToken)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_CoinWagerToken::MergeFrom(const CDOTAClientMsg_CoinWagerToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_CoinWagerToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wager_token_item_id()) {
    set_wager_token_item_id(from.wager_token_item_id());
  }
}

void CDOTAClientMsg_CoinWagerToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_CoinWagerToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_CoinWagerToken::CopyFrom(const CDOTAClientMsg_CoinWagerToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_CoinWagerToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_CoinWagerToken::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_CoinWagerToken::Swap(CDOTAClientMsg_CoinWagerToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_CoinWagerToken::InternalSwap(CDOTAClientMsg_CoinWagerToken* other) {
  std::swap(wager_token_item_id_, other->wager_token_item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_CoinWagerToken::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_CoinWagerToken

// optional uint64 wager_token_item_id = 1;
bool CDOTAClientMsg_CoinWagerToken::has_wager_token_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_CoinWagerToken::set_has_wager_token_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_CoinWagerToken::clear_has_wager_token_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_CoinWagerToken::clear_wager_token_item_id() {
  wager_token_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_wager_token_item_id();
}
::google::protobuf::uint64 CDOTAClientMsg_CoinWagerToken::wager_token_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_CoinWagerToken.wager_token_item_id)
  return wager_token_item_id_;
}
void CDOTAClientMsg_CoinWagerToken::set_wager_token_item_id(::google::protobuf::uint64 value) {
  set_has_wager_token_item_id();
  wager_token_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_CoinWagerToken.wager_token_item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_RankWager::kAnnounceWagerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_RankWager::CDOTAClientMsg_RankWager()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_RankWager)
}
CDOTAClientMsg_RankWager::CDOTAClientMsg_RankWager(const CDOTAClientMsg_RankWager& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  announce_wager_ = from.announce_wager_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_RankWager)
}

void CDOTAClientMsg_RankWager::SharedCtor() {
  _cached_size_ = 0;
  announce_wager_ = false;
}

CDOTAClientMsg_RankWager::~CDOTAClientMsg_RankWager() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_RankWager)
  SharedDtor();
}

void CDOTAClientMsg_RankWager::SharedDtor() {
}

void CDOTAClientMsg_RankWager::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_RankWager::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_RankWager& CDOTAClientMsg_RankWager::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_RankWager* CDOTAClientMsg_RankWager::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_RankWager* n = new CDOTAClientMsg_RankWager;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_RankWager::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_RankWager)
  announce_wager_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_RankWager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_RankWager)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool announce_wager = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_announce_wager();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &announce_wager_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_RankWager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_RankWager)
  return false;
#undef DO_
}

void CDOTAClientMsg_RankWager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_RankWager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool announce_wager = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->announce_wager(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_RankWager)
}

::google::protobuf::uint8* CDOTAClientMsg_RankWager::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_RankWager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool announce_wager = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->announce_wager(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_RankWager)
  return target;
}

size_t CDOTAClientMsg_RankWager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_RankWager)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool announce_wager = 1;
  if (has_announce_wager()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_RankWager::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_RankWager)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_RankWager* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_RankWager>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_RankWager)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_RankWager)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RankWager::MergeFrom(const CDOTAClientMsg_RankWager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_RankWager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_announce_wager()) {
    set_announce_wager(from.announce_wager());
  }
}

void CDOTAClientMsg_RankWager::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_RankWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RankWager::CopyFrom(const CDOTAClientMsg_RankWager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_RankWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RankWager::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RankWager::Swap(CDOTAClientMsg_RankWager* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_RankWager::InternalSwap(CDOTAClientMsg_RankWager* other) {
  std::swap(announce_wager_, other->announce_wager_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_RankWager::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_RankWager

// optional bool announce_wager = 1;
bool CDOTAClientMsg_RankWager::has_announce_wager() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_RankWager::set_has_announce_wager() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_RankWager::clear_has_announce_wager() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_RankWager::clear_announce_wager() {
  announce_wager_ = false;
  clear_has_announce_wager();
}
bool CDOTAClientMsg_RankWager::announce_wager() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_RankWager.announce_wager)
  return announce_wager_;
}
void CDOTAClientMsg_RankWager::set_announce_wager(bool value) {
  set_has_announce_wager();
  announce_wager_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_RankWager.announce_wager)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_EventPointsTip::kRecipientPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_EventPointsTip::CDOTAClientMsg_EventPointsTip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_EventPointsTip)
}
CDOTAClientMsg_EventPointsTip::CDOTAClientMsg_EventPointsTip(const CDOTAClientMsg_EventPointsTip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  recipient_player_id_ = from.recipient_player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_EventPointsTip)
}

void CDOTAClientMsg_EventPointsTip::SharedCtor() {
  _cached_size_ = 0;
  recipient_player_id_ = 0u;
}

CDOTAClientMsg_EventPointsTip::~CDOTAClientMsg_EventPointsTip() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_EventPointsTip)
  SharedDtor();
}

void CDOTAClientMsg_EventPointsTip::SharedDtor() {
}

void CDOTAClientMsg_EventPointsTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_EventPointsTip::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_EventPointsTip& CDOTAClientMsg_EventPointsTip::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_EventPointsTip* CDOTAClientMsg_EventPointsTip::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_EventPointsTip* n = new CDOTAClientMsg_EventPointsTip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_EventPointsTip::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_EventPointsTip)
  recipient_player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_EventPointsTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_EventPointsTip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 recipient_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_recipient_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recipient_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_EventPointsTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_EventPointsTip)
  return false;
#undef DO_
}

void CDOTAClientMsg_EventPointsTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_EventPointsTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 recipient_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recipient_player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_EventPointsTip)
}

::google::protobuf::uint8* CDOTAClientMsg_EventPointsTip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_EventPointsTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 recipient_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recipient_player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_EventPointsTip)
  return target;
}

size_t CDOTAClientMsg_EventPointsTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_EventPointsTip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 recipient_player_id = 1;
  if (has_recipient_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recipient_player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_EventPointsTip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_EventPointsTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_EventPointsTip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_EventPointsTip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_EventPointsTip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_EventPointsTip)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_EventPointsTip::MergeFrom(const CDOTAClientMsg_EventPointsTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_EventPointsTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_recipient_player_id()) {
    set_recipient_player_id(from.recipient_player_id());
  }
}

void CDOTAClientMsg_EventPointsTip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_EventPointsTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_EventPointsTip::CopyFrom(const CDOTAClientMsg_EventPointsTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_EventPointsTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_EventPointsTip::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_EventPointsTip::Swap(CDOTAClientMsg_EventPointsTip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_EventPointsTip::InternalSwap(CDOTAClientMsg_EventPointsTip* other) {
  std::swap(recipient_player_id_, other->recipient_player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_EventPointsTip::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_EventPointsTip

// optional uint32 recipient_player_id = 1;
bool CDOTAClientMsg_EventPointsTip::has_recipient_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_EventPointsTip::set_has_recipient_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_EventPointsTip::clear_has_recipient_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_EventPointsTip::clear_recipient_player_id() {
  recipient_player_id_ = 0u;
  clear_has_recipient_player_id();
}
::google::protobuf::uint32 CDOTAClientMsg_EventPointsTip::recipient_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_EventPointsTip.recipient_player_id)
  return recipient_player_id_;
}
void CDOTAClientMsg_EventPointsTip::set_recipient_player_id(::google::protobuf::uint32 value) {
  set_has_recipient_player_id();
  recipient_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_EventPointsTip.recipient_player_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_ExecuteOrders::kOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_ExecuteOrders::CDOTAClientMsg_ExecuteOrders()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_ExecuteOrders)
}
CDOTAClientMsg_ExecuteOrders::CDOTAClientMsg_ExecuteOrders(const CDOTAClientMsg_ExecuteOrders& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_ExecuteOrders)
}

void CDOTAClientMsg_ExecuteOrders::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAClientMsg_ExecuteOrders::~CDOTAClientMsg_ExecuteOrders() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_ExecuteOrders)
  SharedDtor();
}

void CDOTAClientMsg_ExecuteOrders::SharedDtor() {
}

void CDOTAClientMsg_ExecuteOrders::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ExecuteOrders::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_ExecuteOrders& CDOTAClientMsg_ExecuteOrders::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_ExecuteOrders* CDOTAClientMsg_ExecuteOrders::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_ExecuteOrders* n = new CDOTAClientMsg_ExecuteOrders;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_ExecuteOrders::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_ExecuteOrders)
  orders_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_ExecuteOrders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_ExecuteOrders)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CDOTAMsg_UnitOrder orders = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_ExecuteOrders)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_ExecuteOrders)
  return false;
#undef DO_
}

void CDOTAClientMsg_ExecuteOrders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_ExecuteOrders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMsg_UnitOrder orders = 1;
  for (unsigned int i = 0, n = this->orders_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->orders(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_ExecuteOrders)
}

::google::protobuf::uint8* CDOTAClientMsg_ExecuteOrders::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_ExecuteOrders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMsg_UnitOrder orders = 1;
  for (unsigned int i = 0, n = this->orders_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->orders(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_ExecuteOrders)
  return target;
}

size_t CDOTAClientMsg_ExecuteOrders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_ExecuteOrders)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTAMsg_UnitOrder orders = 1;
  {
    unsigned int count = this->orders_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orders(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ExecuteOrders::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_ExecuteOrders)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ExecuteOrders* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_ExecuteOrders>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_ExecuteOrders)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_ExecuteOrders)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ExecuteOrders::MergeFrom(const CDOTAClientMsg_ExecuteOrders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_ExecuteOrders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
}

void CDOTAClientMsg_ExecuteOrders::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_ExecuteOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ExecuteOrders::CopyFrom(const CDOTAClientMsg_ExecuteOrders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_ExecuteOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ExecuteOrders::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ExecuteOrders::Swap(CDOTAClientMsg_ExecuteOrders* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ExecuteOrders::InternalSwap(CDOTAClientMsg_ExecuteOrders* other) {
  orders_.InternalSwap(&other->orders_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_ExecuteOrders::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_ExecuteOrders

// repeated .proto.dota.CDOTAMsg_UnitOrder orders = 1;
int CDOTAClientMsg_ExecuteOrders::orders_size() const {
  return orders_.size();
}
void CDOTAClientMsg_ExecuteOrders::clear_orders() {
  orders_.Clear();
}
const ::proto::dota::CDOTAMsg_UnitOrder& CDOTAClientMsg_ExecuteOrders::orders(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_ExecuteOrders.orders)
  return orders_.Get(index);
}
::proto::dota::CDOTAMsg_UnitOrder* CDOTAClientMsg_ExecuteOrders::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAClientMsg_ExecuteOrders.orders)
  return orders_.Mutable(index);
}
::proto::dota::CDOTAMsg_UnitOrder* CDOTAClientMsg_ExecuteOrders::add_orders() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAClientMsg_ExecuteOrders.orders)
  return orders_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMsg_UnitOrder >*
CDOTAClientMsg_ExecuteOrders::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAClientMsg_ExecuteOrders.orders)
  return &orders_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMsg_UnitOrder >&
CDOTAClientMsg_ExecuteOrders::orders() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAClientMsg_ExecuteOrders.orders)
  return orders_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_XPAlert::kTargetEntindexFieldNumber;
const int CDOTAClientMsg_XPAlert::kDamageTakenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_XPAlert::CDOTAClientMsg_XPAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_XPAlert)
}
CDOTAClientMsg_XPAlert::CDOTAClientMsg_XPAlert(const CDOTAClientMsg_XPAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_entindex_, &from.target_entindex_,
    reinterpret_cast<char*>(&damage_taken_) -
    reinterpret_cast<char*>(&target_entindex_) + sizeof(damage_taken_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_XPAlert)
}

void CDOTAClientMsg_XPAlert::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&target_entindex_, 0, reinterpret_cast<char*>(&damage_taken_) -
    reinterpret_cast<char*>(&target_entindex_) + sizeof(damage_taken_));
}

CDOTAClientMsg_XPAlert::~CDOTAClientMsg_XPAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_XPAlert)
  SharedDtor();
}

void CDOTAClientMsg_XPAlert::SharedDtor() {
}

void CDOTAClientMsg_XPAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_XPAlert::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_XPAlert& CDOTAClientMsg_XPAlert::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_XPAlert* CDOTAClientMsg_XPAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_XPAlert* n = new CDOTAClientMsg_XPAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_XPAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_XPAlert)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&target_entindex_, 0, reinterpret_cast<char*>(&damage_taken_) -
      reinterpret_cast<char*>(&target_entindex_) + sizeof(damage_taken_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_XPAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_XPAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 target_entindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_target_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage_taken = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_damage_taken();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_taken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_XPAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_XPAlert)
  return false;
#undef DO_
}

void CDOTAClientMsg_XPAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_XPAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_entindex(), output);
  }

  // optional uint32 damage_taken = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage_taken(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_XPAlert)
}

::google::protobuf::uint8* CDOTAClientMsg_XPAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_XPAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_entindex(), target);
  }

  // optional uint32 damage_taken = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damage_taken(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_XPAlert)
  return target;
}

size_t CDOTAClientMsg_XPAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_XPAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 target_entindex = 1;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

    // optional uint32 damage_taken = 2;
    if (has_damage_taken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_taken());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_XPAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_XPAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_XPAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_XPAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_XPAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_XPAlert)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_XPAlert::MergeFrom(const CDOTAClientMsg_XPAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_XPAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      target_entindex_ = from.target_entindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      damage_taken_ = from.damage_taken_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_XPAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_XPAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_XPAlert::CopyFrom(const CDOTAClientMsg_XPAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_XPAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_XPAlert::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_XPAlert::Swap(CDOTAClientMsg_XPAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_XPAlert::InternalSwap(CDOTAClientMsg_XPAlert* other) {
  std::swap(target_entindex_, other->target_entindex_);
  std::swap(damage_taken_, other->damage_taken_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_XPAlert::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_XPAlert

// optional uint32 target_entindex = 1;
bool CDOTAClientMsg_XPAlert::has_target_entindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_XPAlert::set_has_target_entindex() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_XPAlert::clear_has_target_entindex() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_XPAlert::clear_target_entindex() {
  target_entindex_ = 0u;
  clear_has_target_entindex();
}
::google::protobuf::uint32 CDOTAClientMsg_XPAlert::target_entindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_XPAlert.target_entindex)
  return target_entindex_;
}
void CDOTAClientMsg_XPAlert::set_target_entindex(::google::protobuf::uint32 value) {
  set_has_target_entindex();
  target_entindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_XPAlert.target_entindex)
}

// optional uint32 damage_taken = 2;
bool CDOTAClientMsg_XPAlert::has_damage_taken() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_XPAlert::set_has_damage_taken() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_XPAlert::clear_has_damage_taken() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_XPAlert::clear_damage_taken() {
  damage_taken_ = 0u;
  clear_has_damage_taken();
}
::google::protobuf::uint32 CDOTAClientMsg_XPAlert::damage_taken() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_XPAlert.damage_taken)
  return damage_taken_;
}
void CDOTAClientMsg_XPAlert::set_damage_taken(::google::protobuf::uint32 value) {
  set_has_damage_taken();
  damage_taken_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_XPAlert.damage_taken)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_KillcamDamageTaken::kTargetEntindexFieldNumber;
const int CDOTAClientMsg_KillcamDamageTaken::kDamageTakenFieldNumber;
const int CDOTAClientMsg_KillcamDamageTaken::kItemTypeFieldNumber;
const int CDOTAClientMsg_KillcamDamageTaken::kItemIdFieldNumber;
const int CDOTAClientMsg_KillcamDamageTaken::kHeroNameFieldNumber;
const int CDOTAClientMsg_KillcamDamageTaken::kDamageColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_KillcamDamageTaken::CDOTAClientMsg_KillcamDamageTaken()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
}
CDOTAClientMsg_KillcamDamageTaken::CDOTAClientMsg_KillcamDamageTaken(const CDOTAClientMsg_KillcamDamageTaken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hero_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hero_name()) {
    hero_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_name_);
  }
  damage_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_damage_color()) {
    damage_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.damage_color_);
  }
  ::memcpy(&target_entindex_, &from.target_entindex_,
    reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&target_entindex_) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
}

void CDOTAClientMsg_KillcamDamageTaken::SharedCtor() {
  _cached_size_ = 0;
  hero_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  damage_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&target_entindex_, 0, reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&target_entindex_) + sizeof(item_id_));
}

CDOTAClientMsg_KillcamDamageTaken::~CDOTAClientMsg_KillcamDamageTaken() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  SharedDtor();
}

void CDOTAClientMsg_KillcamDamageTaken::SharedDtor() {
  hero_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  damage_color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_KillcamDamageTaken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_KillcamDamageTaken::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_KillcamDamageTaken& CDOTAClientMsg_KillcamDamageTaken::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_KillcamDamageTaken* CDOTAClientMsg_KillcamDamageTaken::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_KillcamDamageTaken* n = new CDOTAClientMsg_KillcamDamageTaken;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_KillcamDamageTaken::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_hero_name()) {
      GOOGLE_DCHECK(!hero_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hero_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_damage_color()) {
      GOOGLE_DCHECK(!damage_color_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*damage_color_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&target_entindex_, 0, reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&target_entindex_) + sizeof(item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_KillcamDamageTaken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 target_entindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_target_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage_taken = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_damage_taken();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_taken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_item_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hero_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hero_name().data(), this->hero_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAClientMsg_KillcamDamageTaken.hero_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string damage_color = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_damage_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->damage_color().data(), this->damage_color().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAClientMsg_KillcamDamageTaken.damage_color");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  return false;
#undef DO_
}

void CDOTAClientMsg_KillcamDamageTaken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_entindex = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_entindex(), output);
  }

  // optional uint32 damage_taken = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage_taken(), output);
  }

  // optional uint32 item_type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_type(), output);
  }

  // optional uint32 item_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_id(), output);
  }

  // optional string hero_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAClientMsg_KillcamDamageTaken.hero_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->hero_name(), output);
  }

  // optional string damage_color = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->damage_color().data(), this->damage_color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAClientMsg_KillcamDamageTaken.damage_color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->damage_color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
}

::google::protobuf::uint8* CDOTAClientMsg_KillcamDamageTaken::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_entindex = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_entindex(), target);
  }

  // optional uint32 damage_taken = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damage_taken(), target);
  }

  // optional uint32 item_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_type(), target);
  }

  // optional uint32 item_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_id(), target);
  }

  // optional string hero_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAClientMsg_KillcamDamageTaken.hero_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hero_name(), target);
  }

  // optional string damage_color = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->damage_color().data(), this->damage_color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAClientMsg_KillcamDamageTaken.damage_color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->damage_color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  return target;
}

size_t CDOTAClientMsg_KillcamDamageTaken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string hero_name = 5;
    if (has_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }

    // optional string damage_color = 6;
    if (has_damage_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->damage_color());
    }

    // optional uint32 target_entindex = 1;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

    // optional uint32 damage_taken = 2;
    if (has_damage_taken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_taken());
    }

    // optional uint32 item_type = 3;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_type());
    }

    // optional uint32 item_id = 4;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_KillcamDamageTaken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_KillcamDamageTaken* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_KillcamDamageTaken>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_KillcamDamageTaken::MergeFrom(const CDOTAClientMsg_KillcamDamageTaken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hero_name();
      hero_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_damage_color();
      damage_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.damage_color_);
    }
    if (cached_has_bits & 0x00000004u) {
      target_entindex_ = from.target_entindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      damage_taken_ = from.damage_taken_;
    }
    if (cached_has_bits & 0x00000010u) {
      item_type_ = from.item_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_KillcamDamageTaken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_KillcamDamageTaken::CopyFrom(const CDOTAClientMsg_KillcamDamageTaken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_KillcamDamageTaken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_KillcamDamageTaken::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_KillcamDamageTaken::Swap(CDOTAClientMsg_KillcamDamageTaken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_KillcamDamageTaken::InternalSwap(CDOTAClientMsg_KillcamDamageTaken* other) {
  hero_name_.Swap(&other->hero_name_);
  damage_color_.Swap(&other->damage_color_);
  std::swap(target_entindex_, other->target_entindex_);
  std::swap(damage_taken_, other->damage_taken_);
  std::swap(item_type_, other->item_type_);
  std::swap(item_id_, other->item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_KillcamDamageTaken::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_KillcamDamageTaken

// optional uint32 target_entindex = 1;
bool CDOTAClientMsg_KillcamDamageTaken::has_target_entindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAClientMsg_KillcamDamageTaken::set_has_target_entindex() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAClientMsg_KillcamDamageTaken::clear_has_target_entindex() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAClientMsg_KillcamDamageTaken::clear_target_entindex() {
  target_entindex_ = 0u;
  clear_has_target_entindex();
}
::google::protobuf::uint32 CDOTAClientMsg_KillcamDamageTaken::target_entindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_KillcamDamageTaken.target_entindex)
  return target_entindex_;
}
void CDOTAClientMsg_KillcamDamageTaken::set_target_entindex(::google::protobuf::uint32 value) {
  set_has_target_entindex();
  target_entindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_KillcamDamageTaken.target_entindex)
}

// optional uint32 damage_taken = 2;
bool CDOTAClientMsg_KillcamDamageTaken::has_damage_taken() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAClientMsg_KillcamDamageTaken::set_has_damage_taken() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAClientMsg_KillcamDamageTaken::clear_has_damage_taken() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAClientMsg_KillcamDamageTaken::clear_damage_taken() {
  damage_taken_ = 0u;
  clear_has_damage_taken();
}
::google::protobuf::uint32 CDOTAClientMsg_KillcamDamageTaken::damage_taken() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_KillcamDamageTaken.damage_taken)
  return damage_taken_;
}
void CDOTAClientMsg_KillcamDamageTaken::set_damage_taken(::google::protobuf::uint32 value) {
  set_has_damage_taken();
  damage_taken_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_KillcamDamageTaken.damage_taken)
}

// optional uint32 item_type = 3;
bool CDOTAClientMsg_KillcamDamageTaken::has_item_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAClientMsg_KillcamDamageTaken::set_has_item_type() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAClientMsg_KillcamDamageTaken::clear_has_item_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAClientMsg_KillcamDamageTaken::clear_item_type() {
  item_type_ = 0u;
  clear_has_item_type();
}
::google::protobuf::uint32 CDOTAClientMsg_KillcamDamageTaken::item_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_KillcamDamageTaken.item_type)
  return item_type_;
}
void CDOTAClientMsg_KillcamDamageTaken::set_item_type(::google::protobuf::uint32 value) {
  set_has_item_type();
  item_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_KillcamDamageTaken.item_type)
}

// optional uint32 item_id = 4;
bool CDOTAClientMsg_KillcamDamageTaken::has_item_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAClientMsg_KillcamDamageTaken::set_has_item_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAClientMsg_KillcamDamageTaken::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAClientMsg_KillcamDamageTaken::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
::google::protobuf::uint32 CDOTAClientMsg_KillcamDamageTaken::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_KillcamDamageTaken.item_id)
  return item_id_;
}
void CDOTAClientMsg_KillcamDamageTaken::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_KillcamDamageTaken.item_id)
}

// optional string hero_name = 5;
bool CDOTAClientMsg_KillcamDamageTaken::has_hero_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_KillcamDamageTaken::set_has_hero_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_KillcamDamageTaken::clear_has_hero_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_KillcamDamageTaken::clear_hero_name() {
  hero_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hero_name();
}
const ::std::string& CDOTAClientMsg_KillcamDamageTaken::hero_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_KillcamDamageTaken.hero_name)
  return hero_name_.GetNoArena();
}
void CDOTAClientMsg_KillcamDamageTaken::set_hero_name(const ::std::string& value) {
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_KillcamDamageTaken.hero_name)
}
#if LANG_CXX11
void CDOTAClientMsg_KillcamDamageTaken::set_hero_name(::std::string&& value) {
  set_has_hero_name();
  hero_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAClientMsg_KillcamDamageTaken.hero_name)
}
#endif
void CDOTAClientMsg_KillcamDamageTaken::set_hero_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAClientMsg_KillcamDamageTaken.hero_name)
}
void CDOTAClientMsg_KillcamDamageTaken::set_hero_name(const char* value, size_t size) {
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAClientMsg_KillcamDamageTaken.hero_name)
}
::std::string* CDOTAClientMsg_KillcamDamageTaken::mutable_hero_name() {
  set_has_hero_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAClientMsg_KillcamDamageTaken.hero_name)
  return hero_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAClientMsg_KillcamDamageTaken::release_hero_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAClientMsg_KillcamDamageTaken.hero_name)
  clear_has_hero_name();
  return hero_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAClientMsg_KillcamDamageTaken::set_allocated_hero_name(::std::string* hero_name) {
  if (hero_name != NULL) {
    set_has_hero_name();
  } else {
    clear_has_hero_name();
  }
  hero_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hero_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAClientMsg_KillcamDamageTaken.hero_name)
}

// optional string damage_color = 6;
bool CDOTAClientMsg_KillcamDamageTaken::has_damage_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_KillcamDamageTaken::set_has_damage_color() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_KillcamDamageTaken::clear_has_damage_color() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_KillcamDamageTaken::clear_damage_color() {
  damage_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_damage_color();
}
const ::std::string& CDOTAClientMsg_KillcamDamageTaken::damage_color() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_KillcamDamageTaken.damage_color)
  return damage_color_.GetNoArena();
}
void CDOTAClientMsg_KillcamDamageTaken::set_damage_color(const ::std::string& value) {
  set_has_damage_color();
  damage_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_KillcamDamageTaken.damage_color)
}
#if LANG_CXX11
void CDOTAClientMsg_KillcamDamageTaken::set_damage_color(::std::string&& value) {
  set_has_damage_color();
  damage_color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAClientMsg_KillcamDamageTaken.damage_color)
}
#endif
void CDOTAClientMsg_KillcamDamageTaken::set_damage_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_damage_color();
  damage_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAClientMsg_KillcamDamageTaken.damage_color)
}
void CDOTAClientMsg_KillcamDamageTaken::set_damage_color(const char* value, size_t size) {
  set_has_damage_color();
  damage_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAClientMsg_KillcamDamageTaken.damage_color)
}
::std::string* CDOTAClientMsg_KillcamDamageTaken::mutable_damage_color() {
  set_has_damage_color();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAClientMsg_KillcamDamageTaken.damage_color)
  return damage_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAClientMsg_KillcamDamageTaken::release_damage_color() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAClientMsg_KillcamDamageTaken.damage_color)
  clear_has_damage_color();
  return damage_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAClientMsg_KillcamDamageTaken::set_allocated_damage_color(::std::string* damage_color) {
  if (damage_color != NULL) {
    set_has_damage_color();
  } else {
    clear_has_damage_color();
  }
  damage_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), damage_color);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAClientMsg_KillcamDamageTaken.damage_color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_MatchMetadata::kMatchIdFieldNumber;
const int CDOTAClientMsg_MatchMetadata::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_MatchMetadata::CDOTAClientMsg_MatchMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_MatchMetadata)
}
CDOTAClientMsg_MatchMetadata::CDOTAClientMsg_MatchMetadata(const CDOTAClientMsg_MatchMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  match_id_ = from.match_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_MatchMetadata)
}

void CDOTAClientMsg_MatchMetadata::SharedCtor() {
  _cached_size_ = 0;
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_id_ = GOOGLE_ULONGLONG(0);
}

CDOTAClientMsg_MatchMetadata::~CDOTAClientMsg_MatchMetadata() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_MatchMetadata)
  SharedDtor();
}

void CDOTAClientMsg_MatchMetadata::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAClientMsg_MatchMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_MatchMetadata::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_MatchMetadata& CDOTAClientMsg_MatchMetadata::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_MatchMetadata* CDOTAClientMsg_MatchMetadata::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_MatchMetadata* n = new CDOTAClientMsg_MatchMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_MatchMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_MatchMetadata)
  if (has_metadata()) {
    GOOGLE_DCHECK(!metadata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*metadata_.UnsafeRawStringPointer())->clear();
  }
  match_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_MatchMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_MatchMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes metadata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_MatchMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_MatchMetadata)
  return false;
#undef DO_
}

void CDOTAClientMsg_MatchMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_MatchMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional bytes metadata = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_MatchMetadata)
}

::google::protobuf::uint8* CDOTAClientMsg_MatchMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_MatchMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional bytes metadata = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_MatchMetadata)
  return target;
}

size_t CDOTAClientMsg_MatchMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_MatchMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes metadata = 2;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_MatchMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_MatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_MatchMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_MatchMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_MatchMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_MatchMetadata)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MatchMetadata::MergeFrom(const CDOTAClientMsg_MatchMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_MatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_metadata();
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_MatchMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_MatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MatchMetadata::CopyFrom(const CDOTAClientMsg_MatchMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_MatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MatchMetadata::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_MatchMetadata::Swap(CDOTAClientMsg_MatchMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_MatchMetadata::InternalSwap(CDOTAClientMsg_MatchMetadata* other) {
  metadata_.Swap(&other->metadata_);
  std::swap(match_id_, other->match_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_MatchMetadata::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_MatchMetadata

// optional uint64 match_id = 1;
bool CDOTAClientMsg_MatchMetadata::has_match_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_MatchMetadata::set_has_match_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_MatchMetadata::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_MatchMetadata::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CDOTAClientMsg_MatchMetadata::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_MatchMetadata.match_id)
  return match_id_;
}
void CDOTAClientMsg_MatchMetadata::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_MatchMetadata.match_id)
}

// optional bytes metadata = 2;
bool CDOTAClientMsg_MatchMetadata::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_MatchMetadata::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_MatchMetadata::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_MatchMetadata::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
const ::std::string& CDOTAClientMsg_MatchMetadata::metadata() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_MatchMetadata.metadata)
  return metadata_.GetNoArena();
}
void CDOTAClientMsg_MatchMetadata::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_MatchMetadata.metadata)
}
#if LANG_CXX11
void CDOTAClientMsg_MatchMetadata::set_metadata(::std::string&& value) {
  set_has_metadata();
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAClientMsg_MatchMetadata.metadata)
}
#endif
void CDOTAClientMsg_MatchMetadata::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAClientMsg_MatchMetadata.metadata)
}
void CDOTAClientMsg_MatchMetadata::set_metadata(const void* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAClientMsg_MatchMetadata.metadata)
}
::std::string* CDOTAClientMsg_MatchMetadata::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAClientMsg_MatchMetadata.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAClientMsg_MatchMetadata::release_metadata() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAClientMsg_MatchMetadata.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAClientMsg_MatchMetadata::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAClientMsg_MatchMetadata.metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_KillMyHero::CDOTAClientMsg_KillMyHero()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_KillMyHero)
}
CDOTAClientMsg_KillMyHero::CDOTAClientMsg_KillMyHero(const CDOTAClientMsg_KillMyHero& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_KillMyHero)
}

void CDOTAClientMsg_KillMyHero::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAClientMsg_KillMyHero::~CDOTAClientMsg_KillMyHero() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_KillMyHero)
  SharedDtor();
}

void CDOTAClientMsg_KillMyHero::SharedDtor() {
}

void CDOTAClientMsg_KillMyHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_KillMyHero::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_KillMyHero& CDOTAClientMsg_KillMyHero::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_KillMyHero* CDOTAClientMsg_KillMyHero::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_KillMyHero* n = new CDOTAClientMsg_KillMyHero;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_KillMyHero::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_KillMyHero)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_KillMyHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_KillMyHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_KillMyHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_KillMyHero)
  return false;
#undef DO_
}

void CDOTAClientMsg_KillMyHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_KillMyHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_KillMyHero)
}

::google::protobuf::uint8* CDOTAClientMsg_KillMyHero::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_KillMyHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_KillMyHero)
  return target;
}

size_t CDOTAClientMsg_KillMyHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_KillMyHero)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_KillMyHero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_KillMyHero)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_KillMyHero* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_KillMyHero>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_KillMyHero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_KillMyHero)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_KillMyHero::MergeFrom(const CDOTAClientMsg_KillMyHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_KillMyHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAClientMsg_KillMyHero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_KillMyHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_KillMyHero::CopyFrom(const CDOTAClientMsg_KillMyHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_KillMyHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_KillMyHero::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_KillMyHero::Swap(CDOTAClientMsg_KillMyHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_KillMyHero::InternalSwap(CDOTAClientMsg_KillMyHero* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_KillMyHero::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_KillMyHero

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_QuestStatus::kQuestIdFieldNumber;
const int CDOTAClientMsg_QuestStatus::kChallengeIdFieldNumber;
const int CDOTAClientMsg_QuestStatus::kProgressFieldNumber;
const int CDOTAClientMsg_QuestStatus::kGoalFieldNumber;
const int CDOTAClientMsg_QuestStatus::kQueryFieldNumber;
const int CDOTAClientMsg_QuestStatus::kFailGametimeFieldNumber;
const int CDOTAClientMsg_QuestStatus::kItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_QuestStatus::CDOTAClientMsg_QuestStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_QuestStatus)
}
CDOTAClientMsg_QuestStatus::CDOTAClientMsg_QuestStatus(const CDOTAClientMsg_QuestStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&quest_id_, &from.quest_id_,
    reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&quest_id_) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_QuestStatus)
}

void CDOTAClientMsg_QuestStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&quest_id_, 0, reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&quest_id_) + sizeof(item_id_));
}

CDOTAClientMsg_QuestStatus::~CDOTAClientMsg_QuestStatus() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_QuestStatus)
  SharedDtor();
}

void CDOTAClientMsg_QuestStatus::SharedDtor() {
}

void CDOTAClientMsg_QuestStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_QuestStatus::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_QuestStatus& CDOTAClientMsg_QuestStatus::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_QuestStatus* CDOTAClientMsg_QuestStatus::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_QuestStatus* n = new CDOTAClientMsg_QuestStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_QuestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_QuestStatus)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&quest_id_, 0, reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&quest_id_) + sizeof(item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_QuestStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_QuestStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 quest_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_quest_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 challenge_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_challenge_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 progress = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_progress();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 goal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_goal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 query = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_query();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fail_gametime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_fail_gametime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fail_gametime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_QuestStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_QuestStatus)
  return false;
#undef DO_
}

void CDOTAClientMsg_QuestStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_QuestStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 quest_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quest_id(), output);
  }

  // optional uint32 challenge_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->challenge_id(), output);
  }

  // optional uint32 progress = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->progress(), output);
  }

  // optional uint32 goal = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->goal(), output);
  }

  // optional uint32 query = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->query(), output);
  }

  // optional float fail_gametime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->fail_gametime(), output);
  }

  // optional uint32 item_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_QuestStatus)
}

::google::protobuf::uint8* CDOTAClientMsg_QuestStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_QuestStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 quest_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quest_id(), target);
  }

  // optional uint32 challenge_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->challenge_id(), target);
  }

  // optional uint32 progress = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->progress(), target);
  }

  // optional uint32 goal = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->goal(), target);
  }

  // optional uint32 query = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->query(), target);
  }

  // optional float fail_gametime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->fail_gametime(), target);
  }

  // optional uint32 item_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_QuestStatus)
  return target;
}

size_t CDOTAClientMsg_QuestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_QuestStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_id());
    }

    // optional uint32 challenge_id = 2;
    if (has_challenge_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_id());
    }

    // optional uint32 progress = 3;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

    // optional uint32 goal = 4;
    if (has_goal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goal());
    }

    // optional uint32 query = 5;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query());
    }

    // optional float fail_gametime = 6;
    if (has_fail_gametime()) {
      total_size += 1 + 4;
    }

    // optional uint32 item_id = 7;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_QuestStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_QuestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_QuestStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_QuestStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_QuestStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_QuestStatus)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_QuestStatus::MergeFrom(const CDOTAClientMsg_QuestStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_QuestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      quest_id_ = from.quest_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      challenge_id_ = from.challenge_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      progress_ = from.progress_;
    }
    if (cached_has_bits & 0x00000008u) {
      goal_ = from.goal_;
    }
    if (cached_has_bits & 0x00000010u) {
      query_ = from.query_;
    }
    if (cached_has_bits & 0x00000020u) {
      fail_gametime_ = from.fail_gametime_;
    }
    if (cached_has_bits & 0x00000040u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_QuestStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_QuestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_QuestStatus::CopyFrom(const CDOTAClientMsg_QuestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_QuestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_QuestStatus::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_QuestStatus::Swap(CDOTAClientMsg_QuestStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_QuestStatus::InternalSwap(CDOTAClientMsg_QuestStatus* other) {
  std::swap(quest_id_, other->quest_id_);
  std::swap(challenge_id_, other->challenge_id_);
  std::swap(progress_, other->progress_);
  std::swap(goal_, other->goal_);
  std::swap(query_, other->query_);
  std::swap(fail_gametime_, other->fail_gametime_);
  std::swap(item_id_, other->item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_QuestStatus::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_QuestStatus

// optional uint32 quest_id = 1;
bool CDOTAClientMsg_QuestStatus::has_quest_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_QuestStatus::set_has_quest_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_QuestStatus::clear_has_quest_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_QuestStatus::clear_quest_id() {
  quest_id_ = 0u;
  clear_has_quest_id();
}
::google::protobuf::uint32 CDOTAClientMsg_QuestStatus::quest_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_QuestStatus.quest_id)
  return quest_id_;
}
void CDOTAClientMsg_QuestStatus::set_quest_id(::google::protobuf::uint32 value) {
  set_has_quest_id();
  quest_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_QuestStatus.quest_id)
}

// optional uint32 challenge_id = 2;
bool CDOTAClientMsg_QuestStatus::has_challenge_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_QuestStatus::set_has_challenge_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_QuestStatus::clear_has_challenge_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_QuestStatus::clear_challenge_id() {
  challenge_id_ = 0u;
  clear_has_challenge_id();
}
::google::protobuf::uint32 CDOTAClientMsg_QuestStatus::challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_QuestStatus.challenge_id)
  return challenge_id_;
}
void CDOTAClientMsg_QuestStatus::set_challenge_id(::google::protobuf::uint32 value) {
  set_has_challenge_id();
  challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_QuestStatus.challenge_id)
}

// optional uint32 progress = 3;
bool CDOTAClientMsg_QuestStatus::has_progress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAClientMsg_QuestStatus::set_has_progress() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAClientMsg_QuestStatus::clear_has_progress() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAClientMsg_QuestStatus::clear_progress() {
  progress_ = 0u;
  clear_has_progress();
}
::google::protobuf::uint32 CDOTAClientMsg_QuestStatus::progress() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_QuestStatus.progress)
  return progress_;
}
void CDOTAClientMsg_QuestStatus::set_progress(::google::protobuf::uint32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_QuestStatus.progress)
}

// optional uint32 goal = 4;
bool CDOTAClientMsg_QuestStatus::has_goal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAClientMsg_QuestStatus::set_has_goal() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAClientMsg_QuestStatus::clear_has_goal() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAClientMsg_QuestStatus::clear_goal() {
  goal_ = 0u;
  clear_has_goal();
}
::google::protobuf::uint32 CDOTAClientMsg_QuestStatus::goal() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_QuestStatus.goal)
  return goal_;
}
void CDOTAClientMsg_QuestStatus::set_goal(::google::protobuf::uint32 value) {
  set_has_goal();
  goal_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_QuestStatus.goal)
}

// optional uint32 query = 5;
bool CDOTAClientMsg_QuestStatus::has_query() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAClientMsg_QuestStatus::set_has_query() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAClientMsg_QuestStatus::clear_has_query() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAClientMsg_QuestStatus::clear_query() {
  query_ = 0u;
  clear_has_query();
}
::google::protobuf::uint32 CDOTAClientMsg_QuestStatus::query() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_QuestStatus.query)
  return query_;
}
void CDOTAClientMsg_QuestStatus::set_query(::google::protobuf::uint32 value) {
  set_has_query();
  query_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_QuestStatus.query)
}

// optional float fail_gametime = 6;
bool CDOTAClientMsg_QuestStatus::has_fail_gametime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAClientMsg_QuestStatus::set_has_fail_gametime() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAClientMsg_QuestStatus::clear_has_fail_gametime() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAClientMsg_QuestStatus::clear_fail_gametime() {
  fail_gametime_ = 0;
  clear_has_fail_gametime();
}
float CDOTAClientMsg_QuestStatus::fail_gametime() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_QuestStatus.fail_gametime)
  return fail_gametime_;
}
void CDOTAClientMsg_QuestStatus::set_fail_gametime(float value) {
  set_has_fail_gametime();
  fail_gametime_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_QuestStatus.fail_gametime)
}

// optional uint32 item_id = 7;
bool CDOTAClientMsg_QuestStatus::has_item_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDOTAClientMsg_QuestStatus::set_has_item_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CDOTAClientMsg_QuestStatus::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDOTAClientMsg_QuestStatus::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
::google::protobuf::uint32 CDOTAClientMsg_QuestStatus::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_QuestStatus.item_id)
  return item_id_;
}
void CDOTAClientMsg_QuestStatus::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_QuestStatus.item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_ToggleAutoattack::kModeFieldNumber;
const int CDOTAClientMsg_ToggleAutoattack::kShowMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_ToggleAutoattack::CDOTAClientMsg_ToggleAutoattack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_ToggleAutoattack)
}
CDOTAClientMsg_ToggleAutoattack::CDOTAClientMsg_ToggleAutoattack(const CDOTAClientMsg_ToggleAutoattack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    reinterpret_cast<char*>(&show_message_) -
    reinterpret_cast<char*>(&mode_) + sizeof(show_message_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_ToggleAutoattack)
}

void CDOTAClientMsg_ToggleAutoattack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&mode_, 0, reinterpret_cast<char*>(&show_message_) -
    reinterpret_cast<char*>(&mode_) + sizeof(show_message_));
}

CDOTAClientMsg_ToggleAutoattack::~CDOTAClientMsg_ToggleAutoattack() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  SharedDtor();
}

void CDOTAClientMsg_ToggleAutoattack::SharedDtor() {
}

void CDOTAClientMsg_ToggleAutoattack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_ToggleAutoattack::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_ToggleAutoattack& CDOTAClientMsg_ToggleAutoattack::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_ToggleAutoattack* CDOTAClientMsg_ToggleAutoattack::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_ToggleAutoattack* n = new CDOTAClientMsg_ToggleAutoattack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_ToggleAutoattack::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&mode_, 0, reinterpret_cast<char*>(&show_message_) -
      reinterpret_cast<char*>(&mode_) + sizeof(show_message_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_ToggleAutoattack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_show_message();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_message_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  return false;
#undef DO_
}

void CDOTAClientMsg_ToggleAutoattack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mode(), output);
  }

  // optional bool show_message = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_ToggleAutoattack)
}

::google::protobuf::uint8* CDOTAClientMsg_ToggleAutoattack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mode(), target);
  }

  // optional bool show_message = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  return target;
}

size_t CDOTAClientMsg_ToggleAutoattack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional bool show_message = 2;
    if (has_show_message()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_ToggleAutoattack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_ToggleAutoattack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_ToggleAutoattack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_ToggleAutoattack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_ToggleAutoattack)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_ToggleAutoattack::MergeFrom(const CDOTAClientMsg_ToggleAutoattack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      show_message_ = from.show_message_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_ToggleAutoattack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_ToggleAutoattack::CopyFrom(const CDOTAClientMsg_ToggleAutoattack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_ToggleAutoattack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_ToggleAutoattack::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_ToggleAutoattack::Swap(CDOTAClientMsg_ToggleAutoattack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_ToggleAutoattack::InternalSwap(CDOTAClientMsg_ToggleAutoattack* other) {
  std::swap(mode_, other->mode_);
  std::swap(show_message_, other->show_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_ToggleAutoattack::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_ToggleAutoattack

// optional int32 mode = 1;
bool CDOTAClientMsg_ToggleAutoattack::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_ToggleAutoattack::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_ToggleAutoattack::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_ToggleAutoattack::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
::google::protobuf::int32 CDOTAClientMsg_ToggleAutoattack::mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_ToggleAutoattack.mode)
  return mode_;
}
void CDOTAClientMsg_ToggleAutoattack::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_ToggleAutoattack.mode)
}

// optional bool show_message = 2;
bool CDOTAClientMsg_ToggleAutoattack::has_show_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_ToggleAutoattack::set_has_show_message() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_ToggleAutoattack::clear_has_show_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_ToggleAutoattack::clear_show_message() {
  show_message_ = false;
  clear_has_show_message();
}
bool CDOTAClientMsg_ToggleAutoattack::show_message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_ToggleAutoattack.show_message)
  return show_message_;
}
void CDOTAClientMsg_ToggleAutoattack::set_show_message(bool value) {
  set_has_show_message();
  show_message_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_ToggleAutoattack.show_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_SpecialAbility::kAbilityIndexFieldNumber;
const int CDOTAClientMsg_SpecialAbility::kTargetEntindexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_SpecialAbility::CDOTAClientMsg_SpecialAbility()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_SpecialAbility)
}
CDOTAClientMsg_SpecialAbility::CDOTAClientMsg_SpecialAbility(const CDOTAClientMsg_SpecialAbility& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ability_index_, &from.ability_index_,
    reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&ability_index_) + sizeof(target_entindex_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_SpecialAbility)
}

void CDOTAClientMsg_SpecialAbility::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ability_index_, 0, reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&ability_index_) + sizeof(target_entindex_));
}

CDOTAClientMsg_SpecialAbility::~CDOTAClientMsg_SpecialAbility() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_SpecialAbility)
  SharedDtor();
}

void CDOTAClientMsg_SpecialAbility::SharedDtor() {
}

void CDOTAClientMsg_SpecialAbility::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SpecialAbility::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_SpecialAbility& CDOTAClientMsg_SpecialAbility::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_SpecialAbility* CDOTAClientMsg_SpecialAbility::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_SpecialAbility* n = new CDOTAClientMsg_SpecialAbility;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_SpecialAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_SpecialAbility)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ability_index_, 0, reinterpret_cast<char*>(&target_entindex_) -
      reinterpret_cast<char*>(&ability_index_) + sizeof(target_entindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_SpecialAbility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_SpecialAbility)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ability_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_entindex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_target_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_SpecialAbility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_SpecialAbility)
  return false;
#undef DO_
}

void CDOTAClientMsg_SpecialAbility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_SpecialAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability_index(), output);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_entindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_SpecialAbility)
}

::google::protobuf::uint8* CDOTAClientMsg_SpecialAbility::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_SpecialAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability_index(), target);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_entindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_SpecialAbility)
  return target;
}

size_t CDOTAClientMsg_SpecialAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_SpecialAbility)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 ability_index = 1;
    if (has_ability_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_index());
    }

    // optional uint32 target_entindex = 2;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SpecialAbility::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_SpecialAbility)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SpecialAbility* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_SpecialAbility>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_SpecialAbility)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_SpecialAbility)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SpecialAbility::MergeFrom(const CDOTAClientMsg_SpecialAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_SpecialAbility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ability_index_ = from.ability_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_entindex_ = from.target_entindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_SpecialAbility::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_SpecialAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SpecialAbility::CopyFrom(const CDOTAClientMsg_SpecialAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_SpecialAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SpecialAbility::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SpecialAbility::Swap(CDOTAClientMsg_SpecialAbility* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SpecialAbility::InternalSwap(CDOTAClientMsg_SpecialAbility* other) {
  std::swap(ability_index_, other->ability_index_);
  std::swap(target_entindex_, other->target_entindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_SpecialAbility::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_SpecialAbility

// optional uint32 ability_index = 1;
bool CDOTAClientMsg_SpecialAbility::has_ability_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_SpecialAbility::set_has_ability_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_SpecialAbility::clear_has_ability_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_SpecialAbility::clear_ability_index() {
  ability_index_ = 0u;
  clear_has_ability_index();
}
::google::protobuf::uint32 CDOTAClientMsg_SpecialAbility::ability_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_SpecialAbility.ability_index)
  return ability_index_;
}
void CDOTAClientMsg_SpecialAbility::set_ability_index(::google::protobuf::uint32 value) {
  set_has_ability_index();
  ability_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_SpecialAbility.ability_index)
}

// optional uint32 target_entindex = 2;
bool CDOTAClientMsg_SpecialAbility::has_target_entindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_SpecialAbility::set_has_target_entindex() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_SpecialAbility::clear_has_target_entindex() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_SpecialAbility::clear_target_entindex() {
  target_entindex_ = 0u;
  clear_has_target_entindex();
}
::google::protobuf::uint32 CDOTAClientMsg_SpecialAbility::target_entindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_SpecialAbility.target_entindex)
  return target_entindex_;
}
void CDOTAClientMsg_SpecialAbility::set_target_entindex(::google::protobuf::uint32 value) {
  set_has_target_entindex();
  target_entindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_SpecialAbility.target_entindex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_SetEnemyStartingPosition::kEnemyPlayerIdFieldNumber;
const int CDOTAClientMsg_SetEnemyStartingPosition::kEnemyStartingPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_SetEnemyStartingPosition::CDOTAClientMsg_SetEnemyStartingPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
}
CDOTAClientMsg_SetEnemyStartingPosition::CDOTAClientMsg_SetEnemyStartingPosition(const CDOTAClientMsg_SetEnemyStartingPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enemy_player_id_, &from.enemy_player_id_,
    reinterpret_cast<char*>(&enemy_starting_position_) -
    reinterpret_cast<char*>(&enemy_player_id_) + sizeof(enemy_starting_position_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
}

void CDOTAClientMsg_SetEnemyStartingPosition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&enemy_player_id_, 0, reinterpret_cast<char*>(&enemy_starting_position_) -
    reinterpret_cast<char*>(&enemy_player_id_) + sizeof(enemy_starting_position_));
}

CDOTAClientMsg_SetEnemyStartingPosition::~CDOTAClientMsg_SetEnemyStartingPosition() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  SharedDtor();
}

void CDOTAClientMsg_SetEnemyStartingPosition::SharedDtor() {
}

void CDOTAClientMsg_SetEnemyStartingPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SetEnemyStartingPosition::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_SetEnemyStartingPosition& CDOTAClientMsg_SetEnemyStartingPosition::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_SetEnemyStartingPosition* CDOTAClientMsg_SetEnemyStartingPosition::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_SetEnemyStartingPosition* n = new CDOTAClientMsg_SetEnemyStartingPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_SetEnemyStartingPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&enemy_player_id_, 0, reinterpret_cast<char*>(&enemy_starting_position_) -
      reinterpret_cast<char*>(&enemy_player_id_) + sizeof(enemy_starting_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_SetEnemyStartingPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 enemy_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enemy_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemy_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 enemy_starting_position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_enemy_starting_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemy_starting_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  return false;
#undef DO_
}

void CDOTAClientMsg_SetEnemyStartingPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 enemy_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemy_player_id(), output);
  }

  // optional uint32 enemy_starting_position = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->enemy_starting_position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
}

::google::protobuf::uint8* CDOTAClientMsg_SetEnemyStartingPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 enemy_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemy_player_id(), target);
  }

  // optional uint32 enemy_starting_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->enemy_starting_position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  return target;
}

size_t CDOTAClientMsg_SetEnemyStartingPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 enemy_player_id = 1;
    if (has_enemy_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemy_player_id());
    }

    // optional uint32 enemy_starting_position = 2;
    if (has_enemy_starting_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemy_starting_position());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SetEnemyStartingPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SetEnemyStartingPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_SetEnemyStartingPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SetEnemyStartingPosition::MergeFrom(const CDOTAClientMsg_SetEnemyStartingPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      enemy_player_id_ = from.enemy_player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      enemy_starting_position_ = from.enemy_starting_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_SetEnemyStartingPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SetEnemyStartingPosition::CopyFrom(const CDOTAClientMsg_SetEnemyStartingPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SetEnemyStartingPosition::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SetEnemyStartingPosition::Swap(CDOTAClientMsg_SetEnemyStartingPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SetEnemyStartingPosition::InternalSwap(CDOTAClientMsg_SetEnemyStartingPosition* other) {
  std::swap(enemy_player_id_, other->enemy_player_id_);
  std::swap(enemy_starting_position_, other->enemy_starting_position_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_SetEnemyStartingPosition::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_SetEnemyStartingPosition

// optional uint32 enemy_player_id = 1;
bool CDOTAClientMsg_SetEnemyStartingPosition::has_enemy_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_SetEnemyStartingPosition::set_has_enemy_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_SetEnemyStartingPosition::clear_has_enemy_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_SetEnemyStartingPosition::clear_enemy_player_id() {
  enemy_player_id_ = 0u;
  clear_has_enemy_player_id();
}
::google::protobuf::uint32 CDOTAClientMsg_SetEnemyStartingPosition::enemy_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition.enemy_player_id)
  return enemy_player_id_;
}
void CDOTAClientMsg_SetEnemyStartingPosition::set_enemy_player_id(::google::protobuf::uint32 value) {
  set_has_enemy_player_id();
  enemy_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition.enemy_player_id)
}

// optional uint32 enemy_starting_position = 2;
bool CDOTAClientMsg_SetEnemyStartingPosition::has_enemy_starting_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_SetEnemyStartingPosition::set_has_enemy_starting_position() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_SetEnemyStartingPosition::clear_has_enemy_starting_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_SetEnemyStartingPosition::clear_enemy_starting_position() {
  enemy_starting_position_ = 0u;
  clear_has_enemy_starting_position();
}
::google::protobuf::uint32 CDOTAClientMsg_SetEnemyStartingPosition::enemy_starting_position() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition.enemy_starting_position)
  return enemy_starting_position_;
}
void CDOTAClientMsg_SetEnemyStartingPosition::set_enemy_starting_position(::google::protobuf::uint32 value) {
  set_has_enemy_starting_position();
  enemy_starting_position_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_SetEnemyStartingPosition.enemy_starting_position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_SetDesiredWardPlacement::kWardIndexFieldNumber;
const int CDOTAClientMsg_SetDesiredWardPlacement::kWardXFieldNumber;
const int CDOTAClientMsg_SetDesiredWardPlacement::kWardYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_SetDesiredWardPlacement::CDOTAClientMsg_SetDesiredWardPlacement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
}
CDOTAClientMsg_SetDesiredWardPlacement::CDOTAClientMsg_SetDesiredWardPlacement(const CDOTAClientMsg_SetDesiredWardPlacement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ward_index_, &from.ward_index_,
    reinterpret_cast<char*>(&ward_y_) -
    reinterpret_cast<char*>(&ward_index_) + sizeof(ward_y_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
}

void CDOTAClientMsg_SetDesiredWardPlacement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ward_index_, 0, reinterpret_cast<char*>(&ward_y_) -
    reinterpret_cast<char*>(&ward_index_) + sizeof(ward_y_));
}

CDOTAClientMsg_SetDesiredWardPlacement::~CDOTAClientMsg_SetDesiredWardPlacement() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  SharedDtor();
}

void CDOTAClientMsg_SetDesiredWardPlacement::SharedDtor() {
}

void CDOTAClientMsg_SetDesiredWardPlacement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_SetDesiredWardPlacement::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_SetDesiredWardPlacement& CDOTAClientMsg_SetDesiredWardPlacement::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_SetDesiredWardPlacement* CDOTAClientMsg_SetDesiredWardPlacement::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_SetDesiredWardPlacement* n = new CDOTAClientMsg_SetDesiredWardPlacement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_SetDesiredWardPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&ward_index_, 0, reinterpret_cast<char*>(&ward_y_) -
      reinterpret_cast<char*>(&ward_index_) + sizeof(ward_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_SetDesiredWardPlacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ward_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ward_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ward_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ward_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_ward_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ward_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ward_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_ward_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ward_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  return false;
#undef DO_
}

void CDOTAClientMsg_SetDesiredWardPlacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ward_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ward_index(), output);
  }

  // optional float ward_x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ward_x(), output);
  }

  // optional float ward_y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ward_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
}

::google::protobuf::uint8* CDOTAClientMsg_SetDesiredWardPlacement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ward_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ward_index(), target);
  }

  // optional float ward_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ward_x(), target);
  }

  // optional float ward_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->ward_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  return target;
}

size_t CDOTAClientMsg_SetDesiredWardPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 ward_index = 1;
    if (has_ward_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ward_index());
    }

    // optional float ward_x = 2;
    if (has_ward_x()) {
      total_size += 1 + 4;
    }

    // optional float ward_y = 3;
    if (has_ward_y()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_SetDesiredWardPlacement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_SetDesiredWardPlacement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_SetDesiredWardPlacement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_SetDesiredWardPlacement::MergeFrom(const CDOTAClientMsg_SetDesiredWardPlacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ward_index_ = from.ward_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      ward_x_ = from.ward_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      ward_y_ = from.ward_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_SetDesiredWardPlacement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_SetDesiredWardPlacement::CopyFrom(const CDOTAClientMsg_SetDesiredWardPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_SetDesiredWardPlacement::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_SetDesiredWardPlacement::Swap(CDOTAClientMsg_SetDesiredWardPlacement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_SetDesiredWardPlacement::InternalSwap(CDOTAClientMsg_SetDesiredWardPlacement* other) {
  std::swap(ward_index_, other->ward_index_);
  std::swap(ward_x_, other->ward_x_);
  std::swap(ward_y_, other->ward_y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_SetDesiredWardPlacement::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_SetDesiredWardPlacement

// optional uint32 ward_index = 1;
bool CDOTAClientMsg_SetDesiredWardPlacement::has_ward_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_SetDesiredWardPlacement::set_has_ward_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_SetDesiredWardPlacement::clear_has_ward_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_SetDesiredWardPlacement::clear_ward_index() {
  ward_index_ = 0u;
  clear_has_ward_index();
}
::google::protobuf::uint32 CDOTAClientMsg_SetDesiredWardPlacement::ward_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement.ward_index)
  return ward_index_;
}
void CDOTAClientMsg_SetDesiredWardPlacement::set_ward_index(::google::protobuf::uint32 value) {
  set_has_ward_index();
  ward_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement.ward_index)
}

// optional float ward_x = 2;
bool CDOTAClientMsg_SetDesiredWardPlacement::has_ward_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_SetDesiredWardPlacement::set_has_ward_x() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_SetDesiredWardPlacement::clear_has_ward_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_SetDesiredWardPlacement::clear_ward_x() {
  ward_x_ = 0;
  clear_has_ward_x();
}
float CDOTAClientMsg_SetDesiredWardPlacement::ward_x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement.ward_x)
  return ward_x_;
}
void CDOTAClientMsg_SetDesiredWardPlacement::set_ward_x(float value) {
  set_has_ward_x();
  ward_x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement.ward_x)
}

// optional float ward_y = 3;
bool CDOTAClientMsg_SetDesiredWardPlacement::has_ward_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAClientMsg_SetDesiredWardPlacement::set_has_ward_y() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAClientMsg_SetDesiredWardPlacement::clear_has_ward_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAClientMsg_SetDesiredWardPlacement::clear_ward_y() {
  ward_y_ = 0;
  clear_has_ward_y();
}
float CDOTAClientMsg_SetDesiredWardPlacement::ward_y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement.ward_y)
  return ward_y_;
}
void CDOTAClientMsg_SetDesiredWardPlacement::set_ward_y(float value) {
  set_has_ward_y();
  ward_y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_SetDesiredWardPlacement.ward_y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_RollDice::kChannelTypeFieldNumber;
const int CDOTAClientMsg_RollDice::kRollMinFieldNumber;
const int CDOTAClientMsg_RollDice::kRollMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_RollDice::CDOTAClientMsg_RollDice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_RollDice)
}
CDOTAClientMsg_RollDice::CDOTAClientMsg_RollDice(const CDOTAClientMsg_RollDice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_type_, &from.channel_type_,
    reinterpret_cast<char*>(&roll_max_) -
    reinterpret_cast<char*>(&channel_type_) + sizeof(roll_max_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_RollDice)
}

void CDOTAClientMsg_RollDice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&channel_type_, 0, reinterpret_cast<char*>(&roll_max_) -
    reinterpret_cast<char*>(&channel_type_) + sizeof(roll_max_));
}

CDOTAClientMsg_RollDice::~CDOTAClientMsg_RollDice() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_RollDice)
  SharedDtor();
}

void CDOTAClientMsg_RollDice::SharedDtor() {
}

void CDOTAClientMsg_RollDice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_RollDice::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_RollDice& CDOTAClientMsg_RollDice::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_RollDice* CDOTAClientMsg_RollDice::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_RollDice* n = new CDOTAClientMsg_RollDice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_RollDice::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_RollDice)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&channel_type_, 0, reinterpret_cast<char*>(&roll_max_) -
      reinterpret_cast<char*>(&channel_type_) + sizeof(roll_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_RollDice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_RollDice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_channel_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 roll_min = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roll_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roll_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 roll_max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roll_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roll_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_RollDice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_RollDice)
  return false;
#undef DO_
}

void CDOTAClientMsg_RollDice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_RollDice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_type(), output);
  }

  // optional uint32 roll_min = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roll_min(), output);
  }

  // optional uint32 roll_max = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roll_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_RollDice)
}

::google::protobuf::uint8* CDOTAClientMsg_RollDice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_RollDice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_type(), target);
  }

  // optional uint32 roll_min = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roll_min(), target);
  }

  // optional uint32 roll_max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->roll_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_RollDice)
  return target;
}

size_t CDOTAClientMsg_RollDice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_RollDice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 channel_type = 1;
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_type());
    }

    // optional uint32 roll_min = 2;
    if (has_roll_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roll_min());
    }

    // optional uint32 roll_max = 3;
    if (has_roll_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roll_max());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_RollDice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_RollDice)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_RollDice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_RollDice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_RollDice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_RollDice)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RollDice::MergeFrom(const CDOTAClientMsg_RollDice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_RollDice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      channel_type_ = from.channel_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      roll_min_ = from.roll_min_;
    }
    if (cached_has_bits & 0x00000004u) {
      roll_max_ = from.roll_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientMsg_RollDice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_RollDice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RollDice::CopyFrom(const CDOTAClientMsg_RollDice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_RollDice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RollDice::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RollDice::Swap(CDOTAClientMsg_RollDice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_RollDice::InternalSwap(CDOTAClientMsg_RollDice* other) {
  std::swap(channel_type_, other->channel_type_);
  std::swap(roll_min_, other->roll_min_);
  std::swap(roll_max_, other->roll_max_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_RollDice::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_RollDice

// optional uint32 channel_type = 1;
bool CDOTAClientMsg_RollDice::has_channel_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_RollDice::set_has_channel_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_RollDice::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_RollDice::clear_channel_type() {
  channel_type_ = 0u;
  clear_has_channel_type();
}
::google::protobuf::uint32 CDOTAClientMsg_RollDice::channel_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_RollDice.channel_type)
  return channel_type_;
}
void CDOTAClientMsg_RollDice::set_channel_type(::google::protobuf::uint32 value) {
  set_has_channel_type();
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_RollDice.channel_type)
}

// optional uint32 roll_min = 2;
bool CDOTAClientMsg_RollDice::has_roll_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientMsg_RollDice::set_has_roll_min() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientMsg_RollDice::clear_has_roll_min() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientMsg_RollDice::clear_roll_min() {
  roll_min_ = 0u;
  clear_has_roll_min();
}
::google::protobuf::uint32 CDOTAClientMsg_RollDice::roll_min() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_RollDice.roll_min)
  return roll_min_;
}
void CDOTAClientMsg_RollDice::set_roll_min(::google::protobuf::uint32 value) {
  set_has_roll_min();
  roll_min_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_RollDice.roll_min)
}

// optional uint32 roll_max = 3;
bool CDOTAClientMsg_RollDice::has_roll_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAClientMsg_RollDice::set_has_roll_max() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAClientMsg_RollDice::clear_has_roll_max() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAClientMsg_RollDice::clear_roll_max() {
  roll_max_ = 0u;
  clear_has_roll_max();
}
::google::protobuf::uint32 CDOTAClientMsg_RollDice::roll_max() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_RollDice.roll_max)
  return roll_max_;
}
void CDOTAClientMsg_RollDice::set_roll_max(::google::protobuf::uint32 value) {
  set_has_roll_max();
  roll_max_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_RollDice.roll_max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_FlipCoin::kChannelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_FlipCoin::CDOTAClientMsg_FlipCoin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_FlipCoin)
}
CDOTAClientMsg_FlipCoin::CDOTAClientMsg_FlipCoin(const CDOTAClientMsg_FlipCoin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_type_ = from.channel_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_FlipCoin)
}

void CDOTAClientMsg_FlipCoin::SharedCtor() {
  _cached_size_ = 0;
  channel_type_ = 0u;
}

CDOTAClientMsg_FlipCoin::~CDOTAClientMsg_FlipCoin() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_FlipCoin)
  SharedDtor();
}

void CDOTAClientMsg_FlipCoin::SharedDtor() {
}

void CDOTAClientMsg_FlipCoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_FlipCoin::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_FlipCoin& CDOTAClientMsg_FlipCoin::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_FlipCoin* CDOTAClientMsg_FlipCoin::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_FlipCoin* n = new CDOTAClientMsg_FlipCoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_FlipCoin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_FlipCoin)
  channel_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_FlipCoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_FlipCoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_channel_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_FlipCoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_FlipCoin)
  return false;
#undef DO_
}

void CDOTAClientMsg_FlipCoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_FlipCoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_FlipCoin)
}

::google::protobuf::uint8* CDOTAClientMsg_FlipCoin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_FlipCoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_FlipCoin)
  return target;
}

size_t CDOTAClientMsg_FlipCoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_FlipCoin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 channel_type = 1;
  if (has_channel_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_FlipCoin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_FlipCoin)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_FlipCoin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_FlipCoin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_FlipCoin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_FlipCoin)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_FlipCoin::MergeFrom(const CDOTAClientMsg_FlipCoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_FlipCoin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel_type()) {
    set_channel_type(from.channel_type());
  }
}

void CDOTAClientMsg_FlipCoin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_FlipCoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_FlipCoin::CopyFrom(const CDOTAClientMsg_FlipCoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_FlipCoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_FlipCoin::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_FlipCoin::Swap(CDOTAClientMsg_FlipCoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_FlipCoin::InternalSwap(CDOTAClientMsg_FlipCoin* other) {
  std::swap(channel_type_, other->channel_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_FlipCoin::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_FlipCoin

// optional uint32 channel_type = 1;
bool CDOTAClientMsg_FlipCoin::has_channel_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_FlipCoin::set_has_channel_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_FlipCoin::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_FlipCoin::clear_channel_type() {
  channel_type_ = 0u;
  clear_has_channel_type();
}
::google::protobuf::uint32 CDOTAClientMsg_FlipCoin::channel_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_FlipCoin.channel_type)
  return channel_type_;
}
void CDOTAClientMsg_FlipCoin::set_channel_type(::google::protobuf::uint32 value) {
  set_has_channel_type();
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_FlipCoin.channel_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_RequestItemSuggestions::CDOTAClientMsg_RequestItemSuggestions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
}
CDOTAClientMsg_RequestItemSuggestions::CDOTAClientMsg_RequestItemSuggestions(const CDOTAClientMsg_RequestItemSuggestions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
}

void CDOTAClientMsg_RequestItemSuggestions::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAClientMsg_RequestItemSuggestions::~CDOTAClientMsg_RequestItemSuggestions() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  SharedDtor();
}

void CDOTAClientMsg_RequestItemSuggestions::SharedDtor() {
}

void CDOTAClientMsg_RequestItemSuggestions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_RequestItemSuggestions::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_RequestItemSuggestions& CDOTAClientMsg_RequestItemSuggestions::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_RequestItemSuggestions* CDOTAClientMsg_RequestItemSuggestions::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_RequestItemSuggestions* n = new CDOTAClientMsg_RequestItemSuggestions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_RequestItemSuggestions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_RequestItemSuggestions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  return false;
#undef DO_
}

void CDOTAClientMsg_RequestItemSuggestions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
}

::google::protobuf::uint8* CDOTAClientMsg_RequestItemSuggestions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  return target;
}

size_t CDOTAClientMsg_RequestItemSuggestions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_RequestItemSuggestions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_RequestItemSuggestions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_RequestItemSuggestions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_RequestItemSuggestions::MergeFrom(const CDOTAClientMsg_RequestItemSuggestions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAClientMsg_RequestItemSuggestions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_RequestItemSuggestions::CopyFrom(const CDOTAClientMsg_RequestItemSuggestions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_RequestItemSuggestions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_RequestItemSuggestions::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_RequestItemSuggestions::Swap(CDOTAClientMsg_RequestItemSuggestions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_RequestItemSuggestions::InternalSwap(CDOTAClientMsg_RequestItemSuggestions* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_RequestItemSuggestions::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_RequestItemSuggestions

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientMsg_MakeTeamCaptain::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientMsg_MakeTeamCaptain::CDOTAClientMsg_MakeTeamCaptain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
}
CDOTAClientMsg_MakeTeamCaptain::CDOTAClientMsg_MakeTeamCaptain(const CDOTAClientMsg_MakeTeamCaptain& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
}

void CDOTAClientMsg_MakeTeamCaptain::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
}

CDOTAClientMsg_MakeTeamCaptain::~CDOTAClientMsg_MakeTeamCaptain() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  SharedDtor();
}

void CDOTAClientMsg_MakeTeamCaptain::SharedDtor() {
}

void CDOTAClientMsg_MakeTeamCaptain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientMsg_MakeTeamCaptain::descriptor() {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientMsg_MakeTeamCaptain& CDOTAClientMsg_MakeTeamCaptain::default_instance() {
  protobuf_dota_5fclientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientMsg_MakeTeamCaptain* CDOTAClientMsg_MakeTeamCaptain::New(::google::protobuf::Arena* arena) const {
  CDOTAClientMsg_MakeTeamCaptain* n = new CDOTAClientMsg_MakeTeamCaptain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientMsg_MakeTeamCaptain::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientMsg_MakeTeamCaptain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  return false;
#undef DO_
}

void CDOTAClientMsg_MakeTeamCaptain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
}

::google::protobuf::uint8* CDOTAClientMsg_MakeTeamCaptain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  return target;
}

size_t CDOTAClientMsg_MakeTeamCaptain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientMsg_MakeTeamCaptain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientMsg_MakeTeamCaptain* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientMsg_MakeTeamCaptain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
    MergeFrom(*source);
  }
}

void CDOTAClientMsg_MakeTeamCaptain::MergeFrom(const CDOTAClientMsg_MakeTeamCaptain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    set_player_id(from.player_id());
  }
}

void CDOTAClientMsg_MakeTeamCaptain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientMsg_MakeTeamCaptain::CopyFrom(const CDOTAClientMsg_MakeTeamCaptain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientMsg_MakeTeamCaptain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientMsg_MakeTeamCaptain::IsInitialized() const {
  return true;
}

void CDOTAClientMsg_MakeTeamCaptain::Swap(CDOTAClientMsg_MakeTeamCaptain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientMsg_MakeTeamCaptain::InternalSwap(CDOTAClientMsg_MakeTeamCaptain* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientMsg_MakeTeamCaptain::GetMetadata() const {
  protobuf_dota_5fclientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientMsg_MakeTeamCaptain

// optional uint32 player_id = 1;
bool CDOTAClientMsg_MakeTeamCaptain::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientMsg_MakeTeamCaptain::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientMsg_MakeTeamCaptain::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientMsg_MakeTeamCaptain::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAClientMsg_MakeTeamCaptain::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientMsg_MakeTeamCaptain.player_id)
  return player_id_;
}
void CDOTAClientMsg_MakeTeamCaptain::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientMsg_MakeTeamCaptain.player_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
